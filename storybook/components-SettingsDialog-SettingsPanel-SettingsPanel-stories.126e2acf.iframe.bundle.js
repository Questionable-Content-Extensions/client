"use strict";(self.webpackChunkquestionable_content_spa=self.webpackChunkquestionable_content_spa||[]).push([[1259],{"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Z:function(){return _slicedToArray}});var unsupportedIterableToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||(0,unsupportedIterableToArray.Z)(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},"./src/components/SettingsDialog/SettingsPanel/SettingsPanel.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return SettingsPanel_stories}});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),slicedToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),settings=__webpack_require__("./src/settings.ts"),react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function NumberSetting(_ref){var settings=_ref.settings,setting=_ref.setting,updateSettings=_ref.updateSettings,label=_ref.label,description=_ref.description,positiveOnly=_ref.positiveOnly,_useState=(0,react.useState)(settings[setting].toString()),_useState2=(0,slicedToArray.Z)(_useState,2),value=_useState2[0],setValue=_useState2[1],_useState3=(0,react.useState)(!1),_useState4=(0,slicedToArray.Z)(_useState3,2),error=_useState4[0],setError=_useState4[1];return(0,jsx_runtime.jsxs)("div",{className:"pt-4 border-0 border-t border-solid border-gray-200",children:[(0,jsx_runtime.jsxs)("label",{className:"flex items-center cursor-pointer",children:[(0,jsx_runtime.jsx)("div",{className:"mr-3 text-gray-700 font-medium",children:label}),(0,jsx_runtime.jsx)("input",{className:error?"border border-solid border-red-600":"",type:"number",onChange:function onChange(e){var value=e.target.value;setValue(value);var parsed=Number.parseInt(value);Number.isNaN(parsed)||positiveOnly&&parsed<0?setError(!0):(setError(!1),updateSettings((function(u){return u[setting]=parsed})))},value:value})]}),(0,jsx_runtime.jsx)("p",{className:"text-sm",children:description})]})}try{NumberSetting.displayName="NumberSetting",NumberSetting.__docgenInfo={description:"",displayName:"NumberSetting",props:{settings:{defaultValue:null,description:"",name:"settings",required:!0,type:{name:"SettingValues"}},setting:{defaultValue:null,description:"",name:"setting",required:!0,type:{name:'"comicLoadingIndicatorDelay"'}},updateSettings:{defaultValue:null,description:"",name:"updateSettings",required:!0,type:{name:"(u: SettingsUpdaterFunction) => void"}},label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!0,type:{name:"string"}},positiveOnly:{defaultValue:null,description:"",name:"positiveOnly",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SettingsDialog/NumberSetting/NumberSetting.tsx#NumberSetting"]={docgenInfo:NumberSetting.__docgenInfo,name:"NumberSetting",path:"src/components/SettingsDialog/NumberSetting/NumberSetting.tsx#NumberSetting"})}catch(__react_docgen_typescript_loader_error){}function SecretStringSetting(_ref){var settings=_ref.settings,setting=_ref.setting,updateSettings=_ref.updateSettings,label=_ref.label,description=_ref.description,_useState=(0,react.useState)(!!settings[setting]),_useState2=(0,slicedToArray.Z)(_useState,2),hidden=_useState2[0],setHidden=_useState2[1],_useState3=(0,react.useState)(settings[setting].toString()),_useState4=(0,slicedToArray.Z)(_useState3,2),value=_useState4[0],setValue=_useState4[1],_useState5=(0,react.useState)(!1),_useState6=(0,slicedToArray.Z)(_useState5,2),error=_useState6[0],setError=_useState6[1];return(0,jsx_runtime.jsxs)("div",{className:"pt-4 border-0 border-t border-solid border-gray-200",children:[(0,jsx_runtime.jsxs)("label",{className:"flex items-center cursor-pointer",children:[(0,jsx_runtime.jsx)("div",{className:"mr-3 text-gray-700 font-medium",children:label}),(0,jsx_runtime.jsx)("input",{type:hidden?"password":"text",onChange:function onChange(e){var value=e.target.value;setValue(value),!value||/^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value)?(setError(!1),updateSettings((function(u){return u[setting]=e.target.value}))):setError(!0)},value:value,className:"w-80 text-sm transition-filter duration-500 "+(error?"border border-solid border-red-600":""),style:{fontFamily:"monospace"},onFocus:function onFocus(){hidden&&setHidden(!1)}}),(0,jsx_runtime.jsx)("button",{className:"ml-2 text-gray-600 border border-solid border-gray-400 rounded-full py-1 px-1.5",onClick:function onClick(){return setHidden((function(blur){return!blur}))},title:hidden?"Show token":"Hide token",children:hidden?(0,jsx_runtime.jsx)("i",{className:"fa fa-eye","aria-hidden":"true"}):(0,jsx_runtime.jsx)("i",{className:"fa fa-eye-slash","aria-hidden":"true"})})]}),(0,jsx_runtime.jsx)("p",{className:"text-sm",children:description})]})}try{SecretStringSetting.displayName="SecretStringSetting",SecretStringSetting.__docgenInfo={description:"",displayName:"SecretStringSetting",props:{settings:{defaultValue:null,description:"",name:"settings",required:!0,type:{name:"SettingValues"}},setting:{defaultValue:null,description:"",name:"setting",required:!0,type:{name:'"editModeToken"'}},updateSettings:{defaultValue:null,description:"",name:"updateSettings",required:!0,type:{name:"(u: SettingsUpdaterFunction) => void"}},label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SettingsDialog/SecretStringSetting/SecretStringSetting.tsx#SecretStringSetting"]={docgenInfo:SecretStringSetting.__docgenInfo,name:"SecretStringSetting",path:"src/components/SettingsDialog/SecretStringSetting/SecretStringSetting.tsx#SecretStringSetting"})}catch(__react_docgen_typescript_loader_error){}var _Default$parameters,_Default$parameters2,_Default$parameters2$,ToggleButton=__webpack_require__("./src/components/ToggleButton/ToggleButton.tsx");function ToggleSetting(_ref){var settings=_ref.settings,setting=_ref.setting,updateSettings=_ref.updateSettings,label=_ref.label,description=_ref.description;return(0,jsx_runtime.jsxs)("div",{className:"pt-4 border-0 border-t border-solid border-gray-200",children:[(0,jsx_runtime.jsx)(ToggleButton.Z,{label:label,checked:settings[setting],onChange:function onChange(e){return updateSettings((function(s){return s[setting]=e.target.checked}))}}),(0,jsx_runtime.jsx)("p",{className:"text-sm",children:description})]})}try{ToggleSetting.displayName="ToggleSetting",ToggleSetting.__docgenInfo={description:"",displayName:"ToggleSetting",props:{settings:{defaultValue:null,description:"",name:"settings",required:!0,type:{name:"SettingValues"}},setting:{defaultValue:null,description:"",name:"setting",required:!0,type:{name:"enum",value:[{value:'"useColors"'},{value:'"editMode"'},{value:'"orderMembersByLastAppearance"'},{value:'"useCorrectTimeFormat"'},{value:'"subDivideGotoComics"'},{value:'"showDebugLogs"'},{value:'"scrollToTop"'},{value:'"showAllMembers"'},{value:'"showItemRandomButton"'},{value:'"showItemChainButton"'},{value:'"skipNonCanon"'},{value:'"skipGuest"'},{value:'"showIndicatorRibbon"'},{value:'"showTaglineAsTooltip"'},{value:'"showCast"'},{value:'"showStorylines"'},{value:'"showLocations"'},{value:'"showSmallRibbonByDefault"'}]}},updateSettings:{defaultValue:null,description:"",name:"updateSettings",required:!0,type:{name:"(u: SettingsUpdaterFunction) => void"}},label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SettingsDialog/ToggleSetting/ToggleSetting.tsx#ToggleSetting"]={docgenInfo:ToggleSetting.__docgenInfo,name:"ToggleSetting",path:"src/components/SettingsDialog/ToggleSetting/ToggleSetting.tsx#ToggleSetting"})}catch(__react_docgen_typescript_loader_error){}function SettingsPanel(_ref){var settings=_ref.settings,updateSettings=_ref.updateSettings;return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg",children:"Navigation settings"}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"scrollToTop",updateSettings:updateSettings,label:"Scroll to top on navigate",description:"Scrolls the page to the top on each navigation event."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"showAllMembers",updateSettings:updateSettings,label:"Show all members",description:"Show every cast member, storyline and location, even if they are not part of the current comic. Makes no sense to enable for normal use, but can be useful if you always want to be able to find the next/previous comic of any character/storyline/location. When editor mode is enabled, this setting gets treated like it's enabled, as an editor needs a list of all the cast to do their job effectively."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"orderMembersByLastAppearance",updateSettings:updateSettings,label:"Order members by last appearance",description:"Ordinarily, members are ordered by how frequently they appear in the comic's strips. By enabling this setting, they will instead be ordered by how recently they've appeared in the comic relative to the currently viewed comic. This can be useful if you're an editor because the comic tends to focus on a set of characters and locations in bulk, which makes finding them easier with this setting on."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"skipNonCanon",updateSettings:updateSettings,label:"Skip non-canon strips",description:"Skips strips that are not part of the canon. This includes guest strips, as well as Yelling Bird, OMG Turkeys and other non-story comics."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"skipGuest",updateSettings:updateSettings,label:"Skip guest strips",description:'Skips strips that were not made/drawn by Jeph. This setting has no effect when "skip non-canon strips" is enabled, as all guest strips are also non-canon.'}),(0,jsx_runtime.jsx)("h3",{className:"text-lg mt-6",children:"Display settings"}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"useColors",updateSettings:updateSettings,label:"Use colors",description:"Each item can be given a color by the editors. (Most non-main items will probably be plain gray.) With this setting enabled, those colors are shown in the navigation pane."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"showIndicatorRibbon",updateSettings:updateSettings,label:"Show comic indicator ribbon",description:"If a comic strip has been marked as being non-canon or a guest strip, display a ribbon with that information over the top-right corner of the comic strip."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"showItemRandomButton",updateSettings:updateSettings,label:"Show button for going to random comic per item",description:"Enabling this setting will add a button for navigation to a random comic containing the specific item."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"showItemChainButton",updateSettings:updateSettings,label:"Show button for locking the navigation to a specific item",description:"Enabling this setting will add a button for locking the page navigation to a specific item. I.e. the main navigation buttons will take on the role of the item's navigation buttons."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"showTaglineAsTooltip",updateSettings:updateSettings,label:"Show tagline as comic tooltip",description:"When this setting is enabled and the currently shown comic strip has a tagline, its tagline will become the comic strip's tooltip."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"useCorrectTimeFormat",updateSettings:updateSettings,label:"Use 24h clock format",description:"When showing when a comic was published (above the news section), use the 24-hour clock format."}),(0,jsx_runtime.jsx)(NumberSetting,{settings:settings,setting:"comicLoadingIndicatorDelay",updateSettings:updateSettings,label:"Comic loading indicator delay",description:"How long to wait in milliseconds for the next comic to load before showing a loading indicator over the previous comic.",positiveOnly:!0}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"subDivideGotoComics",updateSettings:updateSettings,label:"Sub-divide comic listing",description:"In the 'Go to comic' dialog and other locations where comics are listed, when this setting is enabled, comics get grouped by which set of 1000 and which set of 100 they belong to. If the setting is disabled, the comics are listed in one long list."}),(0,jsx_runtime.jsx)("h3",{className:"text-lg mt-6",children:"Advanced settings"}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"showDebugLogs",updateSettings:updateSettings,label:"Enable debug logs in console",description:"Print debugging information in the Javascript console. Useful for debugging. If you discover a bug in the script, it is helpful if you include the log with this setting enabled in your bug report."}),(0,jsx_runtime.jsx)(ToggleSetting,{settings:settings,setting:"editMode",updateSettings:updateSettings,label:"Enable editor mode",description:"Enables features for creating and changing the navigation data, such as adding cast members. Requires a valid editor token. Feel free to turn on edit mode regardless if you are curious what it is like."}),(0,jsx_runtime.jsx)(SecretStringSetting,{settings:settings,setting:"editModeToken",updateSettings:updateSettings,label:"Editor token",description:"Your editor token goes here. If you are supposed to have one, you do."}),(0,jsx_runtime.jsx)("h3",{className:"text-lg mt-6",children:"Appreciate my efforts?"}),(0,jsx_runtime.jsx)("div",{className:"pt-4 pb-4 border-0 border-t border-solid border-gray-200",children:(0,jsx_runtime.jsx)("a",{href:"https://ko-fi.com/ilyvion",target:"_blank",rel:"noopener",children:(0,jsx_runtime.jsx)("img",{height:"36",style:{border:"0px",height:"36px"},src:"https://cdn.ko-fi.com/cdn/kofi2.png?v=3",alt:"Buy Me a Coffee at ko-fi.com"})})})]})}try{SettingsPanel.displayName="SettingsPanel",SettingsPanel.__docgenInfo={description:"",displayName:"SettingsPanel",props:{settings:{defaultValue:null,description:"",name:"settings",required:!0,type:{name:"SettingValues"}},updateSettings:{defaultValue:null,description:"",name:"updateSettings",required:!0,type:{name:"(u: SettingsUpdaterFunction) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SettingsDialog/SettingsPanel/SettingsPanel.tsx#SettingsPanel"]={docgenInfo:SettingsPanel.__docgenInfo,name:"SettingsPanel",path:"src/components/SettingsDialog/SettingsPanel/SettingsPanel.tsx#SettingsPanel"})}catch(__react_docgen_typescript_loader_error){}var SettingsPanel_stories={component:SettingsPanel,argTypes:{updateSettings:{action:"updateSettings"}}},Default=function Template(args){var _useArgs=(0,external_STORYBOOK_MODULE_PREVIEW_API_.useArgs)(),_useArgs2=(0,slicedToArray.Z)(_useArgs,2),setArgs=(_useArgs2[0],_useArgs2[1]);return(0,jsx_runtime.jsx)(SettingsPanel,(0,objectSpread2.Z)((0,objectSpread2.Z)({},args),{},{updateSettings:function updateSettings(s){args.updateSettings&&args.updateSettings(s),s(args.settings),setArgs({settings:args.settings})}}))}.bind({});Default.args={settings:(0,objectSpread2.Z)((0,objectSpread2.Z)({},settings.C.DEFAULTS),{},{editModeToken:"00000000-0000-0000-0000-000000000000"})},Default.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},Default.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs),{},{source:(0,objectSpread2.Z)({originalSource:"args => {\n  const [_, setArgs] = useArgs();\n  const updateSettings = (s: SettingsUpdaterFunction) => {\n    if (args.updateSettings) {\n      args.updateSettings(s);\n    }\n    s(args.settings);\n    setArgs({\n      settings: args.settings\n    });\n  };\n  return <SettingsPanel {...args} updateSettings={updateSettings} />;\n}"},null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2$=_Default$parameters2.docs)||void 0===_Default$parameters2$?void 0:_Default$parameters2$.source)})});var __namedExportsOrder=["Default"]},"./src/components/ToggleButton/ToggleButton.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{h:function(){return Kind},Z:function(){return ToggleButton}});var Kind,ToggleButton_module={toggle:"ToggleButton_toggle__eAiZn",dot:"ToggleButton_dot__kygA4",background:"ToggleButton_background__bj6Cf",disabled:"ToggleButton_disabled__1hbzd",skinny:"ToggleButton_skinny__hN-en",thick:"ToggleButton_thick__f7yHB"},jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function ToggleButton(_ref){var background,dot,label=_ref.label,kind=_ref.kind,onChange=_ref.onChange,checked=_ref.checked,disabled=_ref.disabled,title=_ref.title,dirty=_ref.dirty;return void 0===kind||kind===Kind.Skinny?(background=(0,jsx_runtime.jsx)("div",{className:"w-10 h-4 bg-gray-400 rounded-full shadow-inner transition-[background-color] "+"".concat(ToggleButton_module.background," ").concat(ToggleButton_module.skinny)+(disabled?" ".concat(ToggleButton_module.disabled):"")}),dot=(0,jsx_runtime.jsx)("div",{className:"absolute w-6 h-6 bg-white rounded-full shadow -left-1 -top-1 transition-transform "+"".concat(ToggleButton_module.dot," ").concat(ToggleButton_module.skinny)+(disabled?" ".concat(ToggleButton_module.disabled):"")})):(background=(0,jsx_runtime.jsx)("div",{className:"block bg-gray-400 w-14 h-8 rounded-full transition-[background-color] "+"".concat(ToggleButton_module.background," ").concat(ToggleButton_module.thick)+(disabled?" ".concat(ToggleButton_module.disabled):"")}),dot=(0,jsx_runtime.jsx)("div",{className:"dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition-transform "+"".concat(ToggleButton_module.dot," ").concat(ToggleButton_module.thick)+(disabled?" ".concat(ToggleButton_module.disabled):"")})),(0,jsx_runtime.jsxs)("label",{className:"flex items-center "+(dirty?"bg-amber-100 ":"")+(disabled?"cursor-not-allowed":"cursor-pointer"),title:title,children:[(0,jsx_runtime.jsxs)("div",{className:"relative",children:[(0,jsx_runtime.jsx)("input",{type:"checkbox",className:"sr-only "+ToggleButton_module.toggle,onChange:onChange,checked:checked,disabled:disabled}),background,dot]}),(0,jsx_runtime.jsxs)("div",{className:"ml-3 font-medium "+(dirty?"italic ":"")+(disabled?"text-gray-500":"text-gray-700"),children:[label,dirty?"*":""]})]})}!function(Kind){Kind[Kind.Skinny=0]="Skinny",Kind[Kind.Thick=1]="Thick"}(Kind||(Kind={}));try{ToggleButton.displayName="ToggleButton",ToggleButton.__docgenInfo={description:"",displayName:"ToggleButton",props:{label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},kind:{defaultValue:null,description:"",name:"kind",required:!1,type:{name:"enum",value:[{value:"0"},{value:"1"}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement>"}},checked:{defaultValue:null,description:"",name:"checked",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},dirty:{defaultValue:null,description:"",name:"dirty",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ToggleButton/ToggleButton.tsx#ToggleButton"]={docgenInfo:ToggleButton.__docgenInfo,name:"ToggleButton",path:"src/components/ToggleButton/ToggleButton.tsx#ToggleButton"})}catch(__react_docgen_typescript_loader_error){}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,