/*! For license information please see 7409.7a7c4b25.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkquestionable_content_spa=self.webpackChunkquestionable_content_spa||[]).push([[7409],{"./node_modules/@storybook/jest/dist/index.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{l:function(){return expect},e:function(){return jest}});var matchers_namespaceObject={};__webpack_require__.r(matchers_namespaceObject),__webpack_require__.d(matchers_namespaceObject,{toBeChecked:function(){return toBeChecked},toBeDisabled:function(){return toBeDisabled},toBeEmpty:function(){return toBeEmpty},toBeEmptyDOMElement:function(){return toBeEmptyDOMElement},toBeEnabled:function(){return toBeEnabled},toBeInTheDOM:function(){return toBeInTheDOM},toBeInTheDocument:function(){return toBeInTheDocument},toBeInvalid:function(){return toBeInvalid},toBePartiallyChecked:function(){return toBePartiallyChecked},toBeRequired:function(){return toBeRequired},toBeValid:function(){return toBeValid},toBeVisible:function(){return toBeVisible},toContainElement:function(){return toContainElement},toContainHTML:function(){return toContainHTML},toHaveAccessibleDescription:function(){return toHaveAccessibleDescription},toHaveAccessibleErrorMessage:function(){return toHaveAccessibleErrorMessage},toHaveAccessibleName:function(){return toHaveAccessibleName},toHaveAttribute:function(){return toHaveAttribute},toHaveClass:function(){return toHaveClass},toHaveDescription:function(){return toHaveDescription},toHaveDisplayValue:function(){return toHaveDisplayValue},toHaveErrorMessage:function(){return toHaveErrorMessage},toHaveFocus:function(){return toHaveFocus},toHaveFormValues:function(){return toHaveFormValues},toHaveStyle:function(){return toHaveStyle},toHaveTextContent:function(){return toHaveTextContent},toHaveValue:function(){return toHaveValue}});var e={"./node_modules/@babel/code-frame/lib/index.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js"),o=n("./node_modules/console-browserify/index.js");Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=c,t.default=function(e,t,n,i={}){if(!s){s=!0;const e="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";r.emitWarning?r.emitWarning(e,"DeprecationWarning"):(new Error(e).name="DeprecationWarning",o.warn(new Error(e)))}return c(e,{start:{column:n=Math.max(n,0),line:t}},i)};var i=n("./node_modules/@babel/highlight/lib/index.js");let s=!1;const a=/\r\n|[\n\r\u2028\u2029]/;function c(e,t,n={}){const r=(n.highlightCode||n.forceColor)&&(0,i.shouldHighlight)(n),o=(0,i.getChalk)(n),s=function(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}(o),c=(e,t)=>r?e(t):t,l=e.split(a),{start:u,end:f,markerLines:p}=function(e,t,n){const r=Object.assign({column:0,line:-1},e.start),o=Object.assign({},r,e.end),{linesAbove:i=2,linesBelow:s=3}=n||{},a=r.line,c=r.column,l=o.line,u=o.column;let f=Math.max(a-(i+1),0),p=Math.min(t.length,l+s);-1===a&&(f=0),-1===l&&(p=t.length);const d=l-a,h={};if(d)for(let e=0;e<=d;e++){const n=e+a;if(c)if(0===e){const e=t[n-1].length;h[n]=[c,e-c+1]}else if(e===d)h[n]=[0,u];else{const r=t[n-e].length;h[n]=[0,r]}else h[n]=!0}else h[a]=c===u?!c||[c,0]:[c,u-c];return{start:f,end:p,markerLines:h}}(t,l,n),d=t.start&&"number"==typeof t.start.column,h=String(f).length;let g=(r?(0,i.default)(e,n):e).split(a,f).slice(u,f).map(((e,t)=>{const r=u+1+t,o=` ${` ${r}`.slice(-h)} |`,i=p[r],a=!p[r+1];if(i){let t="";if(Array.isArray(i)){const r=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\t]/g," "),l=i[1]||1;t=["\n ",c(s.gutter,o.replace(/\d/g," "))," ",r,c(s.marker,"^").repeat(l)].join(""),a&&n.message&&(t+=" "+c(s.message,n.message))}return[c(s.marker,">"),c(s.gutter,o),e.length>0?` ${e}`:"",t].join("")}return` ${c(s.gutter,o)}${e.length>0?` ${e}`:""}`})).join("\n");return n.message&&!d&&(g=`${" ".repeat(h+1)}${n.message}\n${g}`),r?o.reset(g):g}},"./node_modules/@babel/helper-validator-identifier/lib/identifier.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifierStart=l,t.isIdentifierChar=u,t.isIdentifierName=function(e){let t=!0;for(let n=0;n<e.length;n++){let r=e.charCodeAt(n);if(55296==(64512&r)&&n+1<e.length){const t=e.charCodeAt(++n);56320==(64512&t)&&(r=65536+((1023&r)<<10)+(1023&t))}if(t){if(t=!1,!l(r))return!1}else if(!u(r))return!1}return!t};let n="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",r="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";const o=new RegExp("["+n+"]"),i=new RegExp("["+n+r+"]");n=r=null;const s=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938],a=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];function c(e,t){let n=65536;for(let r=0,o=t.length;r<o;r+=2){if(n+=t[r],n>e)return!1;if(n+=t[r+1],n>=e)return!0}return!1}function l(e){return e<65?36===e:e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&o.test(String.fromCharCode(e)):c(e,s)))}function u(e){return e<48?36===e:e<58||!(e<65)&&(e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&i.test(String.fromCharCode(e)):c(e,s)||c(e,a))))}},"./node_modules/@babel/helper-validator-identifier/lib/index.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"isIdentifierName",{enumerable:!0,get:function(){return r.isIdentifierName}}),Object.defineProperty(t,"isIdentifierChar",{enumerable:!0,get:function(){return r.isIdentifierChar}}),Object.defineProperty(t,"isIdentifierStart",{enumerable:!0,get:function(){return r.isIdentifierStart}}),Object.defineProperty(t,"isReservedWord",{enumerable:!0,get:function(){return o.isReservedWord}}),Object.defineProperty(t,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return o.isStrictBindOnlyReservedWord}}),Object.defineProperty(t,"isStrictBindReservedWord",{enumerable:!0,get:function(){return o.isStrictBindReservedWord}}),Object.defineProperty(t,"isStrictReservedWord",{enumerable:!0,get:function(){return o.isStrictReservedWord}}),Object.defineProperty(t,"isKeyword",{enumerable:!0,get:function(){return o.isKeyword}});var r=n("./node_modules/@babel/helper-validator-identifier/lib/identifier.js"),o=n("./node_modules/@babel/helper-validator-identifier/lib/keyword.js")},"./node_modules/@babel/helper-validator-identifier/lib/keyword.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isReservedWord=a,t.isStrictReservedWord=c,t.isStrictBindOnlyReservedWord=l,t.isStrictBindReservedWord=function(e,t){return c(e,t)||l(e)},t.isKeyword=function(e){return o.has(e)};const o=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),i=new Set(["implements","interface","let","package","private","protected","public","static","yield"]),s=new Set(["eval","arguments"]);function a(e,t){return t&&"await"===e||"enum"===e}function c(e,t){return a(e,t)||i.has(e)}function l(e){return s.has(e)}},"./node_modules/@babel/highlight/lib/index.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t={}){if(u(t)){const n=function(e){return{keyword:e.cyan,capitalized:e.yellow,jsxIdentifier:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}(f(t));return function(e,t){let n="";for(const{type:r,value:o}of l(t)){const t=e[r];n+=t?o.split(a).map((e=>t(e))).join("\n"):o}return n}(n,e)}return e},t.getChalk=f,t.shouldHighlight=u;var r=n("./node_modules/js-tokens/index.js"),o=n("./node_modules/@babel/helper-validator-identifier/lib/index.js"),i=n("./node_modules/@babel/highlight/node_modules/chalk/index.js");const s=new Set(["as","async","from","get","of","set"]),a=/\r\n|[\n\r\u2028\u2029]/,c=/^[()[\]{}]$/;let l;{const e=/^[a-z][\w-]*$/i,t=function(t,n,r){if("name"===t.type){if((0,o.isKeyword)(t.value)||(0,o.isStrictReservedWord)(t.value,!0)||s.has(t.value))return"keyword";if(e.test(t.value)&&("<"===r[n-1]||"</"==r.substr(n-2,2)))return"jsxIdentifier";if(t.value[0]!==t.value[0].toLowerCase())return"capitalized"}return"punctuator"===t.type&&c.test(t.value)?"bracket":"invalid"!==t.type||"@"!==t.value&&"#"!==t.value?t.type:"punctuator"};l=function*(e){let n;for(;n=r.default.exec(e);){const o=r.matchToToken(n);yield{type:t(o,n.index,e),value:o.value}}}}function u(e){return!!i.supportsColor||e.forceColor}function f(e){return e.forceColor?new i.constructor({enabled:!0,level:1}):i}},"./node_modules/@babel/highlight/node_modules/ansi-styles/index.js":(e,t,n)=>{e=n.nmd(e);const r=n("./node_modules/@babel/highlight/node_modules/color-convert/index.js"),o=(e,t)=>function(){return`[${e.apply(r,arguments)+t}m`},i=(e,t)=>function(){const n=e.apply(r,arguments);return`[${38+t};5;${n}m`},s=(e,t)=>function(){const n=e.apply(r,arguments);return`[${38+t};2;${n[0]};${n[1]};${n[2]}m`};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.grey=t.color.gray;for(const n of Object.keys(t)){const r=t[n];for(const n of Object.keys(r)){const o=r[n];t[n]={open:`[${o[0]}m`,close:`[${o[1]}m`},r[n]=t[n],e.set(o[0],o[1])}Object.defineProperty(t,n,{value:r,enumerable:!1}),Object.defineProperty(t,"codes",{value:e,enumerable:!1})}const n=e=>e,a=(e,t,n)=>[e,t,n];t.color.close="[39m",t.bgColor.close="[49m",t.color.ansi={ansi:o(n,0)},t.color.ansi256={ansi256:i(n,0)},t.color.ansi16m={rgb:s(a,0)},t.bgColor.ansi={ansi:o(n,10)},t.bgColor.ansi256={ansi256:i(n,10)},t.bgColor.ansi16m={rgb:s(a,10)};for(let e of Object.keys(r)){if("object"!=typeof r[e])continue;const n=r[e];"ansi16"===e&&(e="ansi"),"ansi16"in n&&(t.color.ansi[e]=o(n.ansi16,0),t.bgColor.ansi[e]=o(n.ansi16,10)),"ansi256"in n&&(t.color.ansi256[e]=i(n.ansi256,0),t.bgColor.ansi256[e]=i(n.ansi256,10)),"rgb"in n&&(t.color.ansi16m[e]=s(n.rgb,0),t.bgColor.ansi16m[e]=s(n.rgb,10))}return t}})},"./node_modules/@babel/highlight/node_modules/chalk/index.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js");const o=n("./node_modules/escape-string-regexp/index.js"),i=n("./node_modules/@babel/highlight/node_modules/ansi-styles/index.js"),s=n("./node_modules/@babel/highlight/node_modules/supports-color/browser.js").stdout,a=n("./node_modules/@babel/highlight/node_modules/chalk/templates.js"),c="win32"===r.platform&&!(r.env.TERM||"").toLowerCase().startsWith("xterm"),l=["ansi","ansi","ansi256","ansi16m"],u=new Set(["gray"]),f=Object.create(null);function p(e,t){t=t||{};const n=s?s.level:0;e.level=void 0===t.level?n:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function d(e){if(!this||!(this instanceof d)||this.template){const t={};return p(t,e),t.template=function(){const e=[].slice.call(arguments);return y.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,d.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=d,t.template}p(this,e)}c&&(i.blue.open="[94m");for(const e of Object.keys(i))i[e].closeRe=new RegExp(o(i[e].close),"g"),f[e]={get(){const t=i[e];return g.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}};f.visible={get(){return g.call(this,this._styles||[],!0,"visible")}},i.color.closeRe=new RegExp(o(i.color.close),"g");for(const e of Object.keys(i.color.ansi))u.has(e)||(f[e]={get(){const t=this.level;return function(){const r={open:i.color[l[t]][e].apply(null,arguments),close:i.color.close,closeRe:i.color.closeRe};return g.call(this,this._styles?this._styles.concat(r):[r],this._empty,e)}}});i.bgColor.closeRe=new RegExp(o(i.bgColor.close),"g");for(const e of Object.keys(i.bgColor.ansi))u.has(e)||(f["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const t=this.level;return function(){const r={open:i.bgColor[l[t]][e].apply(null,arguments),close:i.bgColor.close,closeRe:i.bgColor.closeRe};return g.call(this,this._styles?this._styles.concat(r):[r],this._empty,e)}}});const h=Object.defineProperties((()=>{}),f);function g(e,t,n){const r=function(){return m.apply(r,arguments)};r._styles=e,r._empty=t;const o=this;return Object.defineProperty(r,"level",{enumerable:!0,get:()=>o.level,set(e){o.level=e}}),Object.defineProperty(r,"enabled",{enumerable:!0,get:()=>o.enabled,set(e){o.enabled=e}}),r.hasGrey=this.hasGrey||"gray"===n||"grey"===n,r.__proto__=h,r}function m(){const e=arguments,t=e.length;let n=String(arguments[0]);if(0===t)return"";if(t>1)for(let r=1;r<t;r++)n+=" "+e[r];if(!this.enabled||this.level<=0||!n)return this._empty?"":n;const r=i.dim.open;c&&this.hasGrey&&(i.dim.open="");for(const e of this._styles.slice().reverse())n=e.open+n.replace(e.closeRe,e.open)+e.close,n=n.replace(/\r?\n/g,`${e.close}$&${e.open}`);return i.dim.open=r,n}function y(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");const n=[].slice.call(arguments,2),r=[t.raw[0]];for(let e=1;e<t.length;e++)r.push(String(n[e-1]).replace(/[{}\\]/g,"\\$&")),r.push(String(t.raw[e]));return a(e,r.join(""))}Object.defineProperties(d.prototype,f),e.exports=d(),e.exports.supportsColor=s,e.exports.default=e.exports},"./node_modules/@babel/highlight/node_modules/chalk/templates.js":e=>{const t=/(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,n=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,r=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,o=/\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi,i=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function s(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):i.get(e)||e}function a(e,t){const n=[],i=t.trim().split(/\s*,\s*/g);let a;for(const t of i)if(isNaN(t)){if(!(a=t.match(r)))throw new Error(`Invalid Chalk template style argument: ${t} (in style '${e}')`);n.push(a[2].replace(o,((e,t,n)=>t?s(t):n)))}else n.push(Number(t));return n}function c(e){n.lastIndex=0;const t=[];let r;for(;null!==(r=n.exec(e));){const e=r[1];if(r[2]){const n=a(e,r[2]);t.push([e].concat(n))}else t.push([e])}return t}function l(e,t){const n={};for(const e of t)for(const t of e.styles)n[t[0]]=e.inverse?null:t.slice(1);let r=e;for(const e of Object.keys(n))if(Array.isArray(n[e])){if(!(e in r))throw new Error(`Unknown Chalk style: ${e}`);r=n[e].length>0?r[e].apply(r,n[e]):r[e]}return r}e.exports=(e,n)=>{const r=[],o=[];let i=[];if(n.replace(t,((t,n,a,u,f,p)=>{if(n)i.push(s(n));else if(u){const t=i.join("");i=[],o.push(0===r.length?t:l(e,r)(t)),r.push({inverse:a,styles:c(u)})}else if(f){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");o.push(l(e,r)(i.join(""))),i=[],r.pop()}else i.push(p)})),o.push(i.join("")),r.length>0){const e=`Chalk template literal is missing ${r.length} closing bracket${1===r.length?"":"s"} (\`}\`)`;throw new Error(e)}return o.join("")}},"./node_modules/@babel/highlight/node_modules/color-convert/conversions.js":(e,t,n)=>{var r=n("./node_modules/@babel/highlight/node_modules/color-name/index.js"),o={};for(var i in r)r.hasOwnProperty(i)&&(o[r[i]]=i);var s=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var a in s)if(s.hasOwnProperty(a)){if(!("channels"in s[a]))throw new Error("missing channels property: "+a);if(!("labels"in s[a]))throw new Error("missing channel labels property: "+a);if(s[a].labels.length!==s[a].channels)throw new Error("channel and label counts mismatch: "+a);var c=s[a].channels,l=s[a].labels;delete s[a].channels,delete s[a].labels,Object.defineProperty(s[a],"channels",{value:c}),Object.defineProperty(s[a],"labels",{value:l})}s.rgb.hsl=function(e){var t,n,r=e[0]/255,o=e[1]/255,i=e[2]/255,s=Math.min(r,o,i),a=Math.max(r,o,i),c=a-s;return a===s?t=0:r===a?t=(o-i)/c:o===a?t=2+(i-r)/c:i===a&&(t=4+(r-o)/c),(t=Math.min(60*t,360))<0&&(t+=360),n=(s+a)/2,[t,100*(a===s?0:n<=.5?c/(a+s):c/(2-a-s)),100*n]},s.rgb.hsv=function(e){var t,n,r,o,i,s=e[0]/255,a=e[1]/255,c=e[2]/255,l=Math.max(s,a,c),u=l-Math.min(s,a,c),f=function(e){return(l-e)/6/u+.5};return 0===u?o=i=0:(i=u/l,t=f(s),n=f(a),r=f(c),s===l?o=r-n:a===l?o=1/3+t-r:c===l&&(o=2/3+n-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*i,100*l]},s.rgb.hwb=function(e){var t=e[0],n=e[1],r=e[2];return[s.rgb.hsl(e)[0],1/255*Math.min(t,Math.min(n,r))*100,100*(r=1-1/255*Math.max(t,Math.max(n,r)))]},s.rgb.cmyk=function(e){var t,n=e[0]/255,r=e[1]/255,o=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-r,1-o)))/(1-t)||0),100*((1-r-t)/(1-t)||0),100*((1-o-t)/(1-t)||0),100*t]},s.rgb.keyword=function(e){var t=o[e];if(t)return t;var n,i,s,a=1/0;for(var c in r)if(r.hasOwnProperty(c)){var u=(i=e,s=r[c],Math.pow(i[0]-s[0],2)+Math.pow(i[1]-s[1],2)+Math.pow(i[2]-s[2],2));u<a&&(a=u,n=c)}return n},s.keyword.rgb=function(e){return r[e]},s.rgb.xyz=function(e){var t=e[0]/255,n=e[1]/255,r=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]},s.rgb.lab=function(e){var t=s.rgb.xyz(e),n=t[0],r=t[1],o=t[2];return r/=100,o/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},s.hsl.rgb=function(e){var t,n,r,o,i,s=e[0]/360,a=e[1]/100,c=e[2]/100;if(0===a)return[i=255*c,i,i];t=2*c-(n=c<.5?c*(1+a):c+a-c*a),o=[0,0,0];for(var l=0;l<3;l++)(r=s+1/3*-(l-1))<0&&r++,r>1&&r--,i=6*r<1?t+6*(n-t)*r:2*r<1?n:3*r<2?t+(n-t)*(2/3-r)*6:t,o[l]=255*i;return o},s.hsl.hsv=function(e){var t=e[0],n=e[1]/100,r=e[2]/100,o=n,i=Math.max(r,.01);return n*=(r*=2)<=1?r:2-r,o*=i<=1?i:2-i,[t,100*(0===r?2*o/(i+o):2*n/(r+n)),(r+n)/2*100]},s.hsv.rgb=function(e){var t=e[0]/60,n=e[1]/100,r=e[2]/100,o=Math.floor(t)%6,i=t-Math.floor(t),s=255*r*(1-n),a=255*r*(1-n*i),c=255*r*(1-n*(1-i));switch(r*=255,o){case 0:return[r,c,s];case 1:return[a,r,s];case 2:return[s,r,c];case 3:return[s,a,r];case 4:return[c,s,r];case 5:return[r,s,a]}},s.hsv.hsl=function(e){var t,n,r,o=e[0],i=e[1]/100,s=e[2]/100,a=Math.max(s,.01);return r=(2-i)*s,n=i*a,[o,100*(n=(n/=(t=(2-i)*a)<=1?t:2-t)||0),100*(r/=2)]},s.hwb.rgb=function(e){var t,n,r,o,i,s,a,c=e[0]/360,l=e[1]/100,u=e[2]/100,f=l+u;switch(f>1&&(l/=f,u/=f),r=6*c-(t=Math.floor(6*c)),0!=(1&t)&&(r=1-r),o=l+r*((n=1-u)-l),t){default:case 6:case 0:i=n,s=o,a=l;break;case 1:i=o,s=n,a=l;break;case 2:i=l,s=n,a=o;break;case 3:i=l,s=o,a=n;break;case 4:i=o,s=l,a=n;break;case 5:i=n,s=l,a=o}return[255*i,255*s,255*a]},s.cmyk.rgb=function(e){var t=e[0]/100,n=e[1]/100,r=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o))]},s.xyz.rgb=function(e){var t,n,r,o=e[0]/100,i=e[1]/100,s=e[2]/100;return n=-.9689*o+1.8758*i+.0415*s,r=.0557*o+-.204*i+1.057*s,t=(t=3.2406*o+-1.5372*i+-.4986*s)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]},s.xyz.lab=function(e){var t=e[0],n=e[1],r=e[2];return n/=100,r/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},s.lab.xyz=function(e){var t,n,r,o=e[0];t=e[1]/500+(n=(o+16)/116),r=n-e[2]/200;var i=Math.pow(n,3),s=Math.pow(t,3),a=Math.pow(r,3);return n=i>.008856?i:(n-16/116)/7.787,t=s>.008856?s:(t-16/116)/7.787,r=a>.008856?a:(r-16/116)/7.787,[t*=95.047,n*=100,r*=108.883]},s.lab.lch=function(e){var t,n=e[0],r=e[1],o=e[2];return(t=360*Math.atan2(o,r)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(r*r+o*o),t]},s.lch.lab=function(e){var t,n=e[0],r=e[1];return t=e[2]/360*2*Math.PI,[n,r*Math.cos(t),r*Math.sin(t)]},s.rgb.ansi16=function(e){var t=e[0],n=e[1],r=e[2],o=1 in arguments?arguments[1]:s.rgb.hsv(e)[2];if(0===(o=Math.round(o/50)))return 30;var i=30+(Math.round(r/255)<<2|Math.round(n/255)<<1|Math.round(t/255));return 2===o&&(i+=60),i},s.hsv.ansi16=function(e){return s.rgb.ansi16(s.hsv.rgb(e),e[2])},s.rgb.ansi256=function(e){var t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)},s.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},s.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var n;return e-=16,[Math.floor(e/36)/5*255,Math.floor((n=e%36)/6)/5*255,n%6/5*255]},s.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},s.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var n=t[0];3===t[0].length&&(n=n.split("").map((function(e){return e+e})).join(""));var r=parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},s.rgb.hcg=function(e){var t,n=e[0]/255,r=e[1]/255,o=e[2]/255,i=Math.max(Math.max(n,r),o),s=Math.min(Math.min(n,r),o),a=i-s;return t=a<=0?0:i===n?(r-o)/a%6:i===r?2+(o-n)/a:4+(n-r)/a+4,t/=6,[360*(t%=1),100*a,100*(a<1?s/(1-a):0)]},s.hsl.hcg=function(e){var r,t=e[1]/100,n=e[2]/100,o=0;return(r=n<.5?2*t*n:2*t*(1-n))<1&&(o=(n-.5*r)/(1-r)),[e[0],100*r,100*o]},s.hsv.hcg=function(e){var t=e[1]/100,n=e[2]/100,r=t*n,o=0;return r<1&&(o=(n-r)/(1-r)),[e[0],100*r,100*o]},s.hcg.rgb=function(e){var t=e[0]/360,n=e[1]/100,r=e[2]/100;if(0===n)return[255*r,255*r,255*r];var o,i=[0,0,0],s=t%1*6,a=s%1,c=1-a;switch(Math.floor(s)){case 0:i[0]=1,i[1]=a,i[2]=0;break;case 1:i[0]=c,i[1]=1,i[2]=0;break;case 2:i[0]=0,i[1]=1,i[2]=a;break;case 3:i[0]=0,i[1]=c,i[2]=1;break;case 4:i[0]=a,i[1]=0,i[2]=1;break;default:i[0]=1,i[1]=0,i[2]=c}return o=(1-n)*r,[255*(n*i[0]+o),255*(n*i[1]+o),255*(n*i[2]+o)]},s.hcg.hsv=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t),r=0;return n>0&&(r=t/n),[e[0],100*r,100*n]},s.hcg.hsl=function(e){var t=e[1]/100,n=e[2]/100*(1-t)+.5*t,r=0;return n>0&&n<.5?r=t/(2*n):n>=.5&&n<1&&(r=t/(2*(1-n))),[e[0],100*r,100*n]},s.hcg.hwb=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},s.hwb.hcg=function(e){var t=e[1]/100,n=1-e[2]/100,r=n-t,o=0;return r<1&&(o=(n-r)/(1-r)),[e[0],100*r,100*o]},s.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},s.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},s.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},s.gray.hsl=s.gray.hsv=function(e){return[0,0,e[0]]},s.gray.hwb=function(e){return[0,100,e[0]]},s.gray.cmyk=function(e){return[0,0,0,e[0]]},s.gray.lab=function(e){return[e[0],0,0]},s.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},s.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},"./node_modules/@babel/highlight/node_modules/color-convert/index.js":(e,t,n)=>{var r=n("./node_modules/@babel/highlight/node_modules/color-convert/conversions.js"),o=n("./node_modules/@babel/highlight/node_modules/color-convert/route.js"),i={};Object.keys(r).forEach((function(e){i[e]={},Object.defineProperty(i[e],"channels",{value:r[e].channels}),Object.defineProperty(i[e],"labels",{value:r[e].labels});var t=o(e);Object.keys(t).forEach((function(n){var r=t[n];i[e][n]=function(e){var t=function(t){if(null==t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var n=e(t);if("object"==typeof n)for(var r=n.length,o=0;o<r;o++)n[o]=Math.round(n[o]);return n};return"conversion"in e&&(t.conversion=e.conversion),t}(r),i[e][n].raw=function(e){var t=function(t){return null==t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(r)}))})),e.exports=i},"./node_modules/@babel/highlight/node_modules/color-convert/route.js":(e,t,n)=>{var r=n("./node_modules/@babel/highlight/node_modules/color-convert/conversions.js");function o(e){var t=function(){for(var e={},t=Object.keys(r),n=t.length,o=0;o<n;o++)e[t[o]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;)for(var o=n.pop(),i=Object.keys(r[o]),s=i.length,a=0;a<s;a++){var c=i[a],l=t[c];-1===l.distance&&(l.distance=t[o].distance+1,l.parent=o,n.unshift(c))}return t}function i(e,t){return function(n){return t(e(n))}}function s(e,t){for(var n=[t[e].parent,e],o=r[t[e].parent][e],s=t[e].parent;t[s].parent;)n.unshift(t[s].parent),o=i(r[t[s].parent][s],o),s=t[s].parent;return o.conversion=n,o}e.exports=function(e){for(var t=o(e),n={},r=Object.keys(t),i=r.length,a=0;a<i;a++){var c=r[a];null!==t[c].parent&&(n[c]=s(c,t))}return n}},"./node_modules/@babel/highlight/node_modules/color-name/index.js":e=>{e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},"./node_modules/@babel/highlight/node_modules/supports-color/browser.js":e=>{e.exports={stdout:!1,stderr:!1}},"./node_modules/ansi-regex/index.js":e=>{e.exports=({onlyFirst:e=!1}={})=>{const t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(t,e?void 0:"g")}},"./node_modules/ansi-styles/index.js":(e,t,n)=>{e=n.nmd(e);const r=(e,t)=>(...n)=>`[${e(...n)+t}m`,o=(e,t)=>(...n)=>{const r=e(...n);return`[${38+t};5;${r}m`},i=(e,t)=>(...n)=>{const r=e(...n);return`[${38+t};2;${r[0]};${r[1]};${r[2]}m`},s=e=>e,a=(e,t,n)=>[e,t,n],c=(e,t,n)=>{Object.defineProperty(e,t,{get:()=>{const r=n();return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0}),r},enumerable:!0,configurable:!0})};let l;const u=(e,t,r,o)=>{void 0===l&&(l=n("./node_modules/color-convert/index.js"));const i=o?10:0,s={};for(const[n,o]of Object.entries(l)){const a="ansi16"===n?"ansi":n;n===t?s[a]=e(r,i):"object"==typeof o&&(s[a]=e(o[t],i))}return s};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.gray=t.color.blackBright,t.bgColor.bgGray=t.bgColor.bgBlackBright,t.color.grey=t.color.blackBright,t.bgColor.bgGrey=t.bgColor.bgBlackBright;for(const[n,r]of Object.entries(t)){for(const[n,o]of Object.entries(r))t[n]={open:`[${o[0]}m`,close:`[${o[1]}m`},r[n]=t[n],e.set(o[0],o[1]);Object.defineProperty(t,n,{value:r,enumerable:!1})}return Object.defineProperty(t,"codes",{value:e,enumerable:!1}),t.color.close="[39m",t.bgColor.close="[49m",c(t.color,"ansi",(()=>u(r,"ansi16",s,!1))),c(t.color,"ansi256",(()=>u(o,"ansi256",s,!1))),c(t.color,"ansi16m",(()=>u(i,"rgb",a,!1))),c(t.bgColor,"ansi",(()=>u(r,"ansi16",s,!0))),c(t.bgColor,"ansi256",(()=>u(o,"ansi256",s,!0))),c(t.bgColor,"ansi16m",(()=>u(i,"rgb",a,!0))),t}})},"./node_modules/assert/build/assert.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js"),o=n("./node_modules/console-browserify/index.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var s,a,c=n("./node_modules/assert/build/internal/errors.js").codes,l=c.ERR_AMBIGUOUS_ARGUMENT,u=c.ERR_INVALID_ARG_TYPE,f=c.ERR_INVALID_ARG_VALUE,p=c.ERR_INVALID_RETURN_VALUE,d=c.ERR_MISSING_ARGS,h=n("./node_modules/assert/build/internal/assert/assertion_error.js"),g=n("./node_modules/util/util.js").inspect,m=n("./node_modules/util/util.js").types,y=m.isPromise,b=m.isRegExp,v=Object.assign?Object.assign:n("./node_modules/es6-object-assign/index.js").assign,E=Object.is?Object.is:n("./node_modules/object-is/index.js");function w(){var e=n("./node_modules/assert/build/internal/util/comparisons.js");s=e.isDeepEqual,a=e.isDeepStrictEqual}new Map;var j=!1,_=e.exports=R,x={};function A(e){if(e.message instanceof Error)throw e.message;throw new h(e)}function O(e,t,n,r){if(!n){var o=!1;if(0===t)o=!0,r="No value argument passed to `assert.ok()`";else if(r instanceof Error)throw r;var i=new h({actual:n,expected:!0,message:r,operator:"==",stackStartFn:e});throw i.generatedMessage=o,i}}function R(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];O.apply(void 0,[R,t.length].concat(t))}_.fail=function e(t,n,i,s,a){var c,l=arguments.length;if(0===l)c="Failed";else if(1===l)i=t,t=void 0;else{if(!1===j)j=!0,(r.emitWarning?r.emitWarning:o.warn.bind(o))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094");2===l&&(s="!=")}if(i instanceof Error)throw i;var f={actual:t,expected:n,operator:void 0===s?"fail":s,stackStartFn:a||e};void 0!==i&&(f.message=i);var p=new h(f);throw c&&(p.message=c,p.generatedMessage=!0),p},_.AssertionError=h,_.ok=R,_.equal=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");t!=n&&A({actual:t,expected:n,message:r,operator:"==",stackStartFn:e})},_.notEqual=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");t==n&&A({actual:t,expected:n,message:r,operator:"!=",stackStartFn:e})},_.deepEqual=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");void 0===s&&w(),s(t,n)||A({actual:t,expected:n,message:r,operator:"deepEqual",stackStartFn:e})},_.notDeepEqual=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");void 0===s&&w(),s(t,n)&&A({actual:t,expected:n,message:r,operator:"notDeepEqual",stackStartFn:e})},_.deepStrictEqual=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");void 0===s&&w(),a(t,n)||A({actual:t,expected:n,message:r,operator:"deepStrictEqual",stackStartFn:e})},_.notDeepStrictEqual=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");void 0===s&&w(),a(t,n)&&A({actual:t,expected:n,message:r,operator:"notDeepStrictEqual",stackStartFn:e})},_.strictEqual=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");E(t,n)||A({actual:t,expected:n,message:r,operator:"strictEqual",stackStartFn:e})},_.notStrictEqual=function e(t,n,r){if(arguments.length<2)throw new d("actual","expected");E(t,n)&&A({actual:t,expected:n,message:r,operator:"notStrictEqual",stackStartFn:e})};var S=function e(t,n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n.forEach((function(e){e in t&&(void 0!==r&&"string"==typeof r[e]&&b(t[e])&&t[e].test(r[e])?o[e]=r[e]:o[e]=t[e])}))};function C(e,t,n,r,o,i){if(!(n in e)||!a(e[n],t[n])){if(!r){var s=new S(e,o),c=new S(t,o,e),l=new h({actual:s,expected:c,operator:"deepStrictEqual",stackStartFn:i});throw l.actual=e,l.expected=t,l.operator=i.name,l}A({actual:e,expected:t,message:r,operator:i.name,stackStartFn:i})}}function T(e,t,n,r){if("function"!=typeof t){if(b(t))return t.test(e);if(2===arguments.length)throw new u("expected",["Function","RegExp"],t);if("object"!==i(e)||null===e){var o=new h({actual:e,expected:t,message:n,operator:"deepStrictEqual",stackStartFn:r});throw o.operator=r.name,o}var a=Object.keys(t);if(t instanceof Error)a.push("name","message");else if(0===a.length)throw new f("error",t,"may not be an empty object");return void 0===s&&w(),a.forEach((function(o){"string"==typeof e[o]&&b(t[o])&&t[o].test(e[o])||C(e,t,o,n,a,r)})),!0}return void 0!==t.prototype&&e instanceof t||!Error.isPrototypeOf(t)&&!0===t.call({},e)}function M(e){if("function"!=typeof e)throw new u("fn","Function",e);try{e()}catch(e){return e}return x}function $(e){return y(e)||null!==e&&"object"===i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function k(e){return Promise.resolve().then((function(){var t;if("function"==typeof e){if(!$(t=e()))throw new p("instance of Promise","promiseFn",t)}else{if(!$(e))throw new u("promiseFn",["Function","Promise"],e);t=e}return Promise.resolve().then((function(){return t})).then((function(){return x})).catch((function(e){return e}))}))}function I(e,t,n,r){if("string"==typeof n){if(4===arguments.length)throw new u("error",["Object","Error","Function","RegExp"],n);if("object"===i(t)&&null!==t){if(t.message===n)throw new l("error/message",'The error message "'.concat(t.message,'" is identical to the message.'))}else if(t===n)throw new l("error/message",'The error "'.concat(t,'" is identical to the message.'));r=n,n=void 0}else if(null!=n&&"object"!==i(n)&&"function"!=typeof n)throw new u("error",["Object","Error","Function","RegExp"],n);if(t===x){var o="";n&&n.name&&(o+=" (".concat(n.name,")")),o+=r?": ".concat(r):".";var s="rejects"===e.name?"rejection":"exception";A({actual:void 0,expected:n,operator:e.name,message:"Missing expected ".concat(s).concat(o),stackStartFn:e})}if(n&&!T(t,n,r,e))throw t}function N(e,t,n,r){if(t!==x){if("string"==typeof n&&(r=n,n=void 0),!n||T(t,n)){var o=r?": ".concat(r):".",i="doesNotReject"===e.name?"rejection":"exception";A({actual:t,expected:n,operator:e.name,message:"Got unwanted ".concat(i).concat(o,"\n")+'Actual message: "'.concat(t&&t.message,'"'),stackStartFn:e})}throw t}}function P(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];O.apply(void 0,[P,t.length].concat(t))}_.throws=function e(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];I.apply(void 0,[e,M(t)].concat(r))},_.rejects=function e(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return k(t).then((function(t){return I.apply(void 0,[e,t].concat(r))}))},_.doesNotThrow=function e(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];N.apply(void 0,[e,M(t)].concat(r))},_.doesNotReject=function e(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return k(t).then((function(t){return N.apply(void 0,[e,t].concat(r))}))},_.ifError=function e(t){if(null!=t){var n="ifError got unwanted exception: ";"object"===i(t)&&"string"==typeof t.message?0===t.message.length&&t.constructor?n+=t.constructor.name:n+=t.message:n+=g(t);var r=new h({actual:t,expected:null,operator:"ifError",message:n,stackStartFn:e}),o=t.stack;if("string"==typeof o){var s=o.split("\n");s.shift();for(var a=r.stack.split("\n"),c=0;c<s.length;c++){var l=a.indexOf(s[c]);if(-1!==l){a=a.slice(0,l);break}}r.stack="".concat(a.join("\n"),"\n").concat(s.join("\n"))}throw r}},_.strict=v(P,_,{equal:_.strictEqual,deepEqual:_.deepStrictEqual,notEqual:_.notStrictEqual,notDeepEqual:_.notDeepStrictEqual}),_.strict.strict=_.strict},"./node_modules/assert/build/internal/assert/assertion_error.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js");function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?a(e):t}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function c(e){var t="function"==typeof Map?new Map:void 0;return c=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return u(e,arguments,p(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),f(r,e)},c(e)}function u(e,t,n){return u=function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&f(o,n.prototype),o},u.apply(null,arguments)}function f(e,t){return f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},f(e,t)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}var h=n("./node_modules/util/util.js").inspect,g=n("./node_modules/assert/build/internal/errors.js").codes.ERR_INVALID_ARG_TYPE;function m(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-t.length,n)===t}var y="",b="",v="",E="",w={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function j(e){var t=Object.keys(e),n=Object.create(Object.getPrototypeOf(e));return t.forEach((function(t){n[t]=e[t]})),Object.defineProperty(n,"message",{value:e.message}),n}function _(e){return h(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}function x(e,t,n){var o="",i="",s=0,a="",c=!1,l=_(e),u=l.split("\n"),f=_(t).split("\n"),p=0,h="";if("strictEqual"===n&&"object"===d(e)&&"object"===d(t)&&null!==e&&null!==t&&(n="strictEqualObject"),1===u.length&&1===f.length&&u[0]!==f[0]){var g=u[0].length+f[0].length;if(g<=10){if(!("object"===d(e)&&null!==e||"object"===d(t)&&null!==t||0===e&&0===t))return"".concat(w[n],"\n\n")+"".concat(u[0]," !== ").concat(f[0],"\n")}else if("strictEqualObject"!==n&&g<(r.stderr&&r.stderr.isTTY?r.stderr.columns:80)){for(;u[0][p]===f[0][p];)p++;p>2&&(h="\n  ".concat(function(e,t){if(t=Math.floor(t),0==e.length||0==t)return"";var n=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+e.substring(0,n-e.length)}(" ",p),"^"),p=0)}}for(var j=u[u.length-1],x=f[f.length-1];j===x&&(p++<2?a="\n  ".concat(j).concat(a):o=j,u.pop(),f.pop(),0!==u.length&&0!==f.length);)j=u[u.length-1],x=f[f.length-1];var A=Math.max(u.length,f.length);if(0===A){var O=l.split("\n");if(O.length>30)for(O[26]="".concat(y,"...").concat(E);O.length>27;)O.pop();return"".concat(w.notIdentical,"\n\n").concat(O.join("\n"),"\n")}p>3&&(a="\n".concat(y,"...").concat(E).concat(a),c=!0),""!==o&&(a="\n  ".concat(o).concat(a),o="");var R=0,S=w[n]+"\n".concat(b,"+ actual").concat(E," ").concat(v,"- expected").concat(E),C=" ".concat(y,"...").concat(E," Lines skipped");for(p=0;p<A;p++){var T=p-s;if(u.length<p+1)T>1&&p>2&&(T>4?(i+="\n".concat(y,"...").concat(E),c=!0):T>3&&(i+="\n  ".concat(f[p-2]),R++),i+="\n  ".concat(f[p-1]),R++),s=p,o+="\n".concat(v,"-").concat(E," ").concat(f[p]),R++;else if(f.length<p+1)T>1&&p>2&&(T>4?(i+="\n".concat(y,"...").concat(E),c=!0):T>3&&(i+="\n  ".concat(u[p-2]),R++),i+="\n  ".concat(u[p-1]),R++),s=p,i+="\n".concat(b,"+").concat(E," ").concat(u[p]),R++;else{var M=f[p],$=u[p],k=$!==M&&(!m($,",")||$.slice(0,-1)!==M);k&&m(M,",")&&M.slice(0,-1)===$&&(k=!1,$+=","),k?(T>1&&p>2&&(T>4?(i+="\n".concat(y,"...").concat(E),c=!0):T>3&&(i+="\n  ".concat(u[p-2]),R++),i+="\n  ".concat(u[p-1]),R++),s=p,i+="\n".concat(b,"+").concat(E," ").concat($),o+="\n".concat(v,"-").concat(E," ").concat(M),R+=2):(i+=o,o="",1!==T&&0!==p||(i+="\n  ".concat($),R++))}if(R>20&&p<A-2)return"".concat(S).concat(C,"\n").concat(i,"\n").concat(y,"...").concat(E).concat(o,"\n")+"".concat(y,"...").concat(E)}return"".concat(S).concat(c?C:"","\n").concat(i).concat(o).concat(a).concat(h)}var A=function(e){function t(e){var n;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),"object"!==d(e)||null===e)throw new g("options","Object",e);var o=e.message,i=e.operator,c=e.stackStartFn,l=e.actual,u=e.expected,f=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=o)n=s(this,p(t).call(this,String(o)));else if(r.stderr&&r.stderr.isTTY&&(r.stderr&&r.stderr.getColorDepth&&1!==r.stderr.getColorDepth()?(y="[34m",b="[32m",E="[39m",v="[31m"):(y="",b="",E="",v="")),"object"===d(l)&&null!==l&&"object"===d(u)&&null!==u&&"stack"in l&&l instanceof Error&&"stack"in u&&u instanceof Error&&(l=j(l),u=j(u)),"deepStrictEqual"===i||"strictEqual"===i)n=s(this,p(t).call(this,x(l,u,i)));else if("notDeepStrictEqual"===i||"notStrictEqual"===i){var h=w[i],m=_(l).split("\n");if("notStrictEqual"===i&&"object"===d(l)&&null!==l&&(h=w.notStrictEqualObject),m.length>30)for(m[26]="".concat(y,"...").concat(E);m.length>27;)m.pop();n=1===m.length?s(this,p(t).call(this,"".concat(h," ").concat(m[0]))):s(this,p(t).call(this,"".concat(h,"\n\n").concat(m.join("\n"),"\n")))}else{var A=_(l),O="",R=w[i];"notDeepEqual"===i||"notEqual"===i?(A="".concat(w[i],"\n\n").concat(A)).length>1024&&(A="".concat(A.slice(0,1021),"...")):(O="".concat(_(u)),A.length>512&&(A="".concat(A.slice(0,509),"...")),O.length>512&&(O="".concat(O.slice(0,509),"...")),"deepEqual"===i||"equal"===i?A="".concat(R,"\n\n").concat(A,"\n\nshould equal\n\n"):O=" ".concat(i," ").concat(O)),n=s(this,p(t).call(this,"".concat(A).concat(O)))}return Error.stackTraceLimit=f,n.generatedMessage=!o,Object.defineProperty(a(n),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),n.code="ERR_ASSERTION",n.actual=l,n.expected=u,n.operator=i,Error.captureStackTrace&&Error.captureStackTrace(a(n),c),n.stack,n.name="AssertionError",s(n)}var n,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),n=t,c=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:h.custom,value:function(e,t){return h(this,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},t,{customInspect:!1,depth:0}))}}],c&&i(n.prototype,c),t}(c(Error));e.exports=A},"./node_modules/assert/build/internal/errors.js":(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function i(e){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},i(e)}function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}var a,c,l={};function u(e,t,n){n||(n=Error);var r=function(n){function r(n,s,a){var c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),c=o(this,i(r).call(this,function(e,n,r){return"string"==typeof t?t:t(e,n,r)}(n,s,a))),c.code=e,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(r,n),r}(n);l[e]=r}function f(e,t){if(Array.isArray(e)){var n=e.length;return e=e.map((function(e){return String(e)})),n>2?"one of ".concat(t," ").concat(e.slice(0,n-1).join(", "),", or ")+e[n-1]:2===n?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}u("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),u("ERR_INVALID_ARG_TYPE",(function(e,t,o){var i,s,l;if(void 0===a&&(a=n("./node_modules/assert/build/assert.js")),a("string"==typeof e,"'name' must be a string"),"string"==typeof t&&(s="not ",t.substr(0,4)===s)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,n){return(void 0===n||n>e.length)&&(n=e.length),e.substring(n-9,n)===t}(e," argument"))l="The ".concat(e," ").concat(i," ").concat(f(t,"type"));else{var u=function(e,t,n){return"number"!=typeof n&&(n=0),!(n+1>e.length)&&-1!==e.indexOf(".",n)}(e)?"property":"argument";l='The "'.concat(e,'" ').concat(u," ").concat(i," ").concat(f(t,"type"))}return l+". Received type ".concat(r(o))}),TypeError),u("ERR_INVALID_ARG_VALUE",(function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===c&&(c=n("./node_modules/util/util.js"));var o=c.inspect(t);return o.length>128&&(o="".concat(o.slice(0,128),"...")),"The argument '".concat(e,"' ").concat(r,". Received ").concat(o)}),TypeError,RangeError),u("ERR_INVALID_RETURN_VALUE",(function(e,t,n){var o;return o=n&&n.constructor&&n.constructor.name?"instance of ".concat(n.constructor.name):"type ".concat(r(n)),"Expected ".concat(e,' to be returned from the "').concat(t,'"')+" function but got ".concat(o,".")}),TypeError),u("ERR_MISSING_ARGS",(function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];void 0===a&&(a=n("./node_modules/assert/build/assert.js")),a(t.length>0,"At least one arg needs to be specified");var o="The ",i=t.length;switch(t=t.map((function(e){return'"'.concat(e,'"')})),i){case 1:o+="".concat(t[0]," argument");break;case 2:o+="".concat(t[0]," and ").concat(t[1]," arguments");break;default:o+=t.slice(0,i-1).join(", "),o+=", and ".concat(t[i-1]," arguments")}return"".concat(o," must be specified")}),TypeError),e.exports.codes=l},"./node_modules/assert/build/internal/util/comparisons.js":(e,t,n)=>{function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}var i=void 0!==/a/g.flags,s=function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t},a=function(e){var t=[];return e.forEach((function(e,n){return t.push([n,e])})),t},c=Object.is?Object.is:n("./node_modules/object-is/index.js"),l=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},u=Number.isNaN?Number.isNaN:n("./node_modules/is-nan/index.js");function f(e){return e.call.bind(e)}var p=f(Object.prototype.hasOwnProperty),d=f(Object.prototype.propertyIsEnumerable),h=f(Object.prototype.toString),g=n("./node_modules/util/util.js").types,m=g.isAnyArrayBuffer,y=g.isArrayBufferView,b=g.isDate,v=g.isMap,E=g.isRegExp,w=g.isSet,j=g.isNativeError,_=g.isBoxedPrimitive,x=g.isNumberObject,A=g.isStringObject,O=g.isBooleanObject,R=g.isBigIntObject,S=g.isSymbolObject,C=g.isFloat32Array,T=g.isFloat64Array;function M(e){if(0===e.length||e.length>10)return!0;for(var t=0;t<e.length;t++){var n=e.charCodeAt(t);if(n<48||n>57)return!0}return 10===e.length&&e>=Math.pow(2,32)}function $(e){return Object.keys(e).filter(M).concat(l(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function k(e,t){if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0}function I(e,t,n,r){if(e===t)return 0!==e||!n||c(e,t);if(n){if("object"!==o(e))return"number"==typeof e&&u(e)&&u(t);if("object"!==o(t)||null===e||null===t)return!1;if(Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(null===e||"object"!==o(e))return(null===t||"object"!==o(t))&&e==t;if(null===t||"object"!==o(t))return!1}var s,a,l,f,p=h(e);if(p!==h(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var d=$(e),g=$(t);return d.length===g.length&&P(e,t,n,r,1,d)}if("[object Object]"===p&&(!v(e)&&v(t)||!w(e)&&w(t)))return!1;if(b(e)){if(!b(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(E(e)){if(!E(t)||(l=e,f=t,!(i?l.source===f.source&&l.flags===f.flags:RegExp.prototype.toString.call(l)===RegExp.prototype.toString.call(f))))return!1}else if(j(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else{if(y(e)){if(n||!C(e)&&!T(e)){if(!function(e,t){return e.byteLength===t.byteLength&&0===k(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))}(e,t))return!1}else if(!function(e,t){if(e.byteLength!==t.byteLength)return!1;for(var n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0}(e,t))return!1;var M=$(e),I=$(t);return M.length===I.length&&P(e,t,n,r,0,M)}if(w(e))return!(!w(t)||e.size!==t.size)&&P(e,t,n,r,2);if(v(e))return!(!v(t)||e.size!==t.size)&&P(e,t,n,r,3);if(m(e)){if(a=t,(s=e).byteLength!==a.byteLength||0!==k(new Uint8Array(s),new Uint8Array(a)))return!1}else if(_(e)&&!function(e,t){return x(e)?x(t)&&c(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):A(e)?A(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):O(e)?O(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):R(e)?R(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):S(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}(e,t))return!1}return P(e,t,n,r,0)}function N(e,t){return t.filter((function(t){return d(e,t)}))}function P(e,t,n,r,o,i){if(5===arguments.length){i=Object.keys(e);var s=Object.keys(t);if(i.length!==s.length)return!1}for(var a=0;a<i.length;a++)if(!p(t,i[a]))return!1;if(n&&5===arguments.length){var c=l(e);if(0!==c.length){var u=0;for(a=0;a<c.length;a++){var f=c[a];if(d(e,f)){if(!d(t,f))return!1;i.push(f),u++}else if(d(t,f))return!1}var h=l(t);if(c.length!==h.length&&N(t,h).length!==u)return!1}else{var g=l(t);if(0!==g.length&&0!==N(t,g).length)return!1}}if(0===i.length&&(0===o||1===o&&0===e.length||0===e.size))return!0;if(void 0===r)r={val1:new Map,val2:new Map,position:0};else{var m=r.val1.get(e);if(void 0!==m){var y=r.val2.get(t);if(void 0!==y)return m===y}r.position++}r.val1.set(e,r.position),r.val2.set(t,r.position);var b=U(e,t,n,i,r,o);return r.val1.delete(e),r.val2.delete(t),b}function L(e,t,n,r){for(var o=s(e),i=0;i<o.length;i++){var a=o[i];if(I(t,a,n,r))return e.delete(a),!0}return!1}function B(e){switch(o(e)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":e=+e;case"number":if(u(e))return!1}return!0}function D(e,t,n){var r=B(n);return null!=r?r:t.has(r)&&!e.has(r)}function F(e,t,n,r,o){var i=B(n);if(null!=i)return i;var s=t.get(i);return!(void 0===s&&!t.has(i)||!I(r,s,!1,o))&&!e.has(i)&&I(r,s,!1,o)}function H(e,t,n,r,o,i){for(var a=s(e),c=0;c<a.length;c++){var l=a[c];if(I(n,l,o,i)&&I(r,t.get(l),o,i))return e.delete(l),!0}return!1}function U(e,t,n,i,c,l){var u=0;if(2===l){if(!function(e,t,n,r){for(var i=null,a=s(e),c=0;c<a.length;c++){var l=a[c];if("object"===o(l)&&null!==l)null===i&&(i=new Set),i.add(l);else if(!t.has(l)){if(n)return!1;if(!D(e,t,l))return!1;null===i&&(i=new Set),i.add(l)}}if(null!==i){for(var u=s(t),f=0;f<u.length;f++){var p=u[f];if("object"===o(p)&&null!==p){if(!L(i,p,n,r))return!1}else if(!n&&!e.has(p)&&!L(i,p,n,r))return!1}return 0===i.size}return!0}(e,t,n,c))return!1}else if(3===l){if(!function(e,t,n,i){for(var s=null,c=a(e),l=0;l<c.length;l++){var u=r(c[l],2),f=u[0],p=u[1];if("object"===o(f)&&null!==f)null===s&&(s=new Set),s.add(f);else{var d=t.get(f);if(void 0===d&&!t.has(f)||!I(p,d,n,i)){if(n)return!1;if(!F(e,t,f,p,i))return!1;null===s&&(s=new Set),s.add(f)}}}if(null!==s){for(var h=a(t),g=0;g<h.length;g++){var m=r(h[g],2),y=(f=m[0],m[1]);if("object"===o(f)&&null!==f){if(!H(s,e,f,y,n,i))return!1}else if(!(n||e.has(f)&&I(e.get(f),y,!1,i)||H(s,e,f,y,!1,i)))return!1}return 0===s.size}return!0}(e,t,n,c))return!1}else if(1===l)for(;u<e.length;u++){if(!p(e,u)){if(p(t,u))return!1;for(var f=Object.keys(e);u<f.length;u++){var d=f[u];if(!p(t,d)||!I(e[d],t[d],n,c))return!1}return f.length===Object.keys(t).length}if(!p(t,u)||!I(e[u],t[u],n,c))return!1}for(u=0;u<i.length;u++){var h=i[u];if(!I(e[h],t[h],n,c))return!1}return!0}e.exports={isDeepEqual:function(e,t){return I(e,t,!1)},isDeepStrictEqual:function(e,t){return I(e,t,!0)}}},"./node_modules/base64-js/index.js":(e,t)=>{t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,i=c(e),s=i[0],a=i[1],l=new o(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),u=0,f=a>0?s-4:s;for(n=0;n<f;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],l[u++]=t>>16&255,l[u++]=t>>8&255,l[u++]=255&t;return 2===a&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,l[u++]=255&t),1===a&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,l[u++]=t>>8&255,l[u++]=255&t),l},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],s=16383,a=0,c=r-o;a<c;a+=s)i.push(l(e,a,a+s>c?c:a+s));return 1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),i.join("")};for(var n=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0;s<64;++s)n[s]=i[s],r[i.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,r){for(var o,i,s=[],a=t;a<r;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},"./node_modules/braces/index.js":(e,t,n)=>{const r=n("./node_modules/braces/lib/stringify.js"),o=n("./node_modules/braces/lib/compile.js"),i=n("./node_modules/braces/lib/expand.js"),s=n("./node_modules/braces/lib/parse.js"),a=(e,t={})=>{let n=[];if(Array.isArray(e))for(let r of e){let e=a.create(r,t);Array.isArray(e)?n.push(...e):n.push(e)}else n=[].concat(a.create(e,t));return t&&!0===t.expand&&!0===t.nodupes&&(n=[...new Set(n)]),n};a.parse=(e,t={})=>s(e,t),a.stringify=(e,t={})=>r("string"==typeof e?a.parse(e,t):e,t),a.compile=(e,t={})=>("string"==typeof e&&(e=a.parse(e,t)),o(e,t)),a.expand=(e,t={})=>{"string"==typeof e&&(e=a.parse(e,t));let n=i(e,t);return!0===t.noempty&&(n=n.filter(Boolean)),!0===t.nodupes&&(n=[...new Set(n)]),n},a.create=(e,t={})=>""===e||e.length<3?[e]:!0!==t.expand?a.compile(e,t):a.expand(e,t),e.exports=a},"./node_modules/braces/lib/compile.js":(e,t,n)=>{const r=n("./node_modules/fill-range/index.js"),o=n("./node_modules/braces/lib/utils.js");e.exports=(e,t={})=>{let n=(e,i={})=>{let s=o.isInvalidBrace(i),a=!0===e.invalid&&!0===t.escapeInvalid,c=!0===s||!0===a,l=!0===t.escapeInvalid?"\\":"",u="";if(!0===e.isOpen)return l+e.value;if(!0===e.isClose)return l+e.value;if("open"===e.type)return c?l+e.value:"(";if("close"===e.type)return c?l+e.value:")";if("comma"===e.type)return"comma"===e.prev.type?"":c?e.value:"|";if(e.value)return e.value;if(e.nodes&&e.ranges>0){let n=o.reduce(e.nodes),i=r(...n,{...t,wrap:!1,toRegex:!0});if(0!==i.length)return n.length>1&&i.length>1?`(${i})`:i}if(e.nodes)for(let t of e.nodes)u+=n(t,e);return u};return n(e)}},"./node_modules/braces/lib/constants.js":e=>{e.exports={MAX_LENGTH:65536,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:" ",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"}},"./node_modules/braces/lib/expand.js":(e,t,n)=>{const r=n("./node_modules/fill-range/index.js"),o=n("./node_modules/braces/lib/stringify.js"),i=n("./node_modules/braces/lib/utils.js"),s=(e="",t="",n=!1)=>{let r=[];if(e=[].concat(e),!(t=[].concat(t)).length)return e;if(!e.length)return n?i.flatten(t).map((e=>`{${e}}`)):t;for(let o of e)if(Array.isArray(o))for(let e of o)r.push(s(e,t,n));else for(let e of t)!0===n&&"string"==typeof e&&(e=`{${e}}`),r.push(Array.isArray(e)?s(o,e,n):o+e);return i.flatten(r)};e.exports=(e,t={})=>{let n=void 0===t.rangeLimit?1e3:t.rangeLimit,a=(e,c={})=>{e.queue=[];let l=c,u=c.queue;for(;"brace"!==l.type&&"root"!==l.type&&l.parent;)l=l.parent,u=l.queue;if(e.invalid||e.dollar)return void u.push(s(u.pop(),o(e,t)));if("brace"===e.type&&!0!==e.invalid&&2===e.nodes.length)return void u.push(s(u.pop(),["{}"]));if(e.nodes&&e.ranges>0){let a=i.reduce(e.nodes);if(i.exceedsLimit(...a,t.step,n))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let c=r(...a,t);return 0===c.length&&(c=o(e,t)),u.push(s(u.pop(),c)),void(e.nodes=[])}let f=i.encloseBrace(e),p=e.queue,d=e;for(;"brace"!==d.type&&"root"!==d.type&&d.parent;)d=d.parent,p=d.queue;for(let t=0;t<e.nodes.length;t++){let n=e.nodes[t];"comma"!==n.type||"brace"!==e.type?"close"!==n.type?n.value&&"open"!==n.type?p.push(s(p.pop(),n.value)):n.nodes&&a(n,e):u.push(s(u.pop(),p,f)):(1===t&&p.push(""),p.push(""))}return p};return i.flatten(a(e))}},"./node_modules/braces/lib/parse.js":(e,t,n)=>{const r=n("./node_modules/braces/lib/stringify.js"),{MAX_LENGTH:o,CHAR_BACKSLASH:i,CHAR_BACKTICK:s,CHAR_COMMA:a,CHAR_DOT:c,CHAR_LEFT_PARENTHESES:l,CHAR_RIGHT_PARENTHESES:u,CHAR_LEFT_CURLY_BRACE:f,CHAR_RIGHT_CURLY_BRACE:p,CHAR_LEFT_SQUARE_BRACKET:d,CHAR_RIGHT_SQUARE_BRACKET:h,CHAR_DOUBLE_QUOTE:g,CHAR_SINGLE_QUOTE:m,CHAR_NO_BREAK_SPACE:y,CHAR_ZERO_WIDTH_NOBREAK_SPACE:b}=n("./node_modules/braces/lib/constants.js");e.exports=(e,t={})=>{if("string"!=typeof e)throw new TypeError("Expected a string");let n=t||{},v="number"==typeof n.maxLength?Math.min(o,n.maxLength):o;if(e.length>v)throw new SyntaxError(`Input length (${e.length}), exceeds max characters (${v})`);let E,w={type:"root",input:e,nodes:[]},j=[w],_=w,x=w,A=0,O=e.length,R=0,S=0;const C=()=>e[R++],T=e=>{if("text"===e.type&&"dot"===x.type&&(x.type="text"),!x||"text"!==x.type||"text"!==e.type)return _.nodes.push(e),e.parent=_,e.prev=x,x=e,e;x.value+=e.value};for(T({type:"bos"});R<O;)if(_=j[j.length-1],E=C(),E!==b&&E!==y)if(E!==i)if(E!==h)if(E!==d)if(E!==l)if(E!==u)if(E!==g&&E!==m&&E!==s)if(E!==f)if(E!==p)if(E===a&&S>0){if(_.ranges>0){_.ranges=0;let e=_.nodes.shift();_.nodes=[e,{type:"text",value:r(_)}]}T({type:"comma",value:E}),_.commas++}else if(E===c&&S>0&&0===_.commas){let e=_.nodes;if(0===S||0===e.length){T({type:"text",value:E});continue}if("dot"===x.type){if(_.range=[],x.value+=E,x.type="range",3!==_.nodes.length&&5!==_.nodes.length){_.invalid=!0,_.ranges=0,x.type="text";continue}_.ranges++,_.args=[];continue}if("range"===x.type){e.pop();let t=e[e.length-1];t.value+=x.value+E,x=t,_.ranges--;continue}T({type:"dot",value:E})}else T({type:"text",value:E});else{if("brace"!==_.type){T({type:"text",value:E});continue}let e="close";_=j.pop(),_.close=!0,T({type:e,value:E}),S--,_=j[j.length-1]}else{S++;let e=x.value&&"$"===x.value.slice(-1)||!0===_.dollar;_=T({type:"brace",open:!0,close:!1,dollar:e,depth:S,commas:0,ranges:0,nodes:[]}),j.push(_),T({type:"open",value:E})}else{let e,n=E;for(!0!==t.keepQuotes&&(E="");R<O&&(e=C());)if(e!==i){if(e===n){!0===t.keepQuotes&&(E+=e);break}E+=e}else E+=e+C();T({type:"text",value:E})}else{if("paren"!==_.type){T({type:"text",value:E});continue}_=j.pop(),T({type:"text",value:E}),_=j[j.length-1]}else _=T({type:"paren",nodes:[]}),j.push(_),T({type:"text",value:E});else{let e;for(A++;R<O&&(e=C());)if(E+=e,e!==d)if(e!==i){if(e===h&&(A--,0===A))break}else E+=C();else A++;T({type:"text",value:E})}else T({type:"text",value:"\\"+E});else T({type:"text",value:(t.keepEscaping?E:"")+C()});do{if(_=j.pop(),"root"!==_.type){_.nodes.forEach((e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)}));let e=j[j.length-1],t=e.nodes.indexOf(_);e.nodes.splice(t,1,..._.nodes)}}while(j.length>0);return T({type:"eos"}),w}},"./node_modules/braces/lib/stringify.js":(e,t,n)=>{const r=n("./node_modules/braces/lib/utils.js");e.exports=(e,t={})=>{let n=(e,o={})=>{let i=t.escapeInvalid&&r.isInvalidBrace(o),s=!0===e.invalid&&!0===t.escapeInvalid,a="";if(e.value)return(i||s)&&r.isOpenOrClose(e)?"\\"+e.value:e.value;if(e.value)return e.value;if(e.nodes)for(let t of e.nodes)a+=n(t);return a};return n(e)}},"./node_modules/braces/lib/utils.js":(e,t)=>{t.isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),t.find=(e,t)=>e.nodes.find((e=>e.type===t)),t.exceedsLimit=(e,n,r=1,o)=>!1!==o&&!(!t.isInteger(e)||!t.isInteger(n))&&(Number(n)-Number(e))/Number(r)>=o,t.escapeNode=(e,t=0,n)=>{let r=e.nodes[t];r&&(n&&r.type===n||"open"===r.type||"close"===r.type)&&!0!==r.escaped&&(r.value="\\"+r.value,r.escaped=!0)},t.encloseBrace=e=>"brace"===e.type&&e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0),t.isInvalidBrace=e=>!("brace"!==e.type||!0!==e.invalid&&!e.dollar&&(e.commas>>0+e.ranges>>0!=0&&!0===e.open&&!0===e.close||(e.invalid=!0,0))),t.isOpenOrClose=e=>"open"===e.type||"close"===e.type||!0===e.open||!0===e.close,t.reduce=e=>e.reduce(((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e)),[]),t.flatten=(...e)=>{const t=[],n=e=>{for(let r=0;r<e.length;r++){let o=e[r];Array.isArray(o)?n(o,t):void 0!==o&&t.push(o)}return t};return n(e),t}},"./node_modules/buffer/index.js":(e,t,n)=>{var r=n("./node_modules/console-browserify/index.js");const o=n("./node_modules/base64-js/index.js"),i=n("./node_modules/ieee754/index.js"),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=l,t.SlowBuffer=function(e){return+e!=e&&(e=0),l.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function c(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,l.prototype),t}function l(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return p(e)}return u(e,t,n)}function u(e,t,n){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!l.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|m(e,t);let r=c(n);const o=r.write(e,t);return o!==n&&(r=r.slice(0,o)),r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer))return h(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return h(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return l.from(r,t,n);const o=function(e){if(l.isBuffer(e)){const t=0|g(e.length),n=c(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||Y(e.length)?c(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function p(e){return f(e),c(e<0?0:0|g(e))}function d(e){const t=e.length<0?0:0|g(e.length),n=c(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function h(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,l.prototype),r}function g(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function m(e,t){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let o=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return K(e).length;default:if(o)return r?-1:V(e).length;t=(""+t).toLowerCase(),o=!0}}function y(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return M(this,t,n);case"utf8":case"utf-8":return R(this,t,n);case"ascii":return C(this,t,n);case"latin1":case"binary":return T(this,t,n);case"base64":return O(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return $(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function b(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Y(n=+n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=l.from(t,r)),l.isBuffer(t))return 0===t.length?-1:E(e,t,n,r,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):E(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function E(e,t,n,r,o){let i,s=1,a=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,n/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){let r=-1;for(i=n;i<a;i++)if(l(e,i)===l(t,-1===r?0:i-r)){if(-1===r&&(r=i),i-r+1===c)return r*s}else-1!==r&&(i-=i-r),r=-1}else for(n+c>a&&(n=a-c),i=n;i>=0;i--){let n=!0;for(let r=0;r<c;r++)if(l(e,i+r)!==l(t,r)){n=!1;break}if(n)return i}return-1}function w(e,t,n,r){n=Number(n)||0;const o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;const i=t.length;let s;for(r>i/2&&(r=i/2),s=0;s<r;++s){const r=parseInt(t.substr(2*s,2),16);if(Y(r))return s;e[n+s]=r}return s}function j(e,t,n,r){return Q(V(t,e.length-n),e,n,r)}function _(e,t,n,r){return Q(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function x(e,t,n,r){return Q(K(t),e,n,r)}function A(e,t,n,r){return Q(function(e,t){let n,r,o;const i=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function O(e,t,n){return 0===t&&n===e.length?o.fromByteArray(e):o.fromByteArray(e.slice(t,n))}function R(e,t,n){n=Math.min(e.length,n);const r=[];let o=t;for(;o<n;){const t=e[o];let i=null,s=t>239?4:t>223?3:t>191?2:1;if(o+s<=n){let n,r,a,c;switch(s){case 1:t<128&&(i=t);break;case 2:n=e[o+1],128==(192&n)&&(c=(31&t)<<6|63&n,c>127&&(i=c));break;case 3:n=e[o+1],r=e[o+2],128==(192&n)&&128==(192&r)&&(c=(15&t)<<12|(63&n)<<6|63&r,c>2047&&(c<55296||c>57343)&&(i=c));break;case 4:n=e[o+1],r=e[o+2],a=e[o+3],128==(192&n)&&128==(192&r)&&128==(192&a)&&(c=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&a,c>65535&&c<1114112&&(i=c))}}null===i?(i=65533,s=1):i>65535&&(i-=65536,r.push(i>>>10&1023|55296),i=56320|1023&i),r.push(i),o+=s}return function(e){const t=e.length;if(t<=S)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=S));return n}(r)}t.kMaxLength=a,l.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||void 0===r||"function"!=typeof r.error||r.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,t,n){return u(e,t,n)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,t,n){return function(e,t,n){return f(e),e<=0?c(e):void 0!==t?"string"==typeof n?c(e).fill(t,n):c(e).fill(t):c(e)}(e,t,n)},l.allocUnsafe=function(e){return p(e)},l.allocUnsafeSlow=function(e){return p(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,t){if(X(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=l.from(t,t.offset,t.byteLength)),!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=l.allocUnsafe(t);let o=0;for(n=0;n<e.length;++n){let t=e[n];if(X(t,Uint8Array))o+t.length>r.length?(l.isBuffer(t)||(t=l.from(t)),t.copy(r,o)):Uint8Array.prototype.set.call(r,t,o);else{if(!l.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,o)}o+=t.length}return r},l.byteLength=m,l.prototype._isBuffer=!0,l.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)b(this,t,t+1);return this},l.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},l.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},l.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?R(this,0,e):y.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){let e="";const n=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},s&&(l.prototype[s]=l.prototype.inspect),l.prototype.compare=function(e,t,n,r,o){if(X(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;let i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0);const a=Math.min(i,s),c=this.slice(r,o),u=e.slice(t,n);for(let e=0;e<a;++e)if(c[e]!==u[e]){i=c[e],s=u[e];break}return i<s?-1:s<i?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},l.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let i=!1;for(;;)switch(r){case"hex":return w(this,e,t,n);case"utf8":case"utf-8":return j(this,e,t,n);case"ascii":case"latin1":case"binary":return _(this,e,t,n);case"base64":return x(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function C(e,t,n){let r="";n=Math.min(e.length,n);for(let o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function T(e,t,n){let r="";n=Math.min(e.length,n);for(let o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function M(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let o="";for(let r=t;r<n;++r)o+=Z[e[r]];return o}function $(e,t,n){const r=e.slice(t,n);let o="";for(let e=0;e<r.length-1;e+=2)o+=String.fromCharCode(r[e]+256*r[e+1]);return o}function k(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,n,r,o,i){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function N(e,t,n,r,o){q(t,r,o,e,n,7);let i=Number(t&BigInt(4294967295));e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s,n}function P(e,t,n,r,o){q(t,r,o,e,n,7);let i=Number(t&BigInt(4294967295));e[n+7]=i,i>>=8,e[n+6]=i,i>>=8,e[n+5]=i,i>>=8,e[n+4]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=s,s>>=8,e[n+2]=s,s>>=8,e[n+1]=s,s>>=8,e[n]=s,n+8}function L(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(e,t,n,r,o){return t=+t,n>>>=0,o||L(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,o){return t=+t,n>>>=0,o||L(e,0,n,8),i.write(e,t,n,r,52,8),n+8}l.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,l.prototype),r},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||k(e,t,this.length);let r=this[e],o=1,i=0;for(;++i<t&&(o*=256);)r+=this[e+i]*o;return r},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||k(e,t,this.length);let r=this[e+--t],o=1;for(;t>0&&(o*=256);)r+=this[e+--t]*o;return r},l.prototype.readUint8=l.prototype.readUInt8=function(e,t){return e>>>=0,t||k(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,t){return e>>>=0,t||k(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,t){return e>>>=0,t||k(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,t){return e>>>=0,t||k(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,t){return e>>>=0,t||k(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readBigUInt64LE=J((function(e){W(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,o=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(o)<<BigInt(32))})),l.prototype.readBigUInt64BE=J((function(e){W(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],o=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(o)})),l.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||k(e,t,this.length);let r=this[e],o=1,i=0;for(;++i<t&&(o*=256);)r+=this[e+i]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*t)),r},l.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||k(e,t,this.length);let r=t,o=1,i=this[e+--r];for(;r>0&&(o*=256);)i+=this[e+--r]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*t)),i},l.prototype.readInt8=function(e,t){return e>>>=0,t||k(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){e>>>=0,t||k(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){e>>>=0,t||k(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return e>>>=0,t||k(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return e>>>=0,t||k(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readBigInt64LE=J((function(e){W(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),l.prototype.readBigInt64BE=J((function(e){W(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),l.prototype.readFloatLE=function(e,t){return e>>>=0,t||k(e,4,this.length),i.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return e>>>=0,t||k(e,4,this.length),i.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return e>>>=0,t||k(e,8,this.length),i.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return e>>>=0,t||k(e,8,this.length),i.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||I(this,e,t,n,Math.pow(2,8*n)-1,0);let o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||I(this,e,t,n,Math.pow(2,8*n)-1,0);let o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,1,255,0),this[t]=255&e,t+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigUInt64LE=J((function(e,t=0){return N(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeBigUInt64BE=J((function(e,t=0){return P(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);I(this,e,t,n,r-1,-r)}let o=0,i=1,s=0;for(this[t]=255&e;++o<n&&(i*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+n},l.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);I(this,e,t,n,r-1,-r)}let o=n-1,i=1,s=0;for(this[t+o]=255&e;--o>=0&&(i*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigInt64LE=J((function(e,t=0){return N(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeBigInt64BE=J((function(e,t=0){return P(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeFloatLE=function(e,t,n){return B(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return B(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,r){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const o=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),o},l.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!l.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{const i=l.isBuffer(e)?e:l.from(e,r),s=i.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<n-t;++o)this[o+t]=i[o%s]}return this};const F={};function H(e,t,n){F[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function U(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function q(e,t,n,r,o,i){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let o;throw o=i>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(i+1)}${r}`:`>= -(2${r} ** ${8*(i+1)-1}${r}) and < 2 ** ${8*(i+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new F.ERR_OUT_OF_RANGE("value",o,e)}!function(e,t,n){W(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||G(t,e.length-(n+1))}(r,o,i)}function W(e,t){if("number"!=typeof e)throw new F.ERR_INVALID_ARG_TYPE(t,"number",e)}function G(e,t,n){if(Math.floor(e)!==e)throw W(e,n),new F.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}H("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),H("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),H("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,o=n;return Number.isInteger(n)&&Math.abs(n)>2**32?o=U(String(n)):"bigint"==typeof n&&(o=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(o=U(o)),o+="n"),r+=` It must be ${t}. Received ${o}`,r}),RangeError);const z=/[^+/0-9A-Za-z-_]/g;function V(e,t){let n;t=t||1/0;const r=e.length;let o=null;const i=[];for(let s=0;s<r;++s){if(n=e.charCodeAt(s),n>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function K(e){return o.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Q(e,t,n,r){let o;for(o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Y(e){return e!=e}const Z=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let o=0;o<16;++o)t[r+o]=e[n]+e[o]}return t}();function J(e){return"undefined"==typeof BigInt?ee:e}function ee(){throw new Error("BigInt not supported")}},"./node_modules/call-bind/callBound.js":(e,t,n)=>{var r=n("./node_modules/get-intrinsic/index.js"),o=n("./node_modules/call-bind/index.js"),i=o(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?o(n):n}},"./node_modules/call-bind/index.js":(e,t,n)=>{var r=n("./node_modules/function-bind/index.js"),o=n("./node_modules/get-intrinsic/index.js"),i=o("%Function.prototype.apply%"),s=o("%Function.prototype.call%"),a=o("%Reflect.apply%",!0)||r.call(s,i),c=o("%Object.getOwnPropertyDescriptor%",!0),l=o("%Object.defineProperty%",!0),u=o("%Math.max%");if(l)try{l({},"a",{value:1})}catch(e){l=null}e.exports=function(e){var t=a(r,s,arguments);c&&l&&(c(t,"length").configurable&&l(t,"length",{value:1+u(0,e.length-(arguments.length-1))}));return t};var f=function(){return a(r,i,arguments)};l?l(e.exports,"apply",{value:f}):e.exports.apply=f},"./node_modules/chalk/source/index.js":(e,t,n)=>{const r=n("./node_modules/ansi-styles/index.js"),{stdout:o,stderr:i}=n("./node_modules/supports-color/browser.js"),{stringReplaceAll:s,stringEncaseCRLFWithFirstIndex:a}=n("./node_modules/chalk/source/util.js"),{isArray:c}=Array,l=["ansi","ansi","ansi256","ansi16m"],u=Object.create(null);class f{constructor(e){return p(e)}}const p=e=>{const t={};return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const n=o?o.level:0;e.level=void 0===t.level?n:t.level})(t,e),t.template=(...e)=>E(t.template,...e),Object.setPrototypeOf(t,d.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},t.template.Instance=f,t.template};function d(e){return p(e)}for(const[e,t]of Object.entries(r))u[e]={get(){const n=y(this,m(t.open,t.close,this._styler),this._isEmpty);return Object.defineProperty(this,e,{value:n}),n}};u.visible={get(){const e=y(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:e}),e}};const h=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(const e of h)u[e]={get(){const{level:t}=this;return function(...n){const o=m(r.color[l[t]][e](...n),r.color.close,this._styler);return y(this,o,this._isEmpty)}}};for(const e of h)u["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...n){const o=m(r.bgColor[l[t]][e](...n),r.bgColor.close,this._styler);return y(this,o,this._isEmpty)}}};const g=Object.defineProperties((()=>{}),{...u,level:{enumerable:!0,get(){return this._generator.level},set(e){this._generator.level=e}}}),m=(e,t,n)=>{let r,o;return void 0===n?(r=e,o=t):(r=n.openAll+e,o=t+n.closeAll),{open:e,close:t,openAll:r,closeAll:o,parent:n}},y=(e,t,n)=>{const r=(...e)=>c(e[0])&&c(e[0].raw)?b(r,E(r,...e)):b(r,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(r,g),r._generator=e,r._styler=t,r._isEmpty=n,r},b=(e,t)=>{if(e.level<=0||!t)return e._isEmpty?"":t;let n=e._styler;if(void 0===n)return t;const{openAll:r,closeAll:o}=n;if(-1!==t.indexOf(""))for(;void 0!==n;)t=s(t,n.close,n.open),n=n.parent;const i=t.indexOf("\n");return-1!==i&&(t=a(t,o,r,i)),r+t+o};let v;const E=(e,...t)=>{const[r]=t;if(!c(r)||!c(r.raw))return t.join(" ");const o=t.slice(1),i=[r.raw[0]];for(let e=1;e<r.length;e++)i.push(String(o[e-1]).replace(/[{}\\]/g,"\\$&"),String(r.raw[e]));return void 0===v&&(v=n("./node_modules/chalk/source/templates.js")),v(e,i.join(""))};Object.defineProperties(d.prototype,u);const w=d();w.supportsColor=o,w.stderr=d({level:i?i.level:0}),w.stderr.supportsColor=i,e.exports=w},"./node_modules/chalk/source/templates.js":e=>{const t=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,n=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,r=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,o=/\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi,i=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function s(e){const t="u"===e[0],n="{"===e[1];return t&&!n&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):t&&n?String.fromCodePoint(parseInt(e.slice(2,-1),16)):i.get(e)||e}function a(e,t){const n=[],i=t.trim().split(/\s*,\s*/g);let a;for(const t of i){const i=Number(t);if(Number.isNaN(i)){if(!(a=t.match(r)))throw new Error(`Invalid Chalk template style argument: ${t} (in style '${e}')`);n.push(a[2].replace(o,((e,t,n)=>t?s(t):n)))}else n.push(i)}return n}function c(e){n.lastIndex=0;const t=[];let r;for(;null!==(r=n.exec(e));){const e=r[1];if(r[2]){const n=a(e,r[2]);t.push([e].concat(n))}else t.push([e])}return t}function l(e,t){const n={};for(const e of t)for(const t of e.styles)n[t[0]]=e.inverse?null:t.slice(1);let r=e;for(const[e,t]of Object.entries(n))if(Array.isArray(t)){if(!(e in r))throw new Error(`Unknown Chalk style: ${e}`);r=t.length>0?r[e](...t):r[e]}return r}e.exports=(e,n)=>{const r=[],o=[];let i=[];if(n.replace(t,((t,n,a,u,f,p)=>{if(n)i.push(s(n));else if(u){const t=i.join("");i=[],o.push(0===r.length?t:l(e,r)(t)),r.push({inverse:a,styles:c(u)})}else if(f){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");o.push(l(e,r)(i.join(""))),i=[],r.pop()}else i.push(p)})),o.push(i.join("")),r.length>0){const e=`Chalk template literal is missing ${r.length} closing bracket${1===r.length?"":"s"} (\`}\`)`;throw new Error(e)}return o.join("")}},"./node_modules/chalk/source/util.js":e=>{e.exports={stringReplaceAll:(e,t,n)=>{let r=e.indexOf(t);if(-1===r)return e;const o=t.length;let i=0,s="";do{s+=e.substr(i,r-i)+t+n,i=r+o,r=e.indexOf(t,i)}while(-1!==r);return s+=e.substr(i),s},stringEncaseCRLFWithFirstIndex:(e,t,n,r)=>{let o=0,i="";do{const s="\r"===e[r-1];i+=e.substr(o,(s?r-1:r)-o)+t+(s?"\r\n":"\n")+n,o=r+1,r=e.indexOf("\n",o)}while(-1!==r);return i+=e.substr(o),i}}},"./node_modules/color-convert/conversions.js":(e,t,n)=>{const r=n("./node_modules/color-name/index.js"),o={};for(const e of Object.keys(r))o[r[e]]=e;const i={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};e.exports=i;for(const e of Object.keys(i)){if(!("channels"in i[e]))throw new Error("missing channels property: "+e);if(!("labels"in i[e]))throw new Error("missing channel labels property: "+e);if(i[e].labels.length!==i[e].channels)throw new Error("channel and label counts mismatch: "+e);const{channels:t,labels:n}=i[e];delete i[e].channels,delete i[e].labels,Object.defineProperty(i[e],"channels",{value:t}),Object.defineProperty(i[e],"labels",{value:n})}i.rgb.hsl=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.min(t,n,r),i=Math.max(t,n,r),s=i-o;let a,c;i===o?a=0:t===i?a=(n-r)/s:n===i?a=2+(r-t)/s:r===i&&(a=4+(t-n)/s),a=Math.min(60*a,360),a<0&&(a+=360);const l=(o+i)/2;return c=i===o?0:l<=.5?s/(i+o):s/(2-i-o),[a,100*c,100*l]},i.rgb.hsv=function(e){let t,n,r,o,i;const s=e[0]/255,a=e[1]/255,c=e[2]/255,l=Math.max(s,a,c),u=l-Math.min(s,a,c),f=function(e){return(l-e)/6/u+.5};return 0===u?(o=0,i=0):(i=u/l,t=f(s),n=f(a),r=f(c),s===l?o=r-n:a===l?o=1/3+t-r:c===l&&(o=2/3+n-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*i,100*l]},i.rgb.hwb=function(e){const t=e[0],n=e[1];let r=e[2];const o=i.rgb.hsl(e)[0],s=1/255*Math.min(t,Math.min(n,r));return r=1-1/255*Math.max(t,Math.max(n,r)),[o,100*s,100*r]},i.rgb.cmyk=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.min(1-t,1-n,1-r);return[100*((1-t-o)/(1-o)||0),100*((1-n-o)/(1-o)||0),100*((1-r-o)/(1-o)||0),100*o]},i.rgb.keyword=function(e){const t=o[e];if(t)return t;let n,i=1/0;for(const t of Object.keys(r)){const c=(a=r[t],((s=e)[0]-a[0])**2+(s[1]-a[1])**2+(s[2]-a[2])**2);c<i&&(i=c,n=t)}var s,a;return n},i.keyword.rgb=function(e){return r[e]},i.rgb.xyz=function(e){let t=e[0]/255,n=e[1]/255,r=e[2]/255;return t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,n=n>.04045?((n+.055)/1.055)**2.4:n/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92,[100*(.4124*t+.3576*n+.1805*r),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]},i.rgb.lab=function(e){const t=i.rgb.xyz(e);let n=t[0],r=t[1],o=t[2];return n/=95.047,r/=100,o/=108.883,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,o=o>.008856?o**(1/3):7.787*o+16/116,[116*r-16,500*(n-r),200*(r-o)]},i.hsl.rgb=function(e){const t=e[0]/360,n=e[1]/100,r=e[2]/100;let o,i,s;if(0===n)return s=255*r,[s,s,s];o=r<.5?r*(1+n):r+n-r*n;const a=2*r-o,c=[0,0,0];for(let e=0;e<3;e++)i=t+1/3*-(e-1),i<0&&i++,i>1&&i--,s=6*i<1?a+6*(o-a)*i:2*i<1?o:3*i<2?a+(o-a)*(2/3-i)*6:a,c[e]=255*s;return c},i.hsl.hsv=function(e){const t=e[0];let n=e[1]/100,r=e[2]/100,o=n;const i=Math.max(r,.01);return r*=2,n*=r<=1?r:2-r,o*=i<=1?i:2-i,[t,100*(0===r?2*o/(i+o):2*n/(r+n)),(r+n)/2*100]},i.hsv.rgb=function(e){const t=e[0]/60,n=e[1]/100;let r=e[2]/100;const o=Math.floor(t)%6,i=t-Math.floor(t),s=255*r*(1-n),a=255*r*(1-n*i),c=255*r*(1-n*(1-i));switch(r*=255,o){case 0:return[r,c,s];case 1:return[a,r,s];case 2:return[s,r,c];case 3:return[s,a,r];case 4:return[c,s,r];case 5:return[r,s,a]}},i.hsv.hsl=function(e){const t=e[0],n=e[1]/100,r=e[2]/100,o=Math.max(r,.01);let i,s;s=(2-n)*r;const a=(2-n)*o;return i=n*o,i/=a<=1?a:2-a,i=i||0,s/=2,[t,100*i,100*s]},i.hwb.rgb=function(e){const t=e[0]/360;let n=e[1]/100,r=e[2]/100;const o=n+r;let i;o>1&&(n/=o,r/=o);const s=Math.floor(6*t),a=1-r;i=6*t-s,0!=(1&s)&&(i=1-i);const c=n+i*(a-n);let l,u,f;switch(s){default:case 6:case 0:l=a,u=c,f=n;break;case 1:l=c,u=a,f=n;break;case 2:l=n,u=a,f=c;break;case 3:l=n,u=c,f=a;break;case 4:l=c,u=n,f=a;break;case 5:l=a,u=n,f=c}return[255*l,255*u,255*f]},i.cmyk.rgb=function(e){const t=e[0]/100,n=e[1]/100,r=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o))]},i.xyz.rgb=function(e){const t=e[0]/100,n=e[1]/100,r=e[2]/100;let o,i,s;return o=3.2406*t+-1.5372*n+-.4986*r,i=-.9689*t+1.8758*n+.0415*r,s=.0557*t+-.204*n+1.057*r,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,s=s>.0031308?1.055*s**(1/2.4)-.055:12.92*s,o=Math.min(Math.max(0,o),1),i=Math.min(Math.max(0,i),1),s=Math.min(Math.max(0,s),1),[255*o,255*i,255*s]},i.xyz.lab=function(e){let t=e[0],n=e[1],r=e[2];return t/=95.047,n/=100,r/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,n=n>.008856?n**(1/3):7.787*n+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,[116*n-16,500*(t-n),200*(n-r)]},i.lab.xyz=function(e){let t,n,r;n=(e[0]+16)/116,t=e[1]/500+n,r=n-e[2]/200;const o=n**3,i=t**3,s=r**3;return n=o>.008856?o:(n-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,r=s>.008856?s:(r-16/116)/7.787,t*=95.047,n*=100,r*=108.883,[t,n,r]},i.lab.lch=function(e){const t=e[0],n=e[1],r=e[2];let o;return o=360*Math.atan2(r,n)/2/Math.PI,o<0&&(o+=360),[t,Math.sqrt(n*n+r*r),o]},i.lch.lab=function(e){const t=e[0],n=e[1],r=e[2]/360*2*Math.PI;return[t,n*Math.cos(r),n*Math.sin(r)]},i.rgb.ansi16=function(e,t=null){const[n,r,o]=e;let s=null===t?i.rgb.hsv(e)[2]:t;if(s=Math.round(s/50),0===s)return 30;let a=30+(Math.round(o/255)<<2|Math.round(r/255)<<1|Math.round(n/255));return 2===s&&(a+=60),a},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){const t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)},i.ansi16.rgb=function(e){let t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];const n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},i.ansi256.rgb=function(e){if(e>=232){const t=10*(e-232)+8;return[t,t,t]}let t;return e-=16,[Math.floor(e/36)/5*255,Math.floor((t=e%36)/6)/5*255,t%6/5*255]},i.rgb.hex=function(e){const t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){const t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];let n=t[0];3===t[0].length&&(n=n.split("").map((e=>e+e)).join(""));const r=parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},i.rgb.hcg=function(e){const t=e[0]/255,n=e[1]/255,r=e[2]/255,o=Math.max(Math.max(t,n),r),i=Math.min(Math.min(t,n),r),s=o-i;let a,c;return a=s<1?i/(1-s):0,c=s<=0?0:o===t?(n-r)/s%6:o===n?2+(r-t)/s:4+(t-n)/s,c/=6,c%=1,[360*c,100*s,100*a]},i.hsl.hcg=function(e){const t=e[1]/100,n=e[2]/100,r=n<.5?2*t*n:2*t*(1-n);let o=0;return r<1&&(o=(n-.5*r)/(1-r)),[e[0],100*r,100*o]},i.hsv.hcg=function(e){const t=e[1]/100,n=e[2]/100,r=t*n;let o=0;return r<1&&(o=(n-r)/(1-r)),[e[0],100*r,100*o]},i.hcg.rgb=function(e){const t=e[0]/360,n=e[1]/100,r=e[2]/100;if(0===n)return[255*r,255*r,255*r];const o=[0,0,0],i=t%1*6,s=i%1,a=1-s;let c=0;switch(Math.floor(i)){case 0:o[0]=1,o[1]=s,o[2]=0;break;case 1:o[0]=a,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=s;break;case 3:o[0]=0,o[1]=a,o[2]=1;break;case 4:o[0]=s,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=a}return c=(1-n)*r,[255*(n*o[0]+c),255*(n*o[1]+c),255*(n*o[2]+c)]},i.hcg.hsv=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);let r=0;return n>0&&(r=t/n),[e[0],100*r,100*n]},i.hcg.hsl=function(e){const t=e[1]/100,n=e[2]/100*(1-t)+.5*t;let r=0;return n>0&&n<.5?r=t/(2*n):n>=.5&&n<1&&(r=t/(2*(1-n))),[e[0],100*r,100*n]},i.hcg.hwb=function(e){const t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},i.hwb.hcg=function(e){const t=e[1]/100,n=1-e[2]/100,r=n-t;let o=0;return r<1&&(o=(n-r)/(1-r)),[e[0],100*r,100*o]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=function(e){return[0,0,e[0]]},i.gray.hsv=i.gray.hsl,i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){const t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},"./node_modules/color-convert/index.js":(e,t,n)=>{const r=n("./node_modules/color-convert/conversions.js"),o=n("./node_modules/color-convert/route.js"),i={};Object.keys(r).forEach((e=>{i[e]={},Object.defineProperty(i[e],"channels",{value:r[e].channels}),Object.defineProperty(i[e],"labels",{value:r[e].labels});const t=o(e);Object.keys(t).forEach((n=>{const r=t[n];i[e][n]=function(e){const t=function(...t){const n=t[0];if(null==n)return n;n.length>1&&(t=n);const r=e(t);if("object"==typeof r)for(let e=r.length,t=0;t<e;t++)r[t]=Math.round(r[t]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(r),i[e][n].raw=function(e){const t=function(...t){const n=t[0];return null==n?n:(n.length>1&&(t=n),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(r)}))})),e.exports=i},"./node_modules/color-convert/route.js":(e,t,n)=>{const r=n("./node_modules/color-convert/conversions.js");function o(e){const t=function(){const e={},t=Object.keys(r);for(let n=t.length,r=0;r<n;r++)e[t[r]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;){const e=n.pop(),o=Object.keys(r[e]);for(let r=o.length,i=0;i<r;i++){const r=o[i],s=t[r];-1===s.distance&&(s.distance=t[e].distance+1,s.parent=e,n.unshift(r))}}return t}function i(e,t){return function(n){return t(e(n))}}function s(e,t){const n=[t[e].parent,e];let o=r[t[e].parent][e],s=t[e].parent;for(;t[s].parent;)n.unshift(t[s].parent),o=i(r[t[s].parent][s],o),s=t[s].parent;return o.conversion=n,o}e.exports=function(e){const t=o(e),n={},r=Object.keys(t);for(let e=r.length,o=0;o<e;o++){const e=r[o];null!==t[e].parent&&(n[e]=s(e,t))}return n}},"./node_modules/color-name/index.js":e=>{e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},"./node_modules/console-browserify/index.js":(e,t,n)=>{var r=n("./node_modules/util/util.js"),o=n("./node_modules/assert/build/assert.js");function i(){return(new Date).getTime()}var s,a=Array.prototype.slice,c={};s=void 0!==n.g&&n.g.console?n.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var l=[[function(){},"log"],[function(){s.log.apply(s,arguments)},"info"],[function(){s.log.apply(s,arguments)},"warn"],[function(){s.warn.apply(s,arguments)},"error"],[function(e){c[e]=i()},"time"],[function(e){var t=c[e];if(!t)throw new Error("No such label: "+e);delete c[e];var n=i()-t;s.log(e+": "+n+"ms")},"timeEnd"],[function(){var e=new Error;e.name="Trace",e.message=r.format.apply(null,arguments),s.error(e.stack)},"trace"],[function(e){s.log(r.inspect(e)+"\n")},"dir"],[function(e){if(!e){var t=a.call(arguments,1);o.ok(!1,r.format.apply(null,t))}},"assert"]],u=0;u<l.length;u++){var f=l[u],p=f[0],d=f[1];s[d]||(s[d]=p)}e.exports=s},"./node_modules/define-properties/index.js":(e,t,n)=>{var r=n("./node_modules/object-keys/index.js"),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,s=Array.prototype.concat,a=Object.defineProperty,c=a&&function(){var e={};try{for(var t in a(e,"x",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(e){return!1}}(),l=function(e,t,n,r){var o;(!(t in e)||"function"==typeof(o=r)&&"[object Function]"===i.call(o)&&r())&&(c?a(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},u=function(e,t){var n=arguments.length>2?arguments[2]:{},i=r(t);o&&(i=s.call(i,Object.getOwnPropertySymbols(t)));for(var a=0;a<i.length;a+=1)l(e,i[a],t[i[a]],n[i[a]])};u.supportsDescriptors=!!c,e.exports=u},"./node_modules/diff-sequences/build/index.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,i){u("aLength",e),u("bLength",t),f("isCommon",n),f("foundSubsequence",i);const s=r(0,e,0,t,n);if(0!==s&&i(s,0,0),e!==s||t!==s){const r=s,a=s,c=o(r,e-1,a,t-1,n),u=e-c,f=t-c,p=s+c;e!==p&&t!==p&&l(0,r,u,a,f,!1,[{foundSubsequence:i,isCommon:n}],[0],[0],{aCommonFollowing:0,aCommonPreceding:0,aEndPreceding:0,aStartFollowing:0,bCommonFollowing:0,bCommonPreceding:0,bEndPreceding:0,bStartFollowing:0,nChangeFollowing:0,nChangePreceding:0,nCommonFollowing:0,nCommonPreceding:0}),0!==c&&i(c,u,f)}};const n="diff-sequences",r=(e,t,n,r,o)=>{let i=0;for(;e<t&&n<r&&o(e,n);)e+=1,n+=1,i+=1;return i},o=(e,t,n,r,o)=>{let i=0;for(;e<=t&&n<=r&&o(t,r);)t-=1,r-=1,i+=1;return i},i=(e,t,n,o,i,s,a)=>{let c=0,l=-e,u=s[c],f=u;s[c]+=r(u+1,t,o+u-l+1,n,i);const p=e<a?e:a;for(c+=1,l+=2;c<=p;c+=1,l+=2){if(c!==e&&f<s[c])u=s[c];else if(u=f+1,t<=u)return c-1;f=s[c],s[c]=u+r(u+1,t,o+u-l+1,n,i)}return a},s=(e,t,n,r,i,s,a)=>{let c=0,l=e,u=s[c],f=u;s[c]-=o(t,u-1,n,r+u-l-1,i);const p=e<a?e:a;for(c+=1,l-=2;c<=p;c+=1,l-=2){if(c!==e&&s[c]<f)u=s[c];else if(u=f-1,u<t)return c-1;f=s[c],s[c]=u-o(t,u-1,n,r+u-l-1,i)}return a},a=(e,t,n,i,s,a,c,l,u,f,p)=>{const d=i-t,h=s-i-(n-t),g=-h-(e-1),m=e-1-h;let y=0;const b=e<l?e:l;for(let l=0,v=-e;l<=b;l+=1,v+=2){const b=0===l||l!==e&&y<c[l],E=b?c[l]:y,w=b?E:E+1,j=d+w-v,_=r(w+1,n,j+1,s,a),x=w+_;if(y=c[l],c[l]=x,g<=v&&v<=m){const r=(e-1-(v+h))/2;if(r<=f&&u[r]-1<=x){const r=d+E-(b?v+1:v-1),c=o(t,E,i,r,a),l=E-c+1,u=r-c+1;p.nChangePreceding=e-1,e-1==l+u-t-i?(p.aEndPreceding=t,p.bEndPreceding=i):(p.aEndPreceding=l,p.bEndPreceding=u),p.nCommonPreceding=c,0!==c&&(p.aCommonPreceding=l,p.bCommonPreceding=u),p.nCommonFollowing=_,0!==_&&(p.aCommonFollowing=w+1,p.bCommonFollowing=j+1);const f=x+1,h=j+_+1;return p.nChangeFollowing=e-1,e-1==n+s-f-h?(p.aStartFollowing=n,p.bStartFollowing=s):(p.aStartFollowing=f,p.bStartFollowing=h),!0}}}return!1},c=(e,t,n,i,s,a,c,l,u,f,p)=>{const d=s-n,h=s-i-(n-t),g=h-e,m=h+e;let y=0;const b=e<f?e:f;for(let f=0,v=e;f<=b;f+=1,v-=2){const b=0===f||f!==e&&u[f]<y,E=b?u[f]:y,w=b?E:E-1,j=d+w-v,_=o(t,w-1,i,j-1,a),x=w-_;if(y=u[f],u[f]=x,g<=v&&v<=m){const o=(e+(v-h))/2;if(o<=l&&x-1<=c[o]){const o=j-_;if(p.nChangePreceding=e,e===x+o-t-i?(p.aEndPreceding=t,p.bEndPreceding=i):(p.aEndPreceding=x,p.bEndPreceding=o),p.nCommonPreceding=_,0!==_&&(p.aCommonPreceding=x,p.bCommonPreceding=o),p.nChangeFollowing=e-1,1===e)p.nCommonFollowing=0,p.aStartFollowing=n,p.bStartFollowing=s;else{const t=d+E-(b?v-1:v+1),o=r(E,n,t,s,a);p.nCommonFollowing=o,0!==o&&(p.aCommonFollowing=E,p.bCommonFollowing=t);const i=E+o,c=t+o;e-1==n+s-i-c?(p.aStartFollowing=n,p.bStartFollowing=s):(p.aStartFollowing=i,p.bStartFollowing=c)}return!0}}}return!1},l=(e,t,r,o,u,f,p,d,h,g)=>{if(u-o<r-t){if((f=!f)&&1===p.length){const{foundSubsequence:e,isCommon:t}=p[0];p[1]={foundSubsequence:(t,n,r)=>{e(t,r,n)},isCommon:(e,n)=>t(n,e)}}const e=t,n=r;t=o,r=u,o=e,u=n}const{foundSubsequence:m,isCommon:y}=p[f?1:0];((e,t,r,o,l,u,f,p,d)=>{const h=o-t,g=l-r,m=r-t,y=l-o,b=y-m;let v=m,E=m;if(f[0]=t-1,p[0]=r,b%2==0){const n=(e||b)/2,a=(m+y)/2;for(let e=1;e<=a;e+=1)if(v=i(e,r,l,h,u,f,v),e<n)E=s(e,t,o,g,u,p,E);else if(c(e,t,r,o,l,u,f,v,p,E,d))return}else{const n=((e||b)+1)/2,c=(m+y+1)/2;let w=1;for(v=i(w,r,l,h,u,f,v),w+=1;w<=c;w+=1)if(E=s(w-1,t,o,g,u,p,E),w<n)v=i(w,r,l,h,u,f,v);else if(a(w,t,r,o,l,u,f,v,p,E,d))return}throw new Error(`${n}: no overlap aStart=${t} aEnd=${r} bStart=${o} bEnd=${l}`)})(e,t,r,o,u,y,d,h,g);const{nChangePreceding:b,aEndPreceding:v,bEndPreceding:E,nCommonPreceding:w,aCommonPreceding:j,bCommonPreceding:_,nCommonFollowing:x,aCommonFollowing:A,bCommonFollowing:O,nChangeFollowing:R,aStartFollowing:S,bStartFollowing:C}=g;t<v&&o<E&&l(b,t,v,o,E,f,p,d,h,g),0!==w&&m(w,j,_),0!==x&&m(x,A,O),S<r&&C<u&&l(R,S,r,C,u,f,p,d,h,g)},u=(e,t)=>{if("number"!=typeof t)throw new TypeError(`${n}: ${e} typeof ${typeof t} is not a number`);if(!Number.isSafeInteger(t))throw new RangeError(`${n}: ${e} value ${t} is not a safe integer`);if(t<0)throw new RangeError(`${n}: ${e} value ${t} is a negative integer`)},f=(e,t)=>{const r=typeof t;if("function"!==r)throw new TypeError(`${n}: ${e} typeof ${r} is not a function`)}},"./node_modules/es6-object-assign/index.js":e=>{function t(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var n=Object(e),r=1;r<arguments.length;r++){var o=arguments[r];if(null!=o)for(var i=Object.keys(Object(o)),s=0,a=i.length;s<a;s++){var c=i[s],l=Object.getOwnPropertyDescriptor(o,c);void 0!==l&&l.enumerable&&(n[c]=o[c])}}return n}e.exports={assign:t,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:t})}}},"./node_modules/escape-string-regexp/index.js":e=>{var t=/[|\\{}()[\]^$+*?.]/g;e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(t,"\\$&")}},"./node_modules/expect/build/asymmetricMatchers.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringNotMatching=t.stringNotContaining=t.stringMatching=t.stringContaining=t.objectNotContaining=t.objectContaining=t.notCloseTo=t.closeTo=t.arrayNotContaining=t.arrayContaining=t.anything=t.any=t.AsymmetricMatcher=void 0;var r=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=a(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var s=o?Object.getOwnPropertyDescriptor(e,i):null;s&&(s.get||s.set)?Object.defineProperty(r,i,s):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}(n("./node_modules/jest-matcher-utils/build/index.js")),o=n("./node_modules/expect/build/jasmineUtils.js"),i=n("./node_modules/expect/build/jestMatchersObject.js"),s=n("./node_modules/expect/build/utils.js");function a(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(a=function(e){return e?n:t})(e)}var c="undefined"!=typeof globalThis?globalThis:void 0!==c?c:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),l=c["jest-symbol-do-not-touch"]||c.Symbol;function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const f=Object.freeze({...r,iterableEquality:s.iterableEquality,subsetEquality:s.subsetEquality});class p{constructor(e,t=!1){u(this,"$$typeof",l.for("jest.asymmetricMatcher")),this.sample=e,this.inverse=t}getMatcherContext(){return{...(0,i.getState)(),equals:o.equals,isNot:this.inverse,utils:f}}}t.AsymmetricMatcher=p;class d extends p{constructor(e){if(void 0===e)throw new TypeError("any() expects to be passed a constructor function. Please pass one or use anything() to match any object.");super(e)}asymmetricMatch(e){return this.sample==String?"string"==typeof e||e instanceof String:this.sample==Number?"number"==typeof e||e instanceof Number:this.sample==Function?"function"==typeof e||e instanceof Function:this.sample==Boolean?"boolean"==typeof e||e instanceof Boolean:this.sample==BigInt?"bigint"==typeof e||e instanceof BigInt:this.sample==l?"symbol"==typeof e||e instanceof l:this.sample==Object?"object"==typeof e:e instanceof this.sample}toString(){return"Any"}getExpectedType(){return this.sample==String?"string":this.sample==Number?"number":this.sample==Function?"function":this.sample==Object?"object":this.sample==Boolean?"boolean":(0,o.fnNameFor)(this.sample)}toAsymmetricMatcher(){return"Any<"+(0,o.fnNameFor)(this.sample)+">"}}class h extends p{asymmetricMatch(e){return!(0,o.isUndefined)(e)&&null!==e}toString(){return"Anything"}toAsymmetricMatcher(){return"Anything"}}class g extends p{constructor(e,t=!1){super(e,t)}asymmetricMatch(e){if(!Array.isArray(this.sample))throw new Error(`You must provide an array to ${this.toString()}, not '`+typeof this.sample+"'.");const t=0===this.sample.length||Array.isArray(e)&&this.sample.every((t=>e.some((e=>(0,o.equals)(t,e)))));return this.inverse?!t:t}toString(){return`Array${this.inverse?"Not":""}Containing`}getExpectedType(){return"array"}}class m extends p{constructor(e,t=!1){super(e,t)}asymmetricMatch(e){if("object"!=typeof this.sample)throw new Error(`You must provide an object to ${this.toString()}, not '`+typeof this.sample+"'.");let t=!0;for(const n in this.sample)if(!(0,o.hasProperty)(e,n)||!(0,o.equals)(this.sample[n],e[n])){t=!1;break}return this.inverse?!t:t}toString(){return`Object${this.inverse?"Not":""}Containing`}getExpectedType(){return"object"}}class y extends p{constructor(e,t=!1){if(!(0,o.isA)("String",e))throw new Error("Expected is not a string");super(e,t)}asymmetricMatch(e){const t=(0,o.isA)("String",e)&&e.includes(this.sample);return this.inverse?!t:t}toString(){return`String${this.inverse?"Not":""}Containing`}getExpectedType(){return"string"}}class b extends p{constructor(e,t=!1){if(!(0,o.isA)("String",e)&&!(0,o.isA)("RegExp",e))throw new Error("Expected is not a String or a RegExp");super(new RegExp(e),t)}asymmetricMatch(e){const t=(0,o.isA)("String",e)&&this.sample.test(e);return this.inverse?!t:t}toString(){return`String${this.inverse?"Not":""}Matching`}getExpectedType(){return"string"}}class v extends p{constructor(e,t=2,n=!1){if(!(0,o.isA)("Number",e))throw new Error("Expected is not a Number");if(!(0,o.isA)("Number",t))throw new Error("Precision is not a Number");super(e),u(this,"precision",void 0),this.inverse=n,this.precision=t}asymmetricMatch(e){if(!(0,o.isA)("Number",e))return!1;let t=!1;return t=e===1/0&&this.sample===1/0||e===-1/0&&this.sample===-1/0||Math.abs(this.sample-e)<Math.pow(10,-this.precision)/2,this.inverse?!t:t}toString(){return`Number${this.inverse?"Not":""}CloseTo`}getExpectedType(){return"number"}}t.any=e=>new d(e),t.anything=()=>new h,t.arrayContaining=e=>new g(e),t.arrayNotContaining=e=>new g(e,!0),t.objectContaining=e=>new m(e),t.objectNotContaining=e=>new m(e,!0),t.stringContaining=e=>new y(e),t.stringNotContaining=e=>new y(e,!0),t.stringMatching=e=>new b(e),t.stringNotMatching=e=>new b(e,!0),t.closeTo=(e,t)=>new v(e,t),t.notCloseTo=(e,t)=>new v(e,t,!0)},"./node_modules/expect/build/extractExpectedAssertionsErrors.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n("./node_modules/jest-matcher-utils/build/index.js"),o=n("./node_modules/expect/build/jestMatchersObject.js");t.default=()=>{const e=[],{assertionCalls:t,expectedAssertionsNumber:n,expectedAssertionsNumberError:i,isExpectingAssertions:s,isExpectingAssertionsError:a}=(0,o.getState)();if((0,o.setState)({assertionCalls:0,expectedAssertionsNumber:null,isExpectingAssertions:!1}),"number"==typeof n&&t!==n){const o=(0,r.EXPECTED_COLOR)((0,r.pluralize)("assertion",n));i.message=(0,r.matcherHint)(".assertions","",String(n),{isDirectExpectCall:!0})+"\n\n"+`Expected ${o} to be called but received `+(0,r.RECEIVED_COLOR)((0,r.pluralize)("assertion call",t||0))+".",e.push({actual:t.toString(),error:i,expected:n.toString()})}if(s&&0===t){const t=(0,r.EXPECTED_COLOR)("at least one assertion"),n=(0,r.RECEIVED_COLOR)("received none");a.message=(0,r.matcherHint)(".hasAssertions","","",{isDirectExpectCall:!0})+"\n\n"+`Expected ${t} to be called but ${n}.`,e.push({actual:"none",error:a,expected:"at least one"})}return e}},"./node_modules/expect/build/index.js":(e,t,n)=>{var r=(m="undefined"!=typeof globalThis?globalThis:void 0!==m?m:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")())["jest-symbol-do-not-touch"]||m.Symbol,o=g(n("./node_modules/jest-matcher-utils/build/index.js")),i=n("./node_modules/expect/build/asymmetricMatchers.js"),s=d(n("./node_modules/expect/build/extractExpectedAssertionsErrors.js")),a=n("./node_modules/expect/build/jasmineUtils.js"),c=n("./node_modules/expect/build/jestMatchersObject.js"),l=d(n("./node_modules/expect/build/matchers.js")),u=d(n("./node_modules/expect/build/spyMatchers.js")),f=g(n("./node_modules/expect/build/toThrowMatchers.js")),p=n("./node_modules/expect/build/utils.js");function d(e){return e&&e.__esModule?e:{default:e}}function h(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(h=function(e){return e?n:t})(e)}function g(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=h(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var s=o?Object.getOwnPropertyDescriptor(e,i):null;s&&(s.get||s.set)?Object.defineProperty(r,i,s):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}r=(m="undefined"!=typeof globalThis?globalThis:void 0!==m?m:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")())["jest-symbol-do-not-touch"]||m.Symbol;var m,y=(m="undefined"!=typeof globalThis?globalThis:void 0!==m?m:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")())[r.for("jest-native-promise")]||m.Promise;class b extends Error{constructor(...e){var n,r;super(...e),r=void 0,(n="matcherResult")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r}}const v=e=>!!e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof e.then,E=(e,t)=>"toThrow"===e||"toThrowError"===e?(0,f.createMatcher)(e,!0):"toThrowErrorMatchingSnapshot"===e||"toThrowErrorMatchingInlineSnapshot"===e?function(e){return function(t,n){return e.apply(this,[t,n,!0])}}(t):null,w=(e,...t)=>{if(0!==t.length)throw new Error("Expect takes at most one argument.");const n=(0,c.getMatchers)(),r={not:{},rejects:{not:{}},resolves:{not:{}}},o=new b;return Object.keys(n).forEach((t=>{const i=n[t],s=E(t,i)||i;r[t]=x(i,!1,"",e),r.not[t]=x(i,!0,"",e),r.resolves[t]=j(t,s,!1,e,o),r.resolves.not[t]=j(t,s,!0,e,o),r.rejects[t]=_(t,s,!1,e,o),r.rejects.not[t]=_(t,s,!0,e,o)})),r},j=(e,t,n,r,i)=>(...s)=>{const a={isNot:n,promise:"resolves"};if(!v(r))throw new b(o.matcherErrorMessage(o.matcherHint(e,void 0,"",a),`${o.RECEIVED_COLOR("received")} value must be a promise`,o.printWithType("Received",r,o.printReceived)));const c=new b;return r.then((e=>x(t,n,"resolves",e,c).apply(null,s)),(t=>(i.message=o.matcherHint(e,void 0,"",a)+"\n\nReceived promise rejected instead of resolved\n"+`Rejected to value: ${o.printReceived(t)}`,y.reject(i))))},_=(e,t,n,r,i)=>(...s)=>{const a={isNot:n,promise:"rejects"},c="function"==typeof r?r():r;if(!v(c))throw new b(o.matcherErrorMessage(o.matcherHint(e,void 0,"",a),`${o.RECEIVED_COLOR("received")} value must be a promise or a function returning a promise`,o.printWithType("Received",r,o.printReceived)));const l=new b;return c.then((t=>(i.message=o.matcherHint(e,void 0,"",a)+"\n\nReceived promise resolved instead of rejected\n"+`Resolved to value: ${o.printReceived(t)}`,y.reject(i))),(e=>x(t,n,"rejects",e,l).apply(null,s)))},x=(e,t,n,r,i)=>function s(...l){let u=!0;const f={...o,iterableEquality:p.iterableEquality,subsetEquality:p.subsetEquality},d={dontThrow:()=>u=!1,...(0,c.getState)(),equals:a.equals,error:i,isNot:t,promise:n,utils:f},h=(e,n)=>{if(A(e),(0,c.getState)().assertionCalls++,e.pass&&t||!e.pass&&!t){const t=(e=>e&&e()||o.RECEIVED_COLOR("No message was specified for this matcher."))(e.message);let r;if(i?(r=i,r.message=t):n?(r=n,r.message=t):(r=new b(t),Error.captureStackTrace&&Error.captureStackTrace(r,s)),r.matcherResult={...e,message:t},u)throw r;(0,c.getState)().suppressedErrors.push(r)}},g=t=>{throw!0!==e[c.INTERNAL_MATCHER_FLAG]||t instanceof b||"PrettyFormatPluginError"===t.name||!Error.captureStackTrace||Error.captureStackTrace(t,s),t};let m;try{if(e[c.INTERNAL_MATCHER_FLAG],m=e.call(d,r,...l),v(m)){const e=m,t=new b;return Error.captureStackTrace&&Error.captureStackTrace(t,s),e.then((e=>h(e,t))).catch(g)}return h(m)}catch(e){return g(e)}};w.extend=e=>(0,c.setMatchers)(e,!1,w),w.anything=i.anything,w.any=i.any,w.not={arrayContaining:i.arrayNotContaining,closeTo:i.notCloseTo,objectContaining:i.objectNotContaining,stringContaining:i.stringNotContaining,stringMatching:i.stringNotMatching},w.arrayContaining=i.arrayContaining,w.closeTo=i.closeTo,w.objectContaining=i.objectContaining,w.stringContaining=i.stringContaining,w.stringMatching=i.stringMatching;const A=e=>{if("object"!=typeof e||"boolean"!=typeof e.pass||e.message&&"string"!=typeof e.message&&"function"!=typeof e.message)throw new Error(`Unexpected return from a matcher function.\nMatcher functions should return an object in the following format:\n  {message?: string | function, pass: boolean}\n'${o.stringify(e)}' was returned`)};(0,c.setMatchers)(l.default,!0,w),(0,c.setMatchers)(u.default,!0,w),(0,c.setMatchers)(f.default,!0,w),w.addSnapshotSerializer=()=>{},w.assertions=function e(t){const n=new Error;Error.captureStackTrace&&Error.captureStackTrace(n,e),(0,c.setState)({expectedAssertionsNumber:t,expectedAssertionsNumberError:n})},w.hasAssertions=function e(...t){const n=new Error;Error.captureStackTrace&&Error.captureStackTrace(n,e),o.ensureNoExpected(t[0],".hasAssertions"),(0,c.setState)({isExpectingAssertions:!0,isExpectingAssertionsError:n})},w.getState=c.getState,w.setState=c.setState,w.extractExpectedAssertionsErrors=s.default;const O=w;e.exports=O},"./node_modules/expect/build/jasmineUtils.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.equals=function(e,t,n,r){return o(e,t,[],[],n=n||[],r?a:s)},t.fnNameFor=function(e){if(e.name)return e.name;const t=n.call(e).match(/^(?:async)?\s*function\s*\*?\s*([\w$]+)\s*\(/);return t?t[1]:"<anonymous>"},t.hasProperty=function e(t,n){return!!t&&(!!Object.prototype.hasOwnProperty.call(t,n)||e(function(e){return Object.getPrototypeOf?Object.getPrototypeOf(e):e.constructor.prototype==e?null:e.constructor.prototype}(t),n))},t.isA=c,t.isImmutableUnorderedKeyed=function(e){return!(!e||!e["@@__IMMUTABLE_KEYED__@@"]||e[u])},t.isImmutableUnorderedSet=function(e){return!(!e||!e["@@__IMMUTABLE_SET__@@"]||e[u])},t.isUndefined=function(e){return void 0===e};const n=Function.prototype.toString;function r(e){return!!e&&c("Function",e.asymmetricMatch)}function o(e,t,n,s,a,c){var u=!0,f=function(e,t){var n=r(e),o=r(t);if(!n||!o)return n?e.asymmetricMatch(t):o?t.asymmetricMatch(e):void 0}(e,t);if(void 0!==f)return f;for(var p=0;p<a.length;p++){var d=a[p](e,t);if(void 0!==d)return d}if(e instanceof Error&&t instanceof Error)return e.message==t.message;if(Object.is(e,t))return!0;if(null===e||null===t)return e===t;var h=Object.prototype.toString.call(e);if(h!=Object.prototype.toString.call(t))return!1;switch(h){case"[object Boolean]":case"[object String]":case"[object Number]":return typeof e==typeof t&&("object"!=typeof e&&"object"!=typeof t?Object.is(e,t):Object.is(e.valueOf(),t.valueOf()));case"[object Date]":return+e==+t;case"[object RegExp]":return e.source===t.source&&e.flags===t.flags}if("object"!=typeof e||"object"!=typeof t)return!1;if(l(e)&&l(t))return e.isEqualNode(t);for(var g=n.length;g--;){if(n[g]===e)return s[g]===t;if(s[g]===t)return!1}if(n.push(e),s.push(t),"[object Array]"==h&&e.length!==t.length)return!1;var m,y=i(e,c),b=y.length;if(i(t,c).length!==b)return!1;for(;b--;)if(!(u=c(t,m=y[b])&&o(e[m],t[m],n,s,a,c)))return!1;return n.pop(),s.pop(),u}function i(e,t){var n=[];for(var r in e)t(e,r)&&n.push(r);return n.concat(Object.getOwnPropertySymbols(e).filter((t=>Object.getOwnPropertyDescriptor(e,t).enumerable)))}function s(e,t){return a(e,t)&&void 0!==e[t]}function a(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function c(e,t){return Object.prototype.toString.apply(t)==="[object "+e+"]"}function l(e){return null!==e&&"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName&&"function"==typeof e.isEqualNode}const u="@@__IMMUTABLE_ORDERED__@@"},"./node_modules/expect/build/jestMatchersObject.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setState=t.setMatchers=t.getState=t.getMatchers=t.INTERNAL_MATCHER_FLAG=void 0;var r=n("./node_modules/expect/build/asymmetricMatchers.js"),o="undefined"!=typeof globalThis?globalThis:void 0!==o?o:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),i=o["jest-symbol-do-not-touch"]||o.Symbol;const s=i.for("$$jest-matchers-object"),a=i.for("$$jest-internal-matcher");if(t.INTERNAL_MATCHER_FLAG=a,!o.hasOwnProperty(s)){const e={assertionCalls:0,expectedAssertionsNumber:null,isExpectingAssertions:!1,suppressedErrors:[]};Object.defineProperty(o,s,{value:{matchers:Object.create(null),state:e}})}t.getState=()=>o[s].state,t.setState=e=>{Object.assign(o[s].state,e)},t.getMatchers=()=>o[s].matchers,t.setMatchers=(e,t,n)=>{Object.keys(e).forEach((o=>{const i=e[o];if(Object.defineProperty(i,a,{value:t}),!t){class e extends r.AsymmetricMatcher{constructor(e=!1,...t){super(t,e)}asymmetricMatch(e){const{pass:t}=i.call(this.getMatcherContext(),e,...this.sample);return this.inverse?!t:t}toString(){return`${this.inverse?"not.":""}${o}`}getExpectedType(){return"any"}toAsymmetricMatcher(){return`${this.toString()}<${this.sample.map(String).join(", ")}>`}}Object.defineProperty(n,o,{configurable:!0,enumerable:!0,value:(...t)=>new e(!1,...t),writable:!0}),Object.defineProperty(n.not,o,{configurable:!0,enumerable:!0,value:(...t)=>new e(!0,...t),writable:!0})}})),Object.assign(o[s].matchers,e)}},"./node_modules/expect/build/matchers.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n("./node_modules/jest-get-type/build/index.js"),o=n("./node_modules/jest-matcher-utils/build/index.js"),i=n("./node_modules/expect/build/jasmineUtils.js"),s=n("./node_modules/expect/build/print.js"),a=n("./node_modules/expect/build/utils.js");const c="Expected",l="Received",u=e=>!1!==e,f=[a.iterableEquality,a.typeEquality,a.sparseArrayEquality,a.arrayBufferEquality];var p={toBe(e,t){const n="toBe",s={comment:"Object.is equality",isNot:this.isNot,promise:this.promise},p=Object.is(e,t);return{actual:e,expected:t,message:p?()=>(0,o.matcherHint)(n,void 0,void 0,s)+"\n\n"+`Expected: not ${(0,o.printExpected)(t)}`:()=>{const p=(0,r.getType)(t);let d=null;return"map"!==p&&"set"!==p&&((0,i.equals)(e,t,f,!0)?d="toStrictEqual":(0,i.equals)(e,t,[a.iterableEquality])&&(d="toEqual")),(0,o.matcherHint)(n,void 0,void 0,s)+"\n\n"+(null!==d?(0,o.DIM_COLOR)(`If it should pass with deep equality, replace "toBe" with "${d}"`)+"\n\n":"")+(0,o.printDiffOrStringify)(t,e,c,l,u(this.expand))},name:n,pass:p}},toBeCloseTo(e,t,n=2){const r="toBeCloseTo",i=3===arguments.length?"precision":void 0,a=this.isNot,c={isNot:a,promise:this.promise,secondArgument:i,secondArgumentColor:e=>e};if("number"!=typeof t)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(r,void 0,void 0,c),`${(0,o.EXPECTED_COLOR)("expected")} value must be a number`,(0,o.printWithType)("Expected",t,o.printExpected)));if("number"!=typeof e)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(r,void 0,void 0,c),`${(0,o.RECEIVED_COLOR)("received")} value must be a number`,(0,o.printWithType)("Received",e,o.printReceived)));let l=!1,u=0,f=0;return e===1/0&&t===1/0||e===-1/0&&t===-1/0?l=!0:(u=Math.pow(10,-n)/2,f=Math.abs(t-e),l=f<u),{message:l?()=>(0,o.matcherHint)(r,void 0,void 0,c)+"\n\n"+`Expected: not ${(0,o.printExpected)(t)}\n`+(0===f?"":`Received:     ${(0,o.printReceived)(e)}\n\n`+(0,s.printCloseTo)(f,u,n,a)):()=>(0,o.matcherHint)(r,void 0,void 0,c)+"\n\n"+`Expected: ${(0,o.printExpected)(t)}\n`+`Received: ${(0,o.printReceived)(e)}\n\n`+(0,s.printCloseTo)(f,u,n,a),pass:l}},toBeDefined(e,t){const n="toBeDefined",r={isNot:this.isNot,promise:this.promise};return(0,o.ensureNoExpected)(t,n,r),{message:()=>(0,o.matcherHint)(n,void 0,"",r)+"\n\n"+`Received: ${(0,o.printReceived)(e)}`,pass:void 0!==e}},toBeFalsy(e,t){const n="toBeFalsy",r={isNot:this.isNot,promise:this.promise};return(0,o.ensureNoExpected)(t,n,r),{message:()=>(0,o.matcherHint)(n,void 0,"",r)+"\n\n"+`Received: ${(0,o.printReceived)(e)}`,pass:!e}},toBeGreaterThan(e,t){const n="toBeGreaterThan",r=this.isNot,i={isNot:r,promise:this.promise};return(0,o.ensureNumbers)(e,t,n,i),{message:()=>(0,o.matcherHint)(n,void 0,void 0,i)+"\n\n"+`Expected:${r?" not":""} > ${(0,o.printExpected)(t)}\n`+`Received:${r?"    ":""}   ${(0,o.printReceived)(e)}`,pass:e>t}},toBeGreaterThanOrEqual(e,t){const n="toBeGreaterThanOrEqual",r=this.isNot,i={isNot:r,promise:this.promise};return(0,o.ensureNumbers)(e,t,n,i),{message:()=>(0,o.matcherHint)(n,void 0,void 0,i)+"\n\n"+`Expected:${r?" not":""} >= ${(0,o.printExpected)(t)}\n`+`Received:${r?"    ":""}    ${(0,o.printReceived)(e)}`,pass:e>=t}},toBeInstanceOf(e,t){const n="toBeInstanceOf",i={isNot:this.isNot,promise:this.promise};if("function"!=typeof t)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,i),`${(0,o.EXPECTED_COLOR)("expected")} value must be a function`,(0,o.printWithType)("Expected",t,o.printExpected)));const a=e instanceof t;return{message:a?()=>(0,o.matcherHint)(n,void 0,void 0,i)+"\n\n"+(0,s.printExpectedConstructorNameNot)("Expected constructor",t)+("function"==typeof e.constructor&&e.constructor!==t?(0,s.printReceivedConstructorNameNot)("Received constructor",e.constructor,t):""):()=>(0,o.matcherHint)(n,void 0,void 0,i)+"\n\n"+(0,s.printExpectedConstructorName)("Expected constructor",t)+((0,r.isPrimitive)(e)||null===Object.getPrototypeOf(e)?`\nReceived value has no prototype\nReceived value: ${(0,o.printReceived)(e)}`:"function"!=typeof e.constructor?`\nReceived value: ${(0,o.printReceived)(e)}`:(0,s.printReceivedConstructorName)("Received constructor",e.constructor)),pass:a}},toBeLessThan(e,t){const n="toBeLessThan",r=this.isNot,i={isNot:r,promise:this.promise};return(0,o.ensureNumbers)(e,t,n,i),{message:()=>(0,o.matcherHint)(n,void 0,void 0,i)+"\n\n"+`Expected:${r?" not":""} < ${(0,o.printExpected)(t)}\n`+`Received:${r?"    ":""}   ${(0,o.printReceived)(e)}`,pass:e<t}},toBeLessThanOrEqual(e,t){const n="toBeLessThanOrEqual",r=this.isNot,i={isNot:r,promise:this.promise};return(0,o.ensureNumbers)(e,t,n,i),{message:()=>(0,o.matcherHint)(n,void 0,void 0,i)+"\n\n"+`Expected:${r?" not":""} <= ${(0,o.printExpected)(t)}\n`+`Received:${r?"    ":""}    ${(0,o.printReceived)(e)}`,pass:e<=t}},toBeNaN(e,t){const n="toBeNaN",r={isNot:this.isNot,promise:this.promise};return(0,o.ensureNoExpected)(t,n,r),{message:()=>(0,o.matcherHint)(n,void 0,"",r)+"\n\n"+`Received: ${(0,o.printReceived)(e)}`,pass:Number.isNaN(e)}},toBeNull(e,t){const n="toBeNull",r={isNot:this.isNot,promise:this.promise};return(0,o.ensureNoExpected)(t,n,r),{message:()=>(0,o.matcherHint)(n,void 0,"",r)+"\n\n"+`Received: ${(0,o.printReceived)(e)}`,pass:null===e}},toBeTruthy(e,t){const n="toBeTruthy",r={isNot:this.isNot,promise:this.promise};return(0,o.ensureNoExpected)(t,n,r),{message:()=>(0,o.matcherHint)(n,void 0,"",r)+"\n\n"+`Received: ${(0,o.printReceived)(e)}`,pass:!!e}},toBeUndefined(e,t){const n="toBeUndefined",r={isNot:this.isNot,promise:this.promise};return(0,o.ensureNoExpected)(t,n,r),{message:()=>(0,o.matcherHint)(n,void 0,"",r)+"\n\n"+`Received: ${(0,o.printReceived)(e)}`,pass:void 0===e}},toContain(e,t){const n="toContain",c=this.isNot,l={comment:"indexOf",isNot:c,promise:this.promise};if(null==e)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,l),`${(0,o.RECEIVED_COLOR)("received")} value must not be null nor undefined`,(0,o.printWithType)("Received",e,o.printReceived)));if("string"==typeof e){const r=`${(0,o.EXPECTED_COLOR)("expected")} value must be a string if ${(0,o.RECEIVED_COLOR)("received")} value is a string`;if("string"!=typeof t)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,e,String(t),l),r,(0,o.printWithType)("Expected",t,o.printExpected)+"\n"+(0,o.printWithType)("Received",e,o.printReceived)));const i=e.indexOf(String(t));return{message:()=>{const r="Expected "+("string"==typeof t?"substring":"value"),a="Received string",u=(0,o.getLabelPrinter)(r,a);return(0,o.matcherHint)(n,void 0,void 0,l)+"\n\n"+`${u(r)}${c?"not ":""}${(0,o.printExpected)(t)}\n`+`${u(a)}${c?"    ":""}${c?(0,s.printReceivedStringContainExpectedSubstring)(e,i,String(t).length):(0,o.printReceived)(e)}`},pass:-1!==i}}const u=Array.from(e),f=u.indexOf(t);return{message:()=>{const p="Expected value",d=`Received ${(0,r.getType)(e)}`,h=(0,o.getLabelPrinter)(p,d);return(0,o.matcherHint)(n,void 0,void 0,l)+"\n\n"+`${h(p)}${c?"not ":""}${(0,o.printExpected)(t)}\n`+`${h(d)}${c?"    ":""}${c&&Array.isArray(e)?(0,s.printReceivedArrayContainExpectedItem)(e,f):(0,o.printReceived)(e)}`+(c||-1===u.findIndex((e=>(0,i.equals)(e,t,[a.iterableEquality])))?"":`\n\n${o.SUGGEST_TO_CONTAIN_EQUAL}`)},pass:-1!==f}},toContainEqual(e,t){const n="toContainEqual",c=this.isNot,l={comment:"deep equality",isNot:c,promise:this.promise};if(null==e)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,l),`${(0,o.RECEIVED_COLOR)("received")} value must not be null nor undefined`,(0,o.printWithType)("Received",e,o.printReceived)));const u=Array.from(e).findIndex((e=>(0,i.equals)(e,t,[a.iterableEquality])));return{message:()=>{const i="Expected value",a=`Received ${(0,r.getType)(e)}`,f=(0,o.getLabelPrinter)(i,a);return(0,o.matcherHint)(n,void 0,void 0,l)+"\n\n"+`${f(i)}${c?"not ":""}${(0,o.printExpected)(t)}\n`+`${f(a)}${c?"    ":""}${c&&Array.isArray(e)?(0,s.printReceivedArrayContainExpectedItem)(e,u):(0,o.printReceived)(e)}`},pass:-1!==u}},toEqual(e,t){const n="toEqual",r={comment:"deep equality",isNot:this.isNot,promise:this.promise},s=(0,i.equals)(e,t,[a.iterableEquality]);return{actual:e,expected:t,message:s?()=>(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+`Expected: not ${(0,o.printExpected)(t)}\n`+((0,o.stringify)(t)!==(0,o.stringify)(e)?`Received:     ${(0,o.printReceived)(e)}`:""):()=>(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+(0,o.printDiffOrStringify)(t,e,c,l,u(this.expand)),name:n,pass:s}},toHaveLength(e,t){const n="toHaveLength",i=this.isNot,s={isNot:i,promise:this.promise};if("number"!=typeof(null==e?void 0:e.length))throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,s),`${(0,o.RECEIVED_COLOR)("received")} value must have a length property whose value must be a number`,(0,o.printWithType)("Received",e,o.printReceived)));return(0,o.ensureExpectedIsNonNegativeInteger)(t,n,s),{message:()=>{const a="Expected length",c="Received length",l=`Received ${(0,r.getType)(e)}`,u=(0,o.getLabelPrinter)(a,c,l);return(0,o.matcherHint)(n,void 0,void 0,s)+"\n\n"+`${u(a)}${i?"not ":""}${(0,o.printExpected)(t)}\n`+(i?"":`${u(c)}${(0,o.printReceived)(e.length)}\n`)+`${u(l)}${i?"    ":""}${(0,o.printReceived)(e)}`},pass:e.length===t}},toHaveProperty(e,t,n){const s="toHaveProperty",c="path",l=3===arguments.length,f={isNot:this.isNot,promise:this.promise,secondArgument:l?"value":""};if(null==e)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(s,void 0,c,f),`${(0,o.RECEIVED_COLOR)("received")} value must not be null nor undefined`,(0,o.printWithType)("Received",e,o.printReceived)));const p=(0,r.getType)(t);if("string"!==p&&"array"!==p)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(s,void 0,c,f),`${(0,o.EXPECTED_COLOR)("expected")} path must be a string or array`,(0,o.printWithType)("Expected",t,o.printExpected)));const d="string"==typeof t?(0,a.pathAsArray)(t).length:t.length;if("array"===p&&0===d)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(s,void 0,c,f),`${(0,o.EXPECTED_COLOR)("expected")} path must not be an empty array`,(0,o.printWithType)("Expected",t,o.printExpected)));const h=(0,a.getPath)(e,t),{lastTraversedObject:g,hasEndProp:m}=h,y=h.traversedPath,b=y.length===d,v=b?h.value:g,E=l?(0,i.equals)(h.value,n,[a.iterableEquality]):Boolean(m);return E&&!b?{message:()=>(0,o.matcherHint)(s,void 0,c,f)+"\n\n"+`Expected path: ${(0,o.printExpected)(t)}\n`+`Received path: ${(0,o.printReceived)("array"===p||0===y.length?y:y.join("."))}\n\n`+`Expected value: not ${(0,o.printExpected)(n)}\n`+`Received value:     ${(0,o.printReceived)(v)}\n\n`+(0,o.DIM_COLOR)("Because a positive assertion passes for expected value undefined if the property does not exist, this negative assertion fails unless the property does exist and has a defined value"),pass:E}:{message:E?()=>(0,o.matcherHint)(s,void 0,c,f)+"\n\n"+(l?`Expected path: ${(0,o.printExpected)(t)}\n\nExpected value: not ${(0,o.printExpected)(n)}`+((0,o.stringify)(n)!==(0,o.stringify)(v)?`\nReceived value:     ${(0,o.printReceived)(v)}`:""):`Expected path: not ${(0,o.printExpected)(t)}\n\nReceived value: ${(0,o.printReceived)(v)}`):()=>(0,o.matcherHint)(s,void 0,c,f)+"\n\n"+`Expected path: ${(0,o.printExpected)(t)}\n`+(b?"\n"+(0,o.printDiffOrStringify)(n,v,"Expected value","Received value",u(this.expand)):`Received path: ${(0,o.printReceived)("array"===p||0===y.length?y:y.join("."))}\n\n`+(l?`Expected value: ${(0,o.printExpected)(n)}\n`:"")+`Received value: ${(0,o.printReceived)(v)}`),pass:E}},toMatch(e,t){const n="toMatch",r={isNot:this.isNot,promise:this.promise};if("string"!=typeof e)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,r),`${(0,o.RECEIVED_COLOR)("received")} value must be a string`,(0,o.printWithType)("Received",e,o.printReceived)));if("string"!=typeof t&&(!t||"function"!=typeof t.test))throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,r),`${(0,o.EXPECTED_COLOR)("expected")} value must be a string or regular expression`,(0,o.printWithType)("Expected",t,o.printExpected)));const i="string"==typeof t?e.includes(t):new RegExp(t).test(e);return{message:i?()=>"string"==typeof t?(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+`Expected substring: not ${(0,o.printExpected)(t)}\n`+`Received string:        ${(0,s.printReceivedStringContainExpectedSubstring)(e,e.indexOf(t),t.length)}`:(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+`Expected pattern: not ${(0,o.printExpected)(t)}\n`+`Received string:      ${(0,s.printReceivedStringContainExpectedResult)(e,"function"==typeof t.exec?t.exec(e):null)}`:()=>{const i="Expected "+("string"==typeof t?"substring":"pattern"),s="Received string",a=(0,o.getLabelPrinter)(i,s);return(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+`${a(i)}${(0,o.printExpected)(t)}\n`+`${a(s)}${(0,o.printReceived)(e)}`},pass:i}},toMatchObject(e,t){const n="toMatchObject",r={isNot:this.isNot,promise:this.promise};if("object"!=typeof e||null===e)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,r),`${(0,o.RECEIVED_COLOR)("received")} value must be a non-null object`,(0,o.printWithType)("Received",e,o.printReceived)));if("object"!=typeof t||null===t)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(n,void 0,void 0,r),`${(0,o.EXPECTED_COLOR)("expected")} value must be a non-null object`,(0,o.printWithType)("Expected",t,o.printExpected)));const s=(0,i.equals)(e,t,[a.iterableEquality,a.subsetEquality]);return{message:s?()=>(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+`Expected: not ${(0,o.printExpected)(t)}`+((0,o.stringify)(t)!==(0,o.stringify)(e)?`\nReceived:     ${(0,o.printReceived)(e)}`:""):()=>(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+(0,o.printDiffOrStringify)(t,(0,a.getObjectSubset)(e,t),c,l,u(this.expand)),pass:s}},toStrictEqual(e,t){const n="toStrictEqual",r={comment:"deep equality",isNot:this.isNot,promise:this.promise},s=(0,i.equals)(e,t,f,!0);return{actual:e,expected:t,message:s?()=>(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+`Expected: not ${(0,o.printExpected)(t)}\n`+((0,o.stringify)(t)!==(0,o.stringify)(e)?`Received:     ${(0,o.printReceived)(e)}`:""):()=>(0,o.matcherHint)(n,void 0,void 0,r)+"\n\n"+(0,o.printDiffOrStringify)(t,e,c,l,u(this.expand)),name:n,pass:s}}};t.default=p},"./node_modules/expect/build/print.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printReceivedStringContainExpectedSubstring=t.printReceivedStringContainExpectedResult=t.printReceivedConstructorNameNot=t.printReceivedConstructorName=t.printReceivedArrayContainExpectedItem=t.printExpectedConstructorNameNot=t.printExpectedConstructorName=t.printCloseTo=void 0;var r=n("./node_modules/jest-matcher-utils/build/index.js");const o=e=>e.replace(/"|\\/g,"\\$&"),i=(e,t,n)=>(0,r.RECEIVED_COLOR)('"'+o(e.slice(0,t))+(0,r.INVERTED_COLOR)(o(e.slice(t,t+n)))+o(e.slice(t+n))+'"');t.printReceivedStringContainExpectedSubstring=i,t.printReceivedStringContainExpectedResult=(e,t)=>null===t?(0,r.printReceived)(e):i(e,t.index,t[0].length),t.printReceivedArrayContainExpectedItem=(e,t)=>(0,r.RECEIVED_COLOR)("["+e.map(((e,n)=>{const o=(0,r.stringify)(e);return n===t?(0,r.INVERTED_COLOR)(o):o})).join(", ")+"]"),t.printCloseTo=(e,t,n,o)=>{const i=(0,r.stringify)(e),s=i.includes("e")?t.toExponential(0):0<=n&&n<20?t.toFixed(n+1):(0,r.stringify)(t);return`Expected precision:  ${o?"    ":""}  ${(0,r.stringify)(n)}\nExpected difference: ${o?"not ":""}< ${(0,r.EXPECTED_COLOR)(s)}\nReceived difference: ${o?"    ":""}  ${(0,r.RECEIVED_COLOR)(i)}`},t.printExpectedConstructorName=(e,t)=>s(e,t,!1,!0)+"\n",t.printExpectedConstructorNameNot=(e,t)=>s(e,t,!0,!0)+"\n",t.printReceivedConstructorName=(e,t)=>s(e,t,!1,!1)+"\n",t.printReceivedConstructorNameNot=(e,t,n)=>"string"==typeof n.name&&0!==n.name.length&&"string"==typeof t.name&&0!==t.name.length?s(e,t,!0,!1)+` ${Object.getPrototypeOf(t)===n?"extends":"extends … extends"} ${(0,r.EXPECTED_COLOR)(n.name)}\n`:s(e,t,!1,!1)+"\n";const s=(e,t,n,o)=>"string"!=typeof t.name?`${e} name is not a string`:0===t.name.length?`${e} name is an empty string`:`${e}: ${n?o?"not ":"    ":""}${o?(0,r.EXPECTED_COLOR)(t.name):(0,r.RECEIVED_COLOR)(t.name)}`},"./node_modules/expect/build/spyMatchers.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n("./node_modules/jest-get-type/build/index.js"),o=n("./node_modules/jest-matcher-utils/build/index.js"),i=n("./node_modules/expect/build/jasmineUtils.js"),s=n("./node_modules/expect/build/utils.js");const a=e=>!1!==e,c="called with 0 arguments",l=e=>0===e.length?c:e.map((e=>(0,o.printExpected)(e))).join(", "),u=(e,t)=>0===e.length?c:e.map(((e,n)=>Array.isArray(t)&&n<t.length&&p(t[n],e)?f(e):(0,o.printReceived)(e))).join(", "),f=e=>(0,o.DIM_COLOR)((0,o.stringify)(e)),p=(e,t)=>(0,i.equals)(e,t,[s.iterableEquality]),d=(e,t)=>p(e,t),h=(e,t)=>"return"===t.type&&p(e,t.value),g=e=>e.reduce(((e,t)=>"return"===t.type?e+1:e),0),m=(e,t)=>`\nNumber of returns: ${(0,o.printReceived)(e)}`+(t!==e?`\nNumber of calls:   ${(0,o.printReceived)(t)}`:""),y=e=>{const t=e.indexOf(":"),n=e.slice(t);return(e,r)=>(r?"->"+" ".repeat(Math.max(0,t-2-e.length)):" ".repeat(Math.max(t-e.length)))+e+n},b=(e,t,n,r)=>{if(0===t.length)return"";const o="Received:     ";if(n)return o+u(t[0],e)+"\n";const i=y(o);return"Received\n"+t.reduce(((t,[n,o])=>t+i(String(n+1),n===r)+u(o,e)+"\n"),"")},v=(e,t,n,r,i)=>{const s=`Expected: ${l(e)}\n`;if(0===t.length)return s;const a="Received: ";if(r&&(0===i||void 0===i)){const r=t[0][1];if(j(e,r)){const t=[(0,o.EXPECTED_COLOR)("- Expected"),(0,o.RECEIVED_COLOR)("+ Received"),""],i=Math.max(e.length,r.length);for(let s=0;s<i;s+=1){if(s<e.length&&s<r.length){if(p(e[s],r[s])){t.push(`  ${f(r[s])},`);continue}if(_(e[s],r[s])){const i=(0,o.diff)(e[s],r[s],{expand:n});if("string"==typeof i&&i.includes("- Expected")&&i.includes("+ Received")){t.push(i.split("\n").slice(3).join("\n")+",");continue}}}s<e.length&&t.push((0,o.EXPECTED_COLOR)("- "+(0,o.stringify)(e[s]))+","),s<r.length&&t.push((0,o.RECEIVED_COLOR)("+ "+(0,o.stringify)(r[s]))+",")}return t.join("\n")+"\n"}return s+a+u(r,e)+"\n"}const c=y(a);return s+"Received\n"+t.reduce(((t,[r,o])=>{const s=c(String(r+1),r===i);return t+(r!==i&&void 0!==i||!j(e,o)?s+u(o,e):s.replace(": ","\n")+w(e,o,n))+"\n"}),"")},E="Received".replace(/\w/g," "),w=(e,t,n)=>t.map(((t,r)=>{if(r<e.length){if(p(e[r],t))return E+"  "+f(t)+",";if(_(e[r],t)){const i=(0,o.diff)(e[r],t,{expand:n});if("string"==typeof i&&i.includes("- Expected")&&i.includes("+ Received"))return i.split("\n").slice(3).map((e=>E+e)).join("\n")+","}}return E+(r<e.length?"  "+(0,o.printReceived)(t):(0,o.RECEIVED_COLOR)("+ "+(0,o.stringify)(t)))+","})).join("\n"),j=(e,t)=>e.some(((e,n)=>n<t.length&&_(e,t[n]))),_=(e,t)=>{const n=(0,r.getType)(e),o=(0,r.getType)(t);return!(n!==o||(0,r.isPrimitive)(e)||"date"===n||"function"===n||"regexp"===n||e instanceof Error&&t instanceof Error||"object"===n&&"function"==typeof e.asymmetricMatch||"object"===o&&"function"==typeof t.asymmetricMatch)},x=(e,t)=>"throw"===e.type?"function call threw an error":"incomplete"===e.type?"function call has not returned yet":p(t,e.value)?f(e.value):(0,o.printReceived)(e.value),A=(e,t,n,r,o)=>{if(0===n.length)return"";if(r&&(0===o||void 0===o))return e+x(n[0][1],t)+"\n";const i=y(e);return e.replace(":","").trim()+"\n"+n.reduce(((e,[n,r])=>e+i(String(n+1),n===o)+x(r,t)+"\n"),"")},O=e=>function(t,n){const r={isNot:this.isNot,promise:this.promise};(0,o.ensureNoExpected)(n,e,r),D(t,e,"",r);const i=B(t),s=i?"spy":t.getMockName(),a=i?t.calls.count():t.mock.calls.length,c=i?t.calls.all().map((e=>e.args)):t.mock.calls,l=a>0;return{message:l?()=>(0,o.matcherHint)(e,s,"",r)+"\n\n"+`Expected number of calls: ${(0,o.printExpected)(0)}\n`+`Received number of calls: ${(0,o.printReceived)(a)}\n\n`+c.reduce(((e,t,n)=>(e.length<3&&e.push(`${n+1}: ${u(t)}`),e)),[]).join("\n"):()=>(0,o.matcherHint)(e,s,"",r)+"\n\n"+`Expected number of calls: >= ${(0,o.printExpected)(1)}\n`+`Received number of calls:    ${(0,o.printReceived)(a)}`,pass:l}},R=e=>function(t,n){const r={isNot:this.isNot,promise:this.promise};(0,o.ensureNoExpected)(n,e,r),F(t,e,"",r);const i=t.getMockName(),s=t.mock.results.reduce(((e,t)=>"return"===t.type?e+1:e),0),a=s>0;return{message:a?()=>(0,o.matcherHint)(e,i,"",r)+"\n\n"+`Expected number of returns: ${(0,o.printExpected)(0)}\n`+`Received number of returns: ${(0,o.printReceived)(s)}\n\n`+t.mock.results.reduce(((e,t,n)=>("return"===t.type&&e.length<3&&e.push(`${n+1}: ${(0,o.printReceived)(t.value)}`),e)),[]).join("\n")+(t.mock.calls.length!==s?`\n\nReceived number of calls:   ${(0,o.printReceived)(t.mock.calls.length)}`:""):()=>(0,o.matcherHint)(e,i,"",r)+"\n\n"+`Expected number of returns: >= ${(0,o.printExpected)(1)}\n`+`Received number of returns:    ${(0,o.printReceived)(s)}`+(t.mock.calls.length!==s?`\nReceived number of calls:      ${(0,o.printReceived)(t.mock.calls.length)}`:""),pass:a}},S=e=>function(t,n){const r="expected",i={isNot:this.isNot,promise:this.promise};(0,o.ensureExpectedIsNonNegativeInteger)(n,e,i),D(t,e,r,i);const s=B(t),a=s?"spy":t.getMockName(),c=s?t.calls.count():t.mock.calls.length,l=c===n;return{message:l?()=>(0,o.matcherHint)(e,a,r,i)+"\n\n"+`Expected number of calls: not ${(0,o.printExpected)(n)}`:()=>(0,o.matcherHint)(e,a,r,i)+"\n\n"+`Expected number of calls: ${(0,o.printExpected)(n)}\n`+`Received number of calls: ${(0,o.printReceived)(c)}`,pass:l}},C=e=>function(t,n){const r="expected",i={isNot:this.isNot,promise:this.promise};(0,o.ensureExpectedIsNonNegativeInteger)(n,e,i),F(t,e,r,i);const s=t.getMockName(),a=t.mock.results.reduce(((e,t)=>"return"===t.type?e+1:e),0),c=a===n;return{message:c?()=>(0,o.matcherHint)(e,s,r,i)+"\n\n"+`Expected number of returns: not ${(0,o.printExpected)(n)}`+(t.mock.calls.length!==a?`\n\nReceived number of calls:       ${(0,o.printReceived)(t.mock.calls.length)}`:""):()=>(0,o.matcherHint)(e,s,r,i)+"\n\n"+`Expected number of returns: ${(0,o.printExpected)(n)}\n`+`Received number of returns: ${(0,o.printReceived)(a)}`+(t.mock.calls.length!==a?`\nReceived number of calls:   ${(0,o.printReceived)(t.mock.calls.length)}`:""),pass:c}},T=e=>function(t,...n){const r="...expected",i={isNot:this.isNot,promise:this.promise};D(t,e,r,i);const s=B(t),c=s?"spy":t.getMockName(),u=s?t.calls.all().map((e=>e.args)):t.mock.calls,f=u.some((e=>d(n,e)));return{message:f?()=>{const t=[];let s=0;for(;s<u.length&&t.length<3;)d(n,u[s])&&t.push([s,u[s]]),s+=1;return(0,o.matcherHint)(e,c,r,i)+"\n\n"+`Expected: not ${l(n)}\n`+(1===u.length&&(0,o.stringify)(u[0])===(0,o.stringify)(n)?"":b(n,t,1===u.length))+`\nNumber of calls: ${(0,o.printReceived)(u.length)}`}:()=>{const t=[];let s=0;for(;s<u.length&&t.length<3;)t.push([s,u[s]]),s+=1;return(0,o.matcherHint)(e,c,r,i)+"\n\n"+v(n,t,a(this.expand),1===u.length)+`\nNumber of calls: ${(0,o.printReceived)(u.length)}`},pass:f}},M=e=>function(t,n){const r="expected",i={isNot:this.isNot,promise:this.promise};F(t,e,r,i);const s=t.getMockName(),{calls:a,results:c}=t.mock,l=c.some((e=>h(n,e)));return{message:l?()=>{const t=[];let l=0;for(;l<c.length&&t.length<3;)h(n,c[l])&&t.push([l,c[l]]),l+=1;return(0,o.matcherHint)(e,s,r,i)+"\n\n"+`Expected: not ${(0,o.printExpected)(n)}\n`+(1===c.length&&"return"===c[0].type&&(0,o.stringify)(c[0].value)===(0,o.stringify)(n)?"":A("Received:     ",n,t,1===c.length))+m(g(c),a.length)}:()=>{const t=[];let l=0;for(;l<c.length&&t.length<3;)t.push([l,c[l]]),l+=1;return(0,o.matcherHint)(e,s,r,i)+"\n\n"+`Expected: ${(0,o.printExpected)(n)}\n`+A("Received: ",n,t,1===c.length)+m(g(c),a.length)},pass:l}},$=e=>function(t,...n){const r="...expected",i={isNot:this.isNot,promise:this.promise};D(t,e,r,i);const s=B(t),c=s?"spy":t.getMockName(),u=s?t.calls.all().map((e=>e.args)):t.mock.calls,f=u.length-1,p=f>=0&&d(n,u[f]);return{message:p?()=>{const t=[];return f>0&&t.push([f-1,u[f-1]]),t.push([f,u[f]]),(0,o.matcherHint)(e,c,r,i)+"\n\n"+`Expected: not ${l(n)}\n`+(1===u.length&&(0,o.stringify)(u[0])===(0,o.stringify)(n)?"":b(n,t,1===u.length,f))+`\nNumber of calls: ${(0,o.printReceived)(u.length)}`}:()=>{const t=[];if(f>=0){if(f>0){let e=f-1;for(;e>=0&&!d(n,u[e]);)e-=1;e<0&&(e=f-1),t.push([e,u[e]])}t.push([f,u[f]])}return(0,o.matcherHint)(e,c,r,i)+"\n\n"+v(n,t,a(this.expand),1===u.length,f)+`\nNumber of calls: ${(0,o.printReceived)(u.length)}`},pass:p}},k=e=>function(t,n){const r="expected",i={isNot:this.isNot,promise:this.promise};F(t,e,r,i);const s=t.getMockName(),{calls:a,results:c}=t.mock,l=c.length-1,u=l>=0&&h(n,c[l]);return{message:u?()=>{const t=[];return l>0&&t.push([l-1,c[l-1]]),t.push([l,c[l]]),(0,o.matcherHint)(e,s,r,i)+"\n\n"+`Expected: not ${(0,o.printExpected)(n)}\n`+(1===c.length&&"return"===c[0].type&&(0,o.stringify)(c[0].value)===(0,o.stringify)(n)?"":A("Received:     ",n,t,1===c.length,l))+m(g(c),a.length)}:()=>{const t=[];if(l>=0){if(l>0){let e=l-1;for(;e>=0&&!h(n,c[e]);)e-=1;e<0&&(e=l-1),t.push([e,c[e]])}t.push([l,c[l]])}return(0,o.matcherHint)(e,s,r,i)+"\n\n"+`Expected: ${(0,o.printExpected)(n)}\n`+A("Received: ",n,t,1===c.length,l)+m(g(c),a.length)},pass:u}},I=e=>function(t,n,...r){const i="n",s={expectedColor:e=>e,isNot:this.isNot,promise:this.promise,secondArgument:"...expected"};if(D(t,e,i,s),!Number.isSafeInteger(n)||n<1)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(e,void 0,i,s),"n must be a positive integer",(0,o.printWithType)(i,n,o.stringify)));const c=B(t),u=c?"spy":t.getMockName(),f=c?t.calls.all().map((e=>e.args)):t.mock.calls,p=f.length,h=n-1,g=h<p&&d(r,f[h]);return{message:g?()=>{const t=[];return h-1>=0&&t.push([h-1,f[h-1]]),t.push([h,f[h]]),h+1<p&&t.push([h+1,f[h+1]]),(0,o.matcherHint)(e,u,i,s)+"\n\n"+`n: ${n}\n`+`Expected: not ${l(r)}\n`+(1===f.length&&(0,o.stringify)(f[0])===(0,o.stringify)(r)?"":b(r,t,1===f.length,h))+`\nNumber of calls: ${(0,o.printReceived)(f.length)}`}:()=>{const t=[];if(h<p){if(h-1>=0){let e=h-1;for(;e>=0&&!d(r,f[e]);)e-=1;e<0&&(e=h-1),t.push([e,f[e]])}if(t.push([h,f[h]]),h+1<p){let e=h+1;for(;e<p&&!d(r,f[e]);)e+=1;e>=p&&(e=h+1),t.push([e,f[e]])}}else if(p>0){let e=p-1;for(;e>=0&&!d(r,f[e]);)e-=1;e<0&&(e=p-1),t.push([e,f[e]])}return(0,o.matcherHint)(e,u,i,s)+"\n\n"+`n: ${n}\n`+v(r,t,a(this.expand),1===f.length,h)+`\nNumber of calls: ${(0,o.printReceived)(f.length)}`},pass:g}},N=e=>function(t,n,r){const i="n",s={expectedColor:e=>e,isNot:this.isNot,promise:this.promise,secondArgument:"expected"};if(F(t,e,i,s),!Number.isSafeInteger(n)||n<1)throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(e,void 0,i,s),"n must be a positive integer",(0,o.printWithType)(i,n,o.stringify)));const a=t.getMockName(),{calls:c,results:l}=t.mock,u=l.length,f=n-1,p=f<u&&h(r,l[f]);return{message:p?()=>{const t=[];return f-1>=0&&t.push([f-1,l[f-1]]),t.push([f,l[f]]),f+1<u&&t.push([f+1,l[f+1]]),(0,o.matcherHint)(e,a,i,s)+"\n\n"+`n: ${n}\n`+`Expected: not ${(0,o.printExpected)(r)}\n`+(1===l.length&&"return"===l[0].type&&(0,o.stringify)(l[0].value)===(0,o.stringify)(r)?"":A("Received:     ",r,t,1===l.length,f))+m(g(l),c.length)}:()=>{const t=[];if(f<u){if(f-1>=0){let e=f-1;for(;e>=0&&!h(r,l[e]);)e-=1;e<0&&(e=f-1),t.push([e,l[e]])}if(t.push([f,l[f]]),f+1<u){let e=f+1;for(;e<u&&!h(r,l[e]);)e+=1;e>=u&&(e=f+1),t.push([e,l[e]])}}else if(u>0){let e=u-1;for(;e>=0&&!h(r,l[e]);)e-=1;e<0&&(e=u-1),t.push([e,l[e]])}return(0,o.matcherHint)(e,a,i,s)+"\n\n"+`n: ${n}\n`+`Expected: ${(0,o.printExpected)(r)}\n`+A("Received: ",r,t,1===l.length,f)+m(g(l),c.length)},pass:p}},P={lastCalledWith:$("lastCalledWith"),lastReturnedWith:k("lastReturnedWith"),nthCalledWith:I("nthCalledWith"),nthReturnedWith:N("nthReturnedWith"),toBeCalled:O("toBeCalled"),toBeCalledTimes:S("toBeCalledTimes"),toBeCalledWith:T("toBeCalledWith"),toHaveBeenCalled:O("toHaveBeenCalled"),toHaveBeenCalledTimes:S("toHaveBeenCalledTimes"),toHaveBeenCalledWith:T("toHaveBeenCalledWith"),toHaveBeenLastCalledWith:$("toHaveBeenLastCalledWith"),toHaveBeenNthCalledWith:I("toHaveBeenNthCalledWith"),toHaveLastReturnedWith:k("toHaveLastReturnedWith"),toHaveNthReturnedWith:N("toHaveNthReturnedWith"),toHaveReturned:R("toHaveReturned"),toHaveReturnedTimes:C("toHaveReturnedTimes"),toHaveReturnedWith:M("toHaveReturnedWith"),toReturn:R("toReturn"),toReturnTimes:C("toReturnTimes"),toReturnWith:M("toReturnWith")},L=e=>null!=e&&!0===e._isMockFunction,B=e=>null!=e&&null!=e.calls&&"function"==typeof e.calls.all&&"function"==typeof e.calls.count,D=(e,t,n,r)=>{if(!L(e)&&!B(e))throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(t,void 0,n,r),`${(0,o.RECEIVED_COLOR)("received")} value must be a mock or spy function`,(0,o.printWithType)("Received",e,o.printReceived)))},F=(e,t,n,r)=>{if(!L(e))throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(t,void 0,n,r),`${(0,o.RECEIVED_COLOR)("received")} value must be a mock function`,(0,o.printWithType)("Received",e,o.printReceived)))};var H=P;t.default=H},"./node_modules/expect/build/toThrowMatchers.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.createMatcher=void 0;var o=n("./node_modules/jest-matcher-utils/build/index.js"),i=n("./node_modules/jest-message-util/build/index.js"),s=n("./node_modules/expect/build/print.js"),a=n("./node_modules/expect/build/utils.js");const c="Received function did not throw",l=e=>{const t=null!=e&&"string"==typeof e.message;return t&&"string"==typeof e.name&&"string"==typeof e.stack?{hasMessage:t,isError:!0,message:e.message,value:e}:{hasMessage:t,isError:!1,message:t?e.message:String(e),value:e}},u=(e,t)=>function(n,r){const i={isNot:this.isNot,promise:this.promise};let s=null;if(t&&(0,a.isError)(n))s=l(n);else if("function"!=typeof n){if(!t){const t=void 0===r?"":"expected";throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(e,void 0,t,i),`${(0,o.RECEIVED_COLOR)("received")} value must be a function`,(0,o.printWithType)("Received",n,o.printReceived)))}}else try{n()}catch(e){s=l(e)}if(void 0===r)return y(e,i,s);if("function"==typeof r)return g(e,i,s,r);if("string"==typeof r)return m(e,i,s,r);if(null!==r&&"function"==typeof r.test)return p(e,i,s,r);if(null!==r&&"function"==typeof r.asymmetricMatch)return d(e,i,s,r);if(null!==r&&"object"==typeof r)return h(e,i,s,r);throw new Error((0,o.matcherErrorMessage)((0,o.matcherHint)(e,void 0,void 0,i),`${(0,o.EXPECTED_COLOR)("expected")} value must be a string or regular expression or class or error`,(0,o.printWithType)("Expected",r,o.printExpected)))};t.createMatcher=u;const f={toThrow:u("toThrow"),toThrowError:u("toThrowError")},p=(e,t,n,r)=>{const i=null!==n&&r.test(n.message);return{message:i?()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+b("Expected pattern: not ",r)+(null!==n&&n.hasMessage?v("Received message:     ",n,"message",r)+E(n):v("Received value:       ",n,"value")):()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+b("Expected pattern: ",r)+(null===n?"\n"+c:n.hasMessage?v("Received message: ",n,"message")+E(n):v("Received value:   ",n,"value")),pass:i}},d=(e,t,n,r)=>{const i=null!==n&&r.asymmetricMatch(n.value);return{message:i?()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+b("Expected asymmetric matcher: not ",r)+"\n"+(null!==n&&n.hasMessage?v("Received name:    ",n,"name")+v("Received message: ",n,"message")+E(n):v("Thrown value: ",n,"value")):()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+b("Expected asymmetric matcher: ",r)+"\n"+(null===n?c:n.hasMessage?v("Received name:    ",n,"name")+v("Received message: ",n,"message")+E(n):v("Thrown value: ",n,"value")),pass:i}},h=(e,t,n,r)=>{const i=null!==n&&n.message===r.message;return{message:i?()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+b("Expected message: not ",r.message)+(null!==n&&n.hasMessage?E(n):v("Received value:       ",n,"value")):()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+(null===n?b("Expected message: ",r.message)+"\n"+c:n.hasMessage?(0,o.printDiffOrStringify)(r.message,n.message,"Expected message","Received message",!0)+"\n"+E(n):b("Expected message: ",r.message)+v("Received value:   ",n,"value")),pass:i}},g=(e,t,n,r)=>{const i=null!==n&&n.value instanceof r;return{message:i?()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+(0,s.printExpectedConstructorNameNot)("Expected constructor",r)+(null!==n&&null!=n.value&&"function"==typeof n.value.constructor&&n.value.constructor!==r?(0,s.printReceivedConstructorNameNot)("Received constructor",n.value.constructor,r):"")+"\n"+(null!==n&&n.hasMessage?v("Received message: ",n,"message")+E(n):v("Received value: ",n,"value")):()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+(0,s.printExpectedConstructorName)("Expected constructor",r)+(null===n?"\n"+c:(null!=n.value&&"function"==typeof n.value.constructor?(0,s.printReceivedConstructorName)("Received constructor",n.value.constructor):"")+"\n"+(n.hasMessage?v("Received message: ",n,"message")+E(n):v("Received value: ",n,"value"))),pass:i}},m=(e,t,n,r)=>{const i=null!==n&&n.message.includes(r);return{message:i?()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+b("Expected substring: not ",r)+(null!==n&&n.hasMessage?v("Received message:       ",n,"message",r)+E(n):v("Received value:         ",n,"value")):()=>(0,o.matcherHint)(e,void 0,void 0,t)+"\n\n"+b("Expected substring: ",r)+(null===n?"\n"+c:n.hasMessage?v("Received message:   ",n,"message")+E(n):v("Received value:     ",n,"value")),pass:i}},y=(e,t,n)=>{const r=null!==n;return{message:r?()=>(0,o.matcherHint)(e,void 0,"",t)+"\n\n"+(null!==n&&n.hasMessage?v("Error name:    ",n,"name")+v("Error message: ",n,"message")+E(n):v("Thrown value: ",n,"value")):()=>(0,o.matcherHint)(e,void 0,"",t)+"\n\n"+c,pass:r}},b=(e,t)=>e+(0,o.printExpected)(t)+"\n",v=(e,t,n,r)=>{if(null===t)return"";if("message"===n){const n=t.message;if("string"==typeof r){const t=n.indexOf(r);if(-1!==t)return e+(0,s.printReceivedStringContainExpectedSubstring)(n,t,r.length)+"\n"}else if(r instanceof RegExp)return e+(0,s.printReceivedStringContainExpectedResult)(n,"function"==typeof r.exec?r.exec(n):null)+"\n";return e+(0,o.printReceived)(n)+"\n"}return"name"===n?t.isError?e+(0,o.printReceived)(t.value.name)+"\n":"":"value"===n?t.isError?"":e+(0,o.printReceived)(t.value)+"\n":""},E=e=>null!==e&&e.isError?(0,i.formatStackTrace)((0,i.separateMessageFromStack)(e.value.stack).stack,{rootDir:r.cwd(),testMatch:[]},{noStackTrace:!1}):"";var w=f;t.default=w},"./node_modules/expect/build/utils.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arrayBufferEquality=void 0,t.emptyObject=function(e){return!(!e||"object"!=typeof e||Object.keys(e).length)},t.typeEquality=t.subsetEquality=t.sparseArrayEquality=t.pathAsArray=t.partition=t.iterableEquality=t.isOneline=t.isError=t.getPath=t.getObjectSubset=void 0;var r=n("./node_modules/jest-get-type/build/index.js"),o=n("./node_modules/expect/build/jasmineUtils.js"),i="undefined"!=typeof globalThis?globalThis:void 0!==i?i:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),s=i["jest-symbol-do-not-touch"]||i.Symbol;const a=(e,t)=>!(!e||"object"!=typeof e||e===Object.prototype)&&(Object.prototype.hasOwnProperty.call(e,t)||a(Object.getPrototypeOf(e),t)),c=(e,t)=>{if(Array.isArray(t)||(t=y(t)),t.length){const n=1===t.length,o=t[0],i=e[o];if(!n&&null==i)return{hasEndProp:!1,lastTraversedObject:e,traversedPath:[]};const s=c(i,t.slice(1));return null===s.lastTraversedObject&&(s.lastTraversedObject=e),s.traversedPath.unshift(o),n&&(s.hasEndProp=void 0!==i||!(0,r.isPrimitive)(e)&&o in e,s.hasEndProp||s.traversedPath.shift()),s}return{lastTraversedObject:null,traversedPath:[],value:e}};t.getPath=c;const l=(e,t,n=new WeakMap)=>{if(Array.isArray(e)){if(Array.isArray(t)&&t.length===e.length)return t.map(((t,n)=>l(e[n],t)))}else{if(e instanceof Date)return e;if(d(e)&&d(t)){if((0,o.equals)(e,t,[p,g]))return t;const r={};if(n.set(e,r),Object.keys(e).filter((e=>a(t,e))).forEach((o=>{r[o]=n.has(e[o])?n.get(e[o]):l(e[o],t[o],n)})),Object.keys(r).length>0)return r}}return e};t.getObjectSubset=l;const u=s.iterator,f=e=>!(null==e||!e[u]),p=(e,t,n=[],r=[])=>{if("object"!=typeof e||"object"!=typeof t||Array.isArray(e)||Array.isArray(t)||!f(e)||!f(t))return;if(e.constructor!==t.constructor)return!1;let i=n.length;for(;i--;)if(n[i]===e)return r[i]===t;n.push(e),r.push(t);const s=(e,t)=>p(e,t,[...n],[...r]);if(void 0!==e.size){if(e.size!==t.size)return!1;if((0,o.isA)("Set",e)||(0,o.isImmutableUnorderedSet)(e)){let i=!0;for(const n of e)if(!t.has(n)){let e=!1;for(const r of t)!0===(0,o.equals)(n,r,[s])&&(e=!0);if(!1===e){i=!1;break}}return n.pop(),r.pop(),i}if((0,o.isA)("Map",e)||(0,o.isImmutableUnorderedKeyed)(e)){let i=!0;for(const n of e)if(!t.has(n[0])||!(0,o.equals)(n[1],t.get(n[0]),[s])){let e=!1;for(const r of t){let t=!1;!0===(0,o.equals)(n[0],r[0],[s])&&(t=(0,o.equals)(n[1],r[1],[s])),!0===t&&(e=!0)}if(!1===e){i=!1;break}}return n.pop(),r.pop(),i}}const a=t[u]();for(const t of e){const e=a.next();if(e.done||!(0,o.equals)(t,e.value,[s]))return!1}return!!a.next().done&&(n.pop(),r.pop(),!0)};t.iterableEquality=p;const d=e=>null!==e&&"object"==typeof e,h=e=>d(e)&&!(e instanceof Error)&&!(e instanceof Array)&&!(e instanceof Date),g=(e,t)=>{const n=(e=new WeakMap)=>(t,r)=>{if(h(r))return Object.keys(r).every((i=>{if(h(r[i])){if(e.has(r[i]))return(0,o.equals)(t[i],r[i],[p]);e.set(r[i],!0)}const s=null!=t&&a(t,i)&&(0,o.equals)(t[i],r[i],[p,n(e)]);return e.delete(r[i]),s}))};return n()(e,t)};t.subsetEquality=g;const m=(e,t)=>{if(null!=e&&null!=t&&e.constructor!==t.constructor)return!1};t.typeEquality=m,t.arrayBufferEquality=(e,t)=>{if(!(e instanceof ArrayBuffer&&t instanceof ArrayBuffer))return;const n=new DataView(e),r=new DataView(t);if(n.byteLength!==r.byteLength)return!1;for(let e=0;e<n.byteLength;e++)if(n.getUint8(e)!==r.getUint8(e))return!1;return!0},t.sparseArrayEquality=(e,t)=>{if(!Array.isArray(e)||!Array.isArray(t))return;const n=Object.keys(e),r=Object.keys(t);return(0,o.equals)(e,t,[p,m],!0)&&(0,o.equals)(n,r)},t.partition=(e,t)=>{const n=[[],[]];return e.forEach((e=>n[t(e)?0:1].push(e))),n};const y=e=>{const t=[];if(""===e)return t.push(""),t;const n=RegExp("[^.[\\]]+|(?=(?:\\.)(?:\\.|$))","g");return"."===e[0]&&t.push(""),e.replace(n,(e=>(t.push(e),e))),t};t.pathAsArray=y,t.isError=e=>{switch(Object.prototype.toString.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return e instanceof Error}};const b=/[\r\n]/;t.isOneline=(e,t)=>!("string"!=typeof e||"string"!=typeof t||b.test(e)&&b.test(t))},"./node_modules/fill-range/index.js":(e,t,n)=>{const r=n("./node_modules/util/util.js"),o=n("./node_modules/to-regex-range/index.js"),i=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),s=e=>"number"==typeof e||"string"==typeof e&&""!==e,a=e=>Number.isInteger(+e),c=e=>{let t=`${e}`,n=-1;if("-"===t[0]&&(t=t.slice(1)),"0"===t)return!1;for(;"0"===t[++n];);return n>0},l=(e,t,n)=>{if(t>0){let n="-"===e[0]?"-":"";n&&(e=e.slice(1)),e=n+e.padStart(n?t-1:t,"0")}return!1===n?String(e):e},u=(e,t)=>{let n="-"===e[0]?"-":"";for(n&&(e=e.slice(1),t--);e.length<t;)e="0"+e;return n?"-"+e:e},f=(e,t,n,r)=>{if(n)return o(e,t,{wrap:!1,...r});let i=String.fromCharCode(e);return e===t?i:`[${i}-${String.fromCharCode(t)}]`},p=(e,t,n)=>{if(Array.isArray(e)){let t=!0===n.wrap,r=n.capture?"":"?:";return t?`(${r}${e.join("|")})`:e.join("|")}return o(e,t,n)},d=(...e)=>new RangeError("Invalid range arguments: "+r.inspect(...e)),h=(e,t,n)=>{if(!0===n.strictRanges)throw d([e,t]);return[]},m=(e,t,n,r={})=>{if(null==t&&s(e))return[e];if(!s(e)||!s(t))return h(e,t,r);if("function"==typeof n)return m(e,t,1,{transform:n});if(i(n))return m(e,t,0,n);let o={...r};return!0===o.capture&&(o.wrap=!0),n=n||o.step||1,a(n)?a(e)&&a(t)?((e,t,n=1,r={})=>{let o=Number(e),i=Number(t);if(!Number.isInteger(o)||!Number.isInteger(i)){if(!0===r.strictRanges)throw d([e,t]);return[]}0===o&&(o=0),0===i&&(i=0);let s=o>i,a=String(e),h=String(t),g=String(n);n=Math.max(Math.abs(n),1);let m=c(a)||c(h)||c(g),y=m?Math.max(a.length,h.length,g.length):0,b=!1===m&&!1===((e,t,n)=>"string"==typeof e||"string"==typeof t||!0===n.stringify)(e,t,r),v=r.transform||(e=>t=>!0===e?Number(t):String(t))(b);if(r.toRegex&&1===n)return f(u(e,y),u(t,y),!0,r);let E={negatives:[],positives:[]},w=[],j=0;for(;s?o>=i:o<=i;)!0===r.toRegex&&n>1?E[(_=o)<0?"negatives":"positives"].push(Math.abs(_)):w.push(l(v(o,j),y,b)),o=s?o-n:o+n,j++;var _;return!0===r.toRegex?n>1?((e,t)=>{e.negatives.sort(((e,t)=>e<t?-1:e>t?1:0)),e.positives.sort(((e,t)=>e<t?-1:e>t?1:0));let n,r=t.capture?"":"?:",o="",i="";return e.positives.length&&(o=e.positives.join("|")),e.negatives.length&&(i=`-(${r}${e.negatives.join("|")})`),n=o&&i?`${o}|${i}`:o||i,t.wrap?`(${r}${n})`:n})(E,r):p(w,null,{wrap:!1,...r}):w})(e,t,n,o):((e,t,n=1,r={})=>{if(!a(e)&&e.length>1||!a(t)&&t.length>1)return h(e,t,r);let o=r.transform||(e=>String.fromCharCode(e)),i=`${e}`.charCodeAt(0),s=`${t}`.charCodeAt(0),c=i>s,l=Math.min(i,s),u=Math.max(i,s);if(r.toRegex&&1===n)return f(l,u,!1,r);let d=[],g=0;for(;c?i>=s:i<=s;)d.push(o(i,g)),i=c?i-n:i+n,g++;return!0===r.toRegex?p(d,null,{wrap:!1,options:r}):d})(e,t,Math.max(Math.abs(n),1),o):null==n||i(n)?m(e,t,1,n):((e,t)=>{if(!0===t.strictRanges)throw new TypeError(`Expected step "${e}" to be a number`);return[]})(n,o)};e.exports=m},"./node_modules/foreach/index.js":e=>{var t=Object.prototype.hasOwnProperty,n=Object.prototype.toString;e.exports=function(e,r,o){if("[object Function]"!==n.call(r))throw new TypeError("iterator must be a function");var i=e.length;if(i===+i)for(var s=0;s<i;s++)r.call(o,e[s],s,e);else for(var a in e)t.call(e,a)&&r.call(o,e[a],a,e)}},"./node_modules/function-bind/implementation.js":e=>{var n=Array.prototype.slice,r=Object.prototype.toString;e.exports=function(e){var i=this;if("function"!=typeof i||"[object Function]"!==r.call(i))throw new TypeError("Function.prototype.bind called on incompatible "+i);for(var s,a=n.call(arguments,1),l=Math.max(0,i.length-a.length),u=[],f=0;f<l;f++)u.push("$"+f);if(s=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof s){var t=i.apply(this,a.concat(n.call(arguments)));return Object(t)===t?t:this}return i.apply(e,a.concat(n.call(arguments)))})),i.prototype){var p=function(){};p.prototype=i.prototype,s.prototype=new p,p.prototype=null}return s}},"./node_modules/function-bind/index.js":(e,t,n)=>{var r=n("./node_modules/function-bind/implementation.js");e.exports=Function.prototype.bind||r},"./node_modules/get-intrinsic/index.js":(e,t,n)=>{var r,o=SyntaxError,i=Function,s=TypeError,a=function(e){try{return i('"use strict"; return ('+e+").constructor;")()}catch(e){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(e){c=null}var l=function(){throw new s},u=c?function(){try{return l}catch(e){try{return c(arguments,"callee").get}catch(e){return l}}}():l,f=n("./node_modules/has-symbols/index.js")(),p=Object.getPrototypeOf||function(e){return e.__proto__},d={},h="undefined"==typeof Uint8Array?r:p(Uint8Array),g={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":f?p([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?p(p([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?p((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?p((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?p(""[Symbol.iterator]()):r,"%Symbol%":f?Symbol:r,"%SyntaxError%":o,"%ThrowTypeError%":u,"%TypedArray%":h,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet},m=function e(t){var n;if("%AsyncFunction%"===t)n=a("async function () {}");else if("%GeneratorFunction%"===t)n=a("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=a("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&(n=p(o.prototype))}return g[t]=n,n},y={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},b=n("./node_modules/function-bind/index.js"),v=n("./node_modules/has/src/index.js"),E=b.call(Function.call,Array.prototype.concat),w=b.call(Function.apply,Array.prototype.splice),j=b.call(Function.call,String.prototype.replace),_=b.call(Function.call,String.prototype.slice),x=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,A=/\\(\\)?/g,R=function(e,t){var n,r=e;if(v(y,r)&&(r="%"+(n=y[r])[0]+"%"),v(g,r)){var i=g[r];if(i===d&&(i=m(r)),void 0===i&&!t)throw new s("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:i}}throw new o("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new s('"allowMissing" argument must be a boolean');var n=function(e){var t=_(e,0,1),n=_(e,-1);if("%"===t&&"%"!==n)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new o("invalid intrinsic syntax, expected opening `%`");var r=[];return j(e,x,(function(e,t,n,o){r[r.length]=n?j(o,A,"$1"):t||e})),r}(e),r=n.length>0?n[0]:"",i=R("%"+r+"%",t),a=i.name,l=i.value,u=!1,f=i.alias;f&&(r=f[0],w(n,E([0,1],f)));for(var p=1,d=!0;p<n.length;p+=1){var h=n[p],m=_(h,0,1),y=_(h,-1);if(('"'===m||"'"===m||"`"===m||'"'===y||"'"===y||"`"===y)&&m!==y)throw new o("property names with quotes must have matching quotes");if("constructor"!==h&&d||(u=!0),v(g,a="%"+(r+="."+h)+"%"))l=g[a];else if(null!=l){if(!(h in l)){if(!t)throw new s("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&p+1>=n.length){var b=c(l,h);l=(d=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:l[h]}else d=v(l,h),l=l[h];d&&!u&&(g[a]=l)}}return l}},"./node_modules/has-symbols/index.js":(e,t,n)=>{var r="undefined"!=typeof Symbol&&Symbol,o=n("./node_modules/has-symbols/shams.js");e.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&o()}},"./node_modules/has-symbols/shams.js":e=>{e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},"./node_modules/has-tostringtag/shams.js":(e,t,n)=>{var r=n("./node_modules/has-symbols/shams.js");e.exports=function(){return r()&&!!Symbol.toStringTag}},"./node_modules/has/src/index.js":(e,t,n)=>{var r=n("./node_modules/function-bind/index.js");e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},"./node_modules/ieee754/index.js":(e,t)=>{t.read=function(e,t,n,r,o){var i,s,a=8*o-r-1,c=(1<<a)-1,l=c>>1,u=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-u)-1,d>>=-u,u+=a;u>0;i=256*i+e[t+f],f+=p,u-=8);for(s=i&(1<<-u)-1,i>>=-u,u+=r;u>0;s=256*s+e[t+f],f+=p,u-=8);if(0===i)i=1-l;else{if(i===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),i-=l}return(d?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var s,a,c,l=8*i-o-1,u=(1<<l)-1,f=u>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=u):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+f>=1?p/c:p*Math.pow(2,1-f))*c>=2&&(s++,c/=2),s+f>=u?(a=0,s=u):s+f>=1?(a=(t*c-1)*Math.pow(2,o),s+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;e[n+d]=255&a,d+=h,a/=256,o-=8);for(s=s<<o|a,l+=o;l>0;e[n+d]=255&s,d+=h,s/=256,l-=8);e[n+d-h]|=128*g}},"./node_modules/inherits/inherits_browser.js":e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},"./node_modules/is-arguments/index.js":(e,t,n)=>{var r=n("./node_modules/has-tostringtag/shams.js")(),o=n("./node_modules/call-bind/callBound.js")("Object.prototype.toString"),i=function(e){return!(r&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===o(e)},s=function(e){return!!i(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==o(e)&&"[object Function]"===o(e.callee)},a=function(){return i(arguments)}();i.isLegacyArguments=s,e.exports=a?i:s},"./node_modules/is-generator-function/index.js":(e,t,n)=>{var r,o=Object.prototype.toString,i=Function.prototype.toString,s=/^\s*(?:function)?\*/,a=n("./node_modules/has-tostringtag/shams.js")(),c=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(s.test(i.call(e)))return!0;if(!a)return"[object GeneratorFunction]"===o.call(e);if(!c)return!1;if(void 0===r){var t=function(){if(!a)return!1;try{return Function("return function*() {}")()}catch(e){}}();r=!!t&&c(t)}return c(e)===r}},"./node_modules/is-nan/implementation.js":e=>{e.exports=function(e){return e!=e}},"./node_modules/is-nan/index.js":(e,t,n)=>{var r=n("./node_modules/call-bind/index.js"),o=n("./node_modules/define-properties/index.js"),i=n("./node_modules/is-nan/implementation.js"),s=n("./node_modules/is-nan/polyfill.js"),a=n("./node_modules/is-nan/shim.js"),c=r(s(),Number);o(c,{getPolyfill:s,implementation:i,shim:a}),e.exports=c},"./node_modules/is-nan/polyfill.js":(e,t,n)=>{var r=n("./node_modules/is-nan/implementation.js");e.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:r}},"./node_modules/is-nan/shim.js":(e,t,n)=>{var r=n("./node_modules/define-properties/index.js"),o=n("./node_modules/is-nan/polyfill.js");e.exports=function(){var e=o();return r(Number,{isNaN:e},{isNaN:function(){return Number.isNaN!==e}}),e}},"./node_modules/is-number/index.js":e=>{e.exports=function(e){return"number"==typeof e?e-e==0:"string"==typeof e&&""!==e.trim()&&(Number.isFinite?Number.isFinite(+e):isFinite(+e))}},"./node_modules/is-typed-array/index.js":(e,t,n)=>{var r=n("./node_modules/foreach/index.js"),o=n("./node_modules/available-typed-arrays/index.js"),i=n("./node_modules/call-bind/callBound.js"),s=i("Object.prototype.toString"),a=n("./node_modules/has-tostringtag/shams.js")(),c="undefined"==typeof globalThis?n.g:globalThis,l=o(),u=i("Array.prototype.indexOf",!0)||function(e,t){for(var n=0;n<e.length;n+=1)if(e[n]===t)return n;return-1},f=i("String.prototype.slice"),p={},d=n("./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js"),h=Object.getPrototypeOf;a&&d&&h&&r(l,(function(e){var t=new c[e];if(Symbol.toStringTag in t){var n=h(t),r=d(n,Symbol.toStringTag);if(!r){var o=h(n);r=d(o,Symbol.toStringTag)}p[e]=r.get}})),e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!a||!(Symbol.toStringTag in e)){var t=f(s(e),8,-1);return u(l,t)>-1}return!!d&&function(e){var t=!1;return r(p,(function(n,r){if(!t)try{t=n.call(e)===r}catch(e){}})),t}(e)}},"./node_modules/jest-diff/build/cleanupSemantic.js":(e,t)=>{function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.cleanupSemantic=t.Diff=t.DIFF_INSERT=t.DIFF_EQUAL=t.DIFF_DELETE=void 0;var r=-1;t.DIFF_DELETE=r,t.DIFF_INSERT=1,t.DIFF_EQUAL=0;class o{constructor(e,t){n(this,0,void 0),n(this,1,void 0),this[0]=e,this[1]=t}}t.Diff=o;var i=function(e,t){if(!e||!t||e.charAt(0)!=t.charAt(0))return 0;for(var n=0,r=Math.min(e.length,t.length),o=r,i=0;n<o;)e.substring(i,o)==t.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o},s=function(e,t){if(!e||!t||e.charAt(e.length-1)!=t.charAt(t.length-1))return 0;for(var n=0,r=Math.min(e.length,t.length),o=r,i=0;n<o;)e.substring(e.length-o,e.length-i)==t.substring(t.length-o,t.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o},a=function(e,t){var n=e.length,r=t.length;if(0==n||0==r)return 0;n>r?e=e.substring(n-r):n<r&&(t=t.substring(0,n));var o=Math.min(n,r);if(e==t)return o;for(var i=0,s=1;;){var a=e.substring(o-s),c=t.indexOf(a);if(-1==c)return i;s+=c,0!=c&&e.substring(o-s)!=t.substring(0,s)||(i=s,s++)}};t.cleanupSemantic=function(e){for(var t=!1,n=[],i=0,s=null,l=0,u=0,f=0,p=0,d=0;l<e.length;)0==e[l][0]?(n[i++]=l,u=p,f=d,p=0,d=0,s=e[l][1]):(1==e[l][0]?p+=e[l][1].length:d+=e[l][1].length,s&&s.length<=Math.max(u,f)&&s.length<=Math.max(p,d)&&(e.splice(n[i-1],0,new o(r,s)),e[n[i-1]+1][0]=1,i--,l=--i>0?n[i-1]:-1,u=0,f=0,p=0,d=0,s=null,t=!0)),l++;for(t&&h(e),c(e),l=1;l<e.length;){if(e[l-1][0]==r&&1==e[l][0]){var g=e[l-1][1],m=e[l][1],y=a(g,m),b=a(m,g);y>=b?(y>=g.length/2||y>=m.length/2)&&(e.splice(l,0,new o(0,m.substring(0,y))),e[l-1][1]=g.substring(0,g.length-y),e[l+1][1]=m.substring(y),l++):(b>=g.length/2||b>=m.length/2)&&(e.splice(l,0,new o(0,g.substring(0,b))),e[l-1][0]=1,e[l-1][1]=m.substring(0,m.length-b),e[l+1][0]=r,e[l+1][1]=g.substring(b),l++),l++}l++}};var c=function(e){function t(e,t){if(!e||!t)return 6;var n=e.charAt(e.length-1),r=t.charAt(0),o=n.match(l),i=r.match(l),s=o&&n.match(u),a=i&&r.match(u),c=s&&n.match(f),h=a&&r.match(f),g=c&&e.match(p),m=h&&t.match(d);return g||m?5:c||h?4:o&&!s&&a?3:s||a?2:o||i?1:0}for(var n=1;n<e.length-1;){if(0==e[n-1][0]&&0==e[n+1][0]){var r=e[n-1][1],o=e[n][1],i=e[n+1][1],a=s(r,o);if(a){var c=o.substring(o.length-a);r=r.substring(0,r.length-a),o=c+o.substring(0,o.length-a),i=c+i}for(var h=r,g=o,m=i,y=t(r,o)+t(o,i);o.charAt(0)===i.charAt(0);){r+=o.charAt(0),o=o.substring(1)+i.charAt(0),i=i.substring(1);var b=t(r,o)+t(o,i);b>=y&&(y=b,h=r,g=o,m=i)}e[n-1][1]!=h&&(h?e[n-1][1]=h:(e.splice(n-1,1),n--),e[n][1]=g,m?e[n+1][1]=m:(e.splice(n+1,1),n--))}n++}},l=/[^a-zA-Z0-9]/,u=/\s/,f=/[\r\n]/,p=/\n\r?\n$/,d=/^\r?\n\r?\n/,h=function(e){e.push(new o(0,""));for(var t,n=0,a=0,c=0,l="",u="";n<e.length;)switch(e[n][0]){case 1:c++,u+=e[n][1],n++;break;case r:a++,l+=e[n][1],n++;break;case 0:a+c>1?(0!==a&&0!==c&&(0!==(t=i(u,l))&&(n-a-c>0&&0==e[n-a-c-1][0]?e[n-a-c-1][1]+=u.substring(0,t):(e.splice(0,0,new o(0,u.substring(0,t))),n++),u=u.substring(t),l=l.substring(t)),0!==(t=s(u,l))&&(e[n][1]=u.substring(u.length-t)+e[n][1],u=u.substring(0,u.length-t),l=l.substring(0,l.length-t))),n-=a+c,e.splice(n,a+c),l.length&&(e.splice(n,0,new o(r,l)),n++),u.length&&(e.splice(n,0,new o(1,u)),n++),n++):0!==n&&0==e[n-1][0]?(e[n-1][1]+=e[n][1],e.splice(n,1)):n++,c=0,a=0,l="",u=""}""===e[e.length-1][1]&&e.pop();var f=!1;for(n=1;n<e.length-1;)0==e[n-1][0]&&0==e[n+1][0]&&(e[n][1].substring(e[n][1].length-e[n-1][1].length)==e[n-1][1]?(e[n][1]=e[n-1][1]+e[n][1].substring(0,e[n][1].length-e[n-1][1].length),e[n+1][1]=e[n-1][1]+e[n+1][1],e.splice(n-1,1),f=!0):e[n][1].substring(0,e[n+1][1].length)==e[n+1][1]&&(e[n-1][1]+=e[n+1][1],e[n][1]=e[n][1].substring(e[n+1][1].length)+e[n+1][1],e.splice(n+1,1),f=!0)),n++;f&&h(e)}},"./node_modules/jest-diff/build/constants.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SIMILAR_MESSAGE=t.NO_DIFF_MESSAGE=void 0,t.NO_DIFF_MESSAGE="Compared values have no visual difference.",t.SIMILAR_MESSAGE="Compared values serialize to the same structure.\nPrinting internal object structure without calling `toJSON` instead."},"./node_modules/jest-diff/build/diffLines.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printDiffLines=t.diffLinesUnified2=t.diffLinesUnified=t.diffLinesRaw=void 0;var r,o=(r=n("./node_modules/diff-sequences/build/index.js"))&&r.__esModule?r:{default:r},i=n("./node_modules/jest-diff/build/cleanupSemantic.js"),s=n("./node_modules/jest-diff/build/joinAlignedDiffs.js"),a=n("./node_modules/jest-diff/build/normalizeDiffOptions.js");const c=e=>1===e.length&&0===e[0].length,l=(e,t)=>(({aAnnotation:e,aColor:t,aIndicator:n,bAnnotation:r,bColor:o,bIndicator:i,includeChangeCounts:s,omitAnnotationLines:a},c)=>{if(a)return"";let l="",u="";if(s){const t=String(c.a),o=String(c.b),s=r.length-e.length,a=" ".repeat(Math.max(0,s)),f=" ".repeat(Math.max(0,-s)),p=o.length-t.length;l=a+"  "+n+" "+" ".repeat(Math.max(0,p))+t,u=f+"  "+i+" "+" ".repeat(Math.max(0,-p))+o}return t(n+" "+e+l)+"\n"+o(i+" "+r+u)+"\n\n"})(t,(e=>{let t=0,n=0;return e.forEach((e=>{switch(e[0]){case i.DIFF_DELETE:t+=1;break;case i.DIFF_INSERT:n+=1}})),{a:t,b:n}})(e))+(t.expand?(0,s.joinAlignedDiffsExpand)(e,t):(0,s.joinAlignedDiffsNoExpand)(e,t));t.printDiffLines=l;const u=(e,t,n)=>l(f(c(e)?[]:e,c(t)?[]:t),(0,a.normalizeDiffOptions)(n));t.diffLinesUnified=u,t.diffLinesUnified2=(e,t,n,r,o)=>{if(c(e)&&c(n)&&(e=[],n=[]),c(t)&&c(r)&&(t=[],r=[]),e.length!==n.length||t.length!==r.length)return u(e,t,o);const s=f(n,r);let p=0,d=0;return s.forEach((n=>{switch(n[0]){case i.DIFF_DELETE:n[1]=e[p],p+=1;break;case i.DIFF_INSERT:n[1]=t[d],d+=1;break;default:n[1]=t[d],p+=1,d+=1}})),l(s,(0,a.normalizeDiffOptions)(o))};const f=(e,t)=>{const n=e.length,r=t.length,s=[];let a=0,c=0;for((0,o.default)(n,r,((n,r)=>e[n]===t[r]),((n,r,o)=>{for(;a!==r;a+=1)s.push(new i.Diff(i.DIFF_DELETE,e[a]));for(;c!==o;c+=1)s.push(new i.Diff(i.DIFF_INSERT,t[c]));for(;0!==n;n-=1,a+=1,c+=1)s.push(new i.Diff(i.DIFF_EQUAL,t[c]))}));a!==n;a+=1)s.push(new i.Diff(i.DIFF_DELETE,e[a]));for(;c!==r;c+=1)s.push(new i.Diff(i.DIFF_INSERT,t[c]));return s};t.diffLinesRaw=f},"./node_modules/jest-diff/build/diffStrings.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n("./node_modules/diff-sequences/build/index.js"))&&r.__esModule?r:{default:r},i=n("./node_modules/jest-diff/build/cleanupSemantic.js");t.default=(e,t)=>{let n=0,r=0;const s=[];return(0,o.default)(e.length,t.length,((n,r)=>e[n]===t[r]),((o,a,c)=>{n!==a&&s.push(new i.Diff(i.DIFF_DELETE,e.slice(n,a))),r!==c&&s.push(new i.Diff(i.DIFF_INSERT,t.slice(r,c))),n=a+o,r=c+o,s.push(new i.Diff(i.DIFF_EQUAL,t.slice(c,r)))})),n!==e.length&&s.push(new i.Diff(i.DIFF_DELETE,e.slice(n))),r!==t.length&&s.push(new i.Diff(i.DIFF_INSERT,t.slice(r))),s}},"./node_modules/jest-diff/build/getAlignedDiffs.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n("./node_modules/jest-diff/build/cleanupSemantic.js");function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class i{constructor(e,t){o(this,"op",void 0),o(this,"line",void 0),o(this,"lines",void 0),o(this,"changeColor",void 0),this.op=e,this.line=[],this.lines=[],this.changeColor=t}pushSubstring(e){this.pushDiff(new r.Diff(this.op,e))}pushLine(){var e,t,n;this.lines.push(1!==this.line.length?new r.Diff(this.op,(e=this.op,t=this.line,n=this.changeColor,t.reduce(((t,o)=>t+(o[0]===r.DIFF_EQUAL?o[1]:o[0]===e&&0!==o[1].length?n(o[1]):"")),""))):this.line[0][0]===this.op?this.line[0]:new r.Diff(this.op,this.line[0][1])),this.line.length=0}isLineEmpty(){return 0===this.line.length}pushDiff(e){this.line.push(e)}align(e){const t=e[1];if(t.includes("\n")){const e=t.split("\n"),n=e.length-1;e.forEach(((e,t)=>{t<n?(this.pushSubstring(e),this.pushLine()):0!==e.length&&this.pushSubstring(e)}))}else this.pushDiff(e)}moveLinesTo(e){this.isLineEmpty()||this.pushLine(),e.push(...this.lines),this.lines.length=0}}class s{constructor(e,t){o(this,"deleteBuffer",void 0),o(this,"insertBuffer",void 0),o(this,"lines",void 0),this.deleteBuffer=e,this.insertBuffer=t,this.lines=[]}pushDiffCommonLine(e){this.lines.push(e)}pushDiffChangeLines(e){const t=0===e[1].length;t&&!this.deleteBuffer.isLineEmpty()||this.deleteBuffer.pushDiff(e),t&&!this.insertBuffer.isLineEmpty()||this.insertBuffer.pushDiff(e)}flushChangeLines(){this.deleteBuffer.moveLinesTo(this.lines),this.insertBuffer.moveLinesTo(this.lines)}align(e){const t=e[0],n=e[1];if(n.includes("\n")){const e=n.split("\n"),o=e.length-1;e.forEach(((e,n)=>{if(0===n){const n=new r.Diff(t,e);this.deleteBuffer.isLineEmpty()&&this.insertBuffer.isLineEmpty()?(this.flushChangeLines(),this.pushDiffCommonLine(n)):(this.pushDiffChangeLines(n),this.flushChangeLines())}else n<o?this.pushDiffCommonLine(new r.Diff(t,e)):0!==e.length&&this.pushDiffChangeLines(new r.Diff(t,e))}))}else this.pushDiffChangeLines(e)}getLines(){return this.flushChangeLines(),this.lines}}t.default=(e,t)=>{const n=new i(r.DIFF_DELETE,t),o=new i(r.DIFF_INSERT,t),a=new s(n,o);return e.forEach((e=>{switch(e[0]){case r.DIFF_DELETE:n.align(e);break;case r.DIFF_INSERT:o.align(e);break;default:a.align(e)}})),a.getLines()}},"./node_modules/jest-diff/build/index.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"DIFF_DELETE",{enumerable:!0,get:function(){return a.DIFF_DELETE}}),Object.defineProperty(t,"DIFF_EQUAL",{enumerable:!0,get:function(){return a.DIFF_EQUAL}}),Object.defineProperty(t,"DIFF_INSERT",{enumerable:!0,get:function(){return a.DIFF_INSERT}}),Object.defineProperty(t,"Diff",{enumerable:!0,get:function(){return a.Diff}}),t.diff=function(e,t,n){if(Object.is(e,t))return h(c.NO_DIFF_MESSAGE,n);const r=(0,i.getType)(e);let a=r,u=!1;if("object"===r&&"function"==typeof e.asymmetricMatch){if(e.$$typeof!==d.for("jest.asymmetricMatcher"))return null;if("function"!=typeof e.getExpectedType)return null;a=e.getExpectedType(),u="string"===a}if(a!==(0,i.getType)(t))return`  Comparing two different types of values. Expected ${o.default.green(a)} but received ${o.default.red((0,i.getType)(t))}.`;if(u)return null;switch(r){case"string":return(0,l.diffLinesUnified)(e.split("\n"),t.split("\n"),n);case"boolean":case"number":return function(e,t,n){const r=(0,s.format)(e,j),o=(0,s.format)(t,j);return r===o?h(c.NO_DIFF_MESSAGE,n):(0,l.diffLinesUnified)(r.split("\n"),o.split("\n"),n)}(e,t,n);case"map":return O(x(e),x(t),n);case"set":return O(A(e),A(t),n);default:return O(e,t,n)}},Object.defineProperty(t,"diffLinesRaw",{enumerable:!0,get:function(){return l.diffLinesRaw}}),Object.defineProperty(t,"diffLinesUnified",{enumerable:!0,get:function(){return l.diffLinesUnified}}),Object.defineProperty(t,"diffLinesUnified2",{enumerable:!0,get:function(){return l.diffLinesUnified2}}),Object.defineProperty(t,"diffStringsRaw",{enumerable:!0,get:function(){return f.diffStringsRaw}}),Object.defineProperty(t,"diffStringsUnified",{enumerable:!0,get:function(){return f.diffStringsUnified}});var r,o=(r=n("./node_modules/chalk/source/index.js"))&&r.__esModule?r:{default:r},i=n("./node_modules/jest-get-type/build/index.js"),s=n("./node_modules/pretty-format/build/index.js"),a=n("./node_modules/jest-diff/build/cleanupSemantic.js"),c=n("./node_modules/jest-diff/build/constants.js"),l=n("./node_modules/jest-diff/build/diffLines.js"),u=n("./node_modules/jest-diff/build/normalizeDiffOptions.js"),f=n("./node_modules/jest-diff/build/printDiffs.js"),p="undefined"!=typeof globalThis?globalThis:void 0!==p?p:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),d=p["jest-symbol-do-not-touch"]||p.Symbol;const h=(e,t)=>{const{commonColor:n}=(0,u.normalizeDiffOptions)(t);return n(e)},{AsymmetricMatcher:g,DOMCollection:m,DOMElement:y,Immutable:b,ReactElement:v,ReactTestComponent:E}=s.plugins,w=[E,v,y,m,b,g],j={plugins:w},_={callToJSON:!1,maxDepth:10,plugins:w};function x(e){return new Map(Array.from(e.entries()).sort())}function A(e){return new Set(Array.from(e.values()).sort())}function O(e,t,n){let r,o=!1;try{r=S(e,t,R(j,n),n)}catch{o=!0}const i=h(c.NO_DIFF_MESSAGE,n);return void 0!==r&&r!==i||(r=S(e,t,R(_,n),n),r===i||o||(r=h(c.SIMILAR_MESSAGE,n)+"\n\n"+r)),r}function R(e,t){const{compareKeys:n}=(0,u.normalizeDiffOptions)(t);return{...e,compareKeys:n}}function S(e,t,n,r){const o={...n,indent:0},i=(0,s.format)(e,o),a=(0,s.format)(t,o);if(i===a)return h(c.NO_DIFF_MESSAGE,r);{const o=(0,s.format)(e,n),c=(0,s.format)(t,n);return(0,l.diffLinesUnified2)(o.split("\n"),c.split("\n"),i.split("\n"),a.split("\n"),r)}}},"./node_modules/jest-diff/build/joinAlignedDiffs.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.joinAlignedDiffsNoExpand=t.joinAlignedDiffsExpand=void 0;var r=n("./node_modules/jest-diff/build/cleanupSemantic.js");const o=(e,t,n,r,o,i)=>0!==e.length?n(r+" "+((e,t)=>e.replace(/\s+$/,(e=>t(e))))(e,o)):" "!==r?n(r):t&&0!==i.length?n(r+" "+i):"",i=(e,t,{aColor:n,aIndicator:r,changeLineTrailingSpaceColor:i,emptyFirstOrLastLinePlaceholder:s})=>o(e,t,n,r,i,s),s=(e,t,{bColor:n,bIndicator:r,changeLineTrailingSpaceColor:i,emptyFirstOrLastLinePlaceholder:s})=>o(e,t,n,r,i,s),a=(e,t,{commonColor:n,commonIndicator:r,commonLineTrailingSpaceColor:i,emptyFirstOrLastLinePlaceholder:s})=>o(e,t,n,r,i,s),c=(e,t,n,r,{patchColor:o})=>o(`@@ -${e+1},${t-e} +${n+1},${r-n} @@`);t.joinAlignedDiffsNoExpand=(e,t)=>{const n=e.length,o=t.contextLines,l=o+o;let u=n,f=!1,p=0,d=0;for(;d!==n;){const t=d;for(;d!==n&&e[d][0]===r.DIFF_EQUAL;)d+=1;if(t!==d)if(0===t)d>o&&(u-=d-o,f=!0);else if(d===n){const e=d-t;e>o&&(u-=e-o,f=!0)}else{const e=d-t;e>l&&(u-=e-l,p+=1)}for(;d!==n&&e[d][0]!==r.DIFF_EQUAL;)d+=1}const h=0!==p||f;0!==p?u+=p+1:f&&(u+=1);const g=u-1,m=[];let y=0;h&&m.push("");let b=0,v=0,E=0,w=0;const j=e=>{const n=m.length;m.push(a(e,0===n||n===g,t)),E+=1,w+=1},_=e=>{const n=m.length;m.push(i(e,0===n||n===g,t)),E+=1},x=e=>{const n=m.length;m.push(s(e,0===n||n===g,t)),w+=1};for(d=0;d!==n;){let i=d;for(;d!==n&&e[d][0]===r.DIFF_EQUAL;)d+=1;if(i!==d)if(0===i){d>o&&(i=d-o,b=i,v=i,E=b,w=v);for(let t=i;t!==d;t+=1)j(e[t][1])}else if(d===n){const t=d-i>o?i+o:d;for(let n=i;n!==t;n+=1)j(e[n][1])}else{const n=d-i;if(n>l){const r=i+o;for(let t=i;t!==r;t+=1)j(e[t][1]);m[y]=c(b,E,v,w,t),y=m.length,m.push("");const s=n-l;b=E+s,v=w+s,E=b,w=v;for(let t=d-o;t!==d;t+=1)j(e[t][1])}else for(let t=i;t!==d;t+=1)j(e[t][1])}for(;d!==n&&e[d][0]===r.DIFF_DELETE;)_(e[d][1]),d+=1;for(;d!==n&&e[d][0]===r.DIFF_INSERT;)x(e[d][1]),d+=1}return h&&(m[y]=c(b,E,v,w,t)),m.join("\n")},t.joinAlignedDiffsExpand=(e,t)=>e.map(((e,n,o)=>{const c=e[1],l=0===n||n===o.length-1;switch(e[0]){case r.DIFF_DELETE:return i(c,l,t);case r.DIFF_INSERT:return s(c,l,t);default:return a(c,l,t)}})).join("\n")},"./node_modules/jest-diff/build/normalizeDiffOptions.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.normalizeDiffOptions=t.noColor=void 0;var r,o=(r=n("./node_modules/chalk/source/index.js"))&&r.__esModule?r:{default:r};const i=e=>e;t.noColor=i;const s={aAnnotation:"Expected",aColor:o.default.green,aIndicator:"-",bAnnotation:"Received",bColor:o.default.red,bIndicator:"+",changeColor:o.default.inverse,changeLineTrailingSpaceColor:i,commonColor:o.default.dim,commonIndicator:" ",commonLineTrailingSpaceColor:i,compareKeys:void 0,contextLines:5,emptyFirstOrLastLinePlaceholder:"",expand:!0,includeChangeCounts:!1,omitAnnotationLines:!1,patchColor:o.default.yellow};t.normalizeDiffOptions=(e={})=>{return{...s,...e,compareKeys:(n=e.compareKeys,n&&"function"==typeof n?n:s.compareKeys),contextLines:(t=e.contextLines,"number"==typeof t&&Number.isSafeInteger(t)&&t>=0?t:5)};var t,n}},"./node_modules/jest-diff/build/printDiffs.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.diffStringsUnified=t.diffStringsRaw=void 0;var r=n("./node_modules/jest-diff/build/cleanupSemantic.js"),o=n("./node_modules/jest-diff/build/diffLines.js"),i=c(n("./node_modules/jest-diff/build/diffStrings.js")),s=c(n("./node_modules/jest-diff/build/getAlignedDiffs.js")),a=n("./node_modules/jest-diff/build/normalizeDiffOptions.js");function c(e){return e&&e.__esModule?e:{default:e}}t.diffStringsUnified=(e,t,n)=>{if(e!==t&&0!==e.length&&0!==t.length){const i=e.includes("\n")||t.includes("\n"),c=l(i?e+"\n":e,i?t+"\n":t,!0);if(((e,t)=>{if(t){const t=e.length-1;return e.some(((e,n)=>e[0]===r.DIFF_EQUAL&&(n!==t||"\n"!==e[1])))}return e.some((e=>e[0]===r.DIFF_EQUAL))})(c,i)){const e=(0,a.normalizeDiffOptions)(n),t=(0,s.default)(c,e.changeColor);return(0,o.printDiffLines)(t,e)}}return(0,o.diffLinesUnified)(e.split("\n"),t.split("\n"),n)};const l=(e,t,n)=>{const o=(0,i.default)(e,t);return n&&(0,r.cleanupSemantic)(o),o};t.diffStringsRaw=l},"./node_modules/jest-get-type/build/index.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getType=function(e){if(void 0===e)return"undefined";if(null===e)return"null";if(Array.isArray(e))return"array";if("boolean"==typeof e)return"boolean";if("function"==typeof e)return"function";if("number"==typeof e)return"number";if("string"==typeof e)return"string";if("bigint"==typeof e)return"bigint";if("object"==typeof e){if(null!=e){if(e.constructor===RegExp)return"regexp";if(e.constructor===Map)return"map";if(e.constructor===Set)return"set";if(e.constructor===Date)return"date"}return"object"}if("symbol"==typeof e)return"symbol";throw new Error(`value of unknown type: ${e}`)},t.isPrimitive=void 0,t.isPrimitive=e=>Object(e)!==e},"./node_modules/jest-matcher-utils/build/Replaceable.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n("./node_modules/jest-get-type/build/index.js");function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const i=["map","array","object"];t.default=class{constructor(e){if(o(this,"object",void 0),o(this,"type",void 0),this.object=e,this.type=(0,r.getType)(e),!i.includes(this.type))throw new Error(`Type ${this.type} is not support in Replaceable!`)}static isReplaceable(e,t){const n=(0,r.getType)(e);return n===(0,r.getType)(t)&&i.includes(n)}forEach(e){if("object"===this.type){const t=Object.getOwnPropertyDescriptors(this.object);[...Object.keys(t),...Object.getOwnPropertySymbols(t)].filter((e=>t[e].enumerable)).forEach((t=>{e(this.object[t],t,this.object)}))}else this.object.forEach(e)}get(e){return"map"===this.type?this.object.get(e):this.object[e]}set(e,t){"map"===this.type?this.object.set(e,t):this.object[e]=t}}},"./node_modules/jest-matcher-utils/build/deepCyclicCopyReplaceable.js":(e,t,n)=>{var r=n("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function s(e,t=new WeakMap){return"object"!=typeof e||null===e?e:t.has(e)?t.get(e):Array.isArray(e)?function(e,t){const n=new(Object.getPrototypeOf(e).constructor)(e.length),r=e.length;t.set(e,n);for(let o=0;o<r;o++)n[o]=s(e[o],t);return n}(e,t):(e=>e.constructor===Map)(e)?function(e,t){const n=new Map;return t.set(e,n),e.forEach(((e,r)=>{n.set(r,s(e,t))})),n}(e,t):(n=e,i.includes(n.constructor)?e:o.plugins.DOMElement.test(e)?e.cloneNode(!0):function(e,t){const n=Object.create(Object.getPrototypeOf(e)),r=Object.getOwnPropertyDescriptors(e);t.set(e,n);const o=[...Object.keys(r),...Object.getOwnPropertySymbols(r)].reduce(((n,o)=>{const i=r[o].enumerable;return n[o]={configurable:!0,enumerable:i,value:s(e[o],t),writable:!0},n}),{});return Object.defineProperties(n,o)}(e,t));var n};var o=n("./node_modules/pretty-format/build/index.js");const i=[Array,Date,Float32Array,Float64Array,Int16Array,Int32Array,Int8Array,Map,Set,RegExp,Uint16Array,Uint32Array,Uint8Array,Uint8ClampedArray];void 0!==r&&i.push(r)},"./node_modules/jest-matcher-utils/build/index.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringify=t.printWithType=t.printReceived=t.printExpected=t.printDiffOrStringify=t.pluralize=t.matcherHint=t.matcherErrorMessage=t.highlightTrailingWhitespace=t.getLabelPrinter=t.ensureNumbers=t.ensureNoExpected=t.ensureExpectedIsNumber=t.ensureExpectedIsNonNegativeInteger=t.ensureActualIsNumber=t.diff=t.SUGGEST_TO_CONTAIN_EQUAL=t.RECEIVED_COLOR=t.INVERTED_COLOR=t.EXPECTED_COLOR=t.DIM_COLOR=t.BOLD_WEIGHT=void 0;var r=l(n("./node_modules/chalk/source/index.js")),o=n("./node_modules/jest-diff/build/index.js"),i=n("./node_modules/jest-get-type/build/index.js"),s=n("./node_modules/pretty-format/build/index.js"),a=l(n("./node_modules/jest-matcher-utils/build/Replaceable.js")),c=l(n("./node_modules/jest-matcher-utils/build/deepCyclicCopyReplaceable.js"));function l(e){return e&&e.__esModule?e:{default:e}}const{AsymmetricMatcher:u,DOMCollection:f,DOMElement:p,Immutable:d,ReactElement:h,ReactTestComponent:g}=s.plugins,m=[g,h,p,f,d,u],y=r.default.green;t.EXPECTED_COLOR=y;const b=r.default.red;t.RECEIVED_COLOR=b;const v=r.default.inverse;t.INVERTED_COLOR=v;const E=r.default.bold;t.BOLD_WEIGHT=E;const w=r.default.dim;t.DIM_COLOR=w;const j=/\n/,_=["zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen"],x=r.default.dim("Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.");t.SUGGEST_TO_CONTAIN_EQUAL=x;const A=(e,t=10)=>{let n;try{n=(0,s.format)(e,{maxDepth:t,min:!0,plugins:m})}catch{n=(0,s.format)(e,{callToJSON:!1,maxDepth:t,min:!0,plugins:m})}return n.length>=1e4&&t>1?A(e,Math.floor(t/2)):n};t.stringify=A,t.highlightTrailingWhitespace=e=>e.replace(/\s+$/gm,r.default.inverse("$&"));const O=e=>e.replace(/\s+$/gm,(e=>"·".repeat(e.length))),R=e=>b(O(A(e)));t.printReceived=R;const S=e=>y(O(A(e)));t.printExpected=S;const C=(e,t,n)=>{const r=(0,i.getType)(t);return("null"!==r&&"undefined"!==r?`${e} has type:  ${r}\n`:"")+`${e} has value: ${n(t)}`};t.printWithType=C,t.ensureNoExpected=(e,t,n)=>{if(void 0!==e)throw new Error(P(L((n?"":"[.not]")+t,void 0,"",n),"this matcher must not have an expected argument",C("Expected",e,S)))};const T=(e,t,n)=>{if("number"!=typeof e&&"bigint"!=typeof e)throw new Error(P(L((n?"":"[.not]")+t,void 0,void 0,n),`${b("received")} value must be a number or bigint`,C("Received",e,R)))};t.ensureActualIsNumber=T;const M=(e,t,n)=>{if("number"!=typeof e&&"bigint"!=typeof e)throw new Error(P(L((n?"":"[.not]")+t,void 0,void 0,n),`${y("expected")} value must be a number or bigint`,C("Expected",e,S)))};t.ensureExpectedIsNumber=M,t.ensureNumbers=(e,t,n,r)=>{T(e,n,r),M(t,n,r)},t.ensureExpectedIsNonNegativeInteger=(e,t,n)=>{if("number"!=typeof e||!Number.isSafeInteger(e)||e<0)throw new Error(P(L((n?"":"[.not]")+t,void 0,void 0,n),`${y("expected")} value must be a non-negative integer`,C("Expected",e,S)))};const $=(e,t,n)=>e.reduce(((e,r)=>e+(r[0]===o.DIFF_EQUAL?r[1]:r[0]!==t?"":n?v(r[1]):r[1])),"");function k(e,t,n,r){if(!a.default.isReplaceable(e,t))return{replacedExpected:e,replacedReceived:t};if(n.includes(e)||r.includes(t))return{replacedExpected:e,replacedReceived:t};n.push(e),r.push(t);const o=new a.default(e),i=new a.default(t);return o.forEach(((e,t)=>{const s=i.get(t);if(I(e))e.asymmetricMatch(s)&&i.set(t,e);else if(I(s))s.asymmetricMatch(e)&&o.set(t,s);else if(a.default.isReplaceable(e,s)){const a=k(e,s,n,r);o.set(t,a.replacedExpected),i.set(t,a.replacedReceived)}})),{replacedExpected:o.object,replacedReceived:i.object}}function I(e){return"object"===(0,i.getType)(e)&&"function"==typeof e.asymmetricMatch}t.printDiffOrStringify=(e,t,n,s,a)=>{if("string"==typeof e&&"string"==typeof t&&0!==e.length&&0!==t.length&&e.length<=2e4&&t.length<=2e4&&e!==t){if(e.includes("\n")||t.includes("\n"))return(0,o.diffStringsUnified)(e,t,{aAnnotation:n,bAnnotation:s,changeLineTrailingSpaceColor:r.default.bgYellow,commonLineTrailingSpaceColor:r.default.bgYellow,emptyFirstOrLastLinePlaceholder:"↵",expand:a,includeChangeCounts:!0});const i=(0,o.diffStringsRaw)(e,t,!0),c=i.some((e=>e[0]===o.DIFF_EQUAL)),l=N(n,s);return l(n)+S($(i,o.DIFF_DELETE,c))+"\n"+(l(s)+R($(i,o.DIFF_INSERT,c)))}if(((e,t)=>{const n=(0,i.getType)(e),r=(0,i.getType)(t);return n===r&&((0,i.isPrimitive)(e)?"string"==typeof e&&"string"==typeof t&&0!==e.length&&0!==t.length&&(j.test(e)||j.test(t)):!("date"===n||"function"===n||"regexp"===n||e instanceof Error&&t instanceof Error||"object"===r&&"function"==typeof t.asymmetricMatch))})(e,t)){const{replacedExpected:r,replacedReceived:i}=k((0,c.default)(e),(0,c.default)(t),[],[]),l=(0,o.diff)(r,i,{aAnnotation:n,bAnnotation:s,expand:a,includeChangeCounts:!0});if("string"==typeof l&&l.includes("- "+n)&&l.includes("+ "+s))return l}const l=N(n,s);return l(n)+S(e)+"\n"+(l(s)+(A(e)===A(t)?"serializes to the same string":R(t)))},t.diff=(e,t,n)=>{return i=t,"number"==typeof(r=e)&&"number"==typeof i||"bigint"==typeof r&&"bigint"==typeof i||"boolean"==typeof r&&"boolean"==typeof i?null:(0,o.diff)(e,t,n);var r,i},t.pluralize=(e,t)=>(_[t]||t)+" "+e+(1===t?"":"s");const N=(...e)=>{const t=e.reduce(((e,t)=>t.length>e?t.length:e),0);return e=>`${e}: ${" ".repeat(t-e.length)}`};t.getLabelPrinter=N;const P=(e,t,n)=>`${e}\n\n${r.default.bold("Matcher error")}: ${t}${"string"==typeof n?"\n\n"+n:""}`;t.matcherErrorMessage=P;const L=(e,t="received",n="expected",r={})=>{const{comment:o="",expectedColor:i=y,isDirectExpectCall:s=!1,isNot:a=!1,promise:c="",receivedColor:l=b,secondArgument:u="",secondArgumentColor:f=y}=r;let p="",d="expect";return s||""===t||(p+=w(d+"(")+l(t),d=")"),""!==c&&(p+=w(d+".")+c,d=""),a&&(p+=w(d+".")+"not",d=""),e.includes(".")?d+=e:(p+=w(d+".")+e,d=""),""===n?d+="()":(p+=w(d+"(")+i(n),u&&(p+=w(", ")+f(u)),d=")"),""!==o&&(d+=" // "+o),""!==d&&(p+=w(d)),p};t.matcherHint=L},"./node_modules/jest-message-util/build/index.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.separateMessageFromStack=t.getTopFrame=t.getStackTraceLines=t.formatStackTrace=t.formatResultsErrors=t.formatExecError=void 0;var r=h(n("./node_modules/path-browserify/index.js")),o=n("./node_modules/url/url.js"),i=n("./node_modules/@babel/code-frame/lib/index.js"),s=p(n("./node_modules/chalk/source/index.js")),a=h(n("?4d29")),c=p(n("./node_modules/micromatch/index.js")),l=p(n("./node_modules/slash/index.js")),u=p(n("./node_modules/stack-utils/index.js")),f=n("./node_modules/pretty-format/build/index.js");function p(e){return e&&e.__esModule?e:{default:e}}function d(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(d=function(e){return e?n:t})(e)}function h(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=d(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var s=o?Object.getOwnPropertyDescriptor(e,i):null;s&&(s.get||s.set)?Object.defineProperty(r,i,s):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}var g,m=(g="undefined"!=typeof globalThis?globalThis:void 0!==g?g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")())["jest-symbol-do-not-touch"]||g.Symbol,y=(m=(g="undefined"!=typeof globalThis?globalThis:void 0!==g?g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")())["jest-symbol-do-not-touch"]||g.Symbol,(g="undefined"!=typeof globalThis?globalThis:void 0!==g?g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")())[m.for("jest-native-read-file")]||a.readFileSync);const b=new u.default({cwd:"something which does not exist"});let v=[];try{v=u.default.nodeInternals()}catch{}const E=`${r.sep}node_modules${r.sep}`,w=`${r.sep}jest${r.sep}packages${r.sep}`,j=/^\s+at(?:(?:.jasmine\-)|\s+jasmine\.buildExpectationResult)/,_=/^\s+at.*?jest(-.*?)?(\/|\\)(build|node_modules|packages)(\/|\\)/,x=/^\s+at <anonymous>.*$/,A=/^\s+at (new )?Promise \(<anonymous>\).*$/,O=/^\s+at Generator.next \(<anonymous>\).*$/,R=/^\s+at next \(native\).*$/,S="    ",C=s.default.bold("● "),T=s.default.dim,M=/\s*at.*\(?(\:\d*\:\d*|native)\)?/,$=/^(?!$)/gm,k=(e,t)=>e.replace($,t),I=e=>(e||"").trim(),N=/^\s*$/;function P(e){return e.includes("ReferenceError: document is not defined")||e.includes("ReferenceError: window is not defined")||e.includes("ReferenceError: navigator is not defined")?L(e,"jsdom"):e.includes(".unref is not a function")?L(e,"node"):e}function L(e,t){return s.default.bold.red(`The error below may be caused by using the wrong test environment, see ${s.default.dim.underline("https://jestjs.io/docs/configuration#testenvironment-string")}.\nConsider using the "${t}" test environment.\n\n`)+e}t.formatExecError=(e,t,n,r,o)=>{let i,s;e&&"number"!=typeof e||((e=new Error(`Expected an Error, but "${String(e)}" was thrown`)).stack=""),"string"!=typeof e&&e?(i=e.message,s="string"==typeof e.stack?e.stack:`thrown: ${(0,f.format)(e,{maxDepth:3})}`):(e||(e="EMPTY ERROR"),i="",s=e);const a=q(s||"");let c;return s=a.stack,a.message.includes(I(i))&&(i=a.message),i=P(i),i=k(i,S),s=s&&!n.noStackTrace?"\n"+F(s,t,n,r):"",("string"!=typeof s||N.test(i)&&N.test(s))&&(i=`thrown: ${(0,f.format)(e,{maxDepth:3})}`),c=o?` ${i.trim()}`:`Test suite failed to run\n\n${i}`,"  "+C+c+s+"\n"};const B=(e,t={noCodeFrame:!1,noStackTrace:!1})=>((e,t)=>{let n=0;return e.filter((e=>!(x.test(e)||A.test(e)||O.test(e)||R.test(e)||v.some((t=>t.test(e)))||M.test(e)&&(j.test(e)||1!=++n&&(t.noStackTrace||_.test(e))))))})(e.split(/\n/),t);t.getStackTraceLines=B;const D=e=>{for(const t of e){if(t.includes(E)||t.includes(w))continue;const e=b.parseLine(t.trim());if(e&&e.file)return e.file.startsWith("file://")&&(e.file=(0,l.default)((0,o.fileURLToPath)(e.file))),e}return null};t.getTopFrame=D;const F=(e,t,n,o)=>{const a=B(e,n);let u="";const f=o?(0,l.default)(r.relative(t.rootDir,o)):null;if(!n.noStackTrace&&!n.noCodeFrame){const e=D(a);if(e){const{column:t,file:n,line:o}=e;if(o&&n&&r.isAbsolute(n)){let e;try{e=y(n,"utf8"),u=((e,t,n)=>{let r=(0,i.codeFrameColumns)(e,{start:{column:n,line:t}},{highlightCode:!0});return r=k(r,S),r=`\n${r}\n`,r})(e,o,t)}catch{}}}}const p=a.filter(Boolean).map((e=>{return"      "+((e,t,n)=>{const o=n.match(/(^\s*at .*?\(?)([^()]+)(:[0-9]+:[0-9]+\)?.*$)/);if(!o)return n;let i=(0,l.default)(r.relative(e.rootDir,o[2]));return(e.testMatch&&e.testMatch.length&&(0,c.default)([i],e.testMatch).length>0||i===t)&&(i=s.default.reset.cyan(i)),T(o[1])+i+T(o[3])})(t,f,(n=e).match(M)?I(n):n);var n})).join("\n");return u?`${u}\n${p}`:`\n${p}`};t.formatStackTrace=F,t.formatResultsErrors=(e,t,n,r)=>{const o=e.reduce(((e,t)=>(t.failureMessages.forEach((n=>{e.push({content:P(n),result:t})})),e)),[]);return o.length?o.map((({result:e,content:o})=>{let{message:i,stack:a}=q(o);return a=n.noStackTrace?"":T(F(a,t,n,r))+"\n",i=k(i,S),s.default.bold.red("  "+C+e.ancestorTitles.join(" › ")+(e.ancestorTitles.length?" › ":"")+e.title)+"\n\n"+i+"\n"+a})).join("\n"):null};const H=/^Error:?\s*$/,U=e=>e.split("\n").filter((e=>!H.test(e))).join("\n").trimRight(),q=e=>{if(!e)return{message:"",stack:""};const t=e.match(/^(?:Error: )?([\s\S]*?(?=\n\s*at\s.*:\d*:\d*)|\s*.*)([\s\S]*)$/);if(!t)throw new Error("If you hit this error, the regex above is buggy.");return{message:U(t[1]),stack:U(t[2])}};t.separateMessageFromStack=q},"./node_modules/js-tokens/index.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=/((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},"./node_modules/micromatch/index.js":(e,t,n)=>{const r=n("./node_modules/util/util.js"),o=n("./node_modules/braces/index.js"),i=n("./node_modules/picomatch/index.js"),s=n("./node_modules/picomatch/lib/utils.js"),a=e=>""===e||"./"===e,c=(e,t,n)=>{t=[].concat(t),e=[].concat(e);let r=new Set,o=new Set,s=new Set,a=0,c=e=>{s.add(e.output),n&&n.onResult&&n.onResult(e)};for(let s=0;s<t.length;s++){let l=i(String(t[s]),{...n,onResult:c},!0),u=l.state.negated||l.state.negatedExtglob;u&&a++;for(let t of e){let e=l(t,!0);(u?!e.isMatch:e.isMatch)&&(u?r.add(e.output):(r.delete(e.output),o.add(e.output)))}}let l=(a===t.length?[...s]:[...o]).filter((e=>!r.has(e)));if(n&&0===l.length){if(!0===n.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===n.nonull||!0===n.nullglob)return n.unescape?t.map((e=>e.replace(/\\/g,""))):t}return l};c.match=c,c.matcher=(e,t)=>i(e,t),c.any=c.isMatch=(e,t,n)=>i(t,n)(e),c.not=(e,t,n={})=>{t=[].concat(t).map(String);let r=new Set,o=[],i=c(e,t,{...n,onResult:e=>{n.onResult&&n.onResult(e),o.push(e.output)}});for(let e of o)i.includes(e)||r.add(e);return[...r]},c.contains=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${r.inspect(e)}"`);if(Array.isArray(t))return t.some((t=>c.contains(e,t,n)));if("string"==typeof t){if(a(e)||a(t))return!1;if(e.includes(t)||e.startsWith("./")&&e.slice(2).includes(t))return!0}return c.isMatch(e,t,{...n,contains:!0})},c.matchKeys=(e,t,n)=>{if(!s.isObject(e))throw new TypeError("Expected the first argument to be an object");let r=c(Object.keys(e),t,n),o={};for(let t of r)o[t]=e[t];return o},c.some=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=i(String(e),n);if(r.some((e=>t(e))))return!0}return!1},c.every=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=i(String(e),n);if(!r.every((e=>t(e))))return!1}return!0},c.all=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${r.inspect(e)}"`);return[].concat(t).every((t=>i(t,n)(e)))},c.capture=(e,t,n)=>{let r=s.isWindows(n),o=i.makeRe(String(e),{...n,capture:!0}).exec(r?s.toPosixSlashes(t):t);if(o)return o.slice(1).map((e=>void 0===e?"":e))},c.makeRe=(...e)=>i.makeRe(...e),c.scan=(...e)=>i.scan(...e),c.parse=(e,t)=>{let n=[];for(let r of[].concat(e||[]))for(let e of o(String(r),t))n.push(i.parse(e,t));return n},c.braces=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return t&&!0===t.nobrace||!/\{.*\}/.test(e)?[e]:o(e,t)},c.braceExpand=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return c.braces(e,{...t,expand:!0})},e.exports=c},"./node_modules/object-is/implementation.js":e=>{var t=function(e){return e!=e};e.exports=function(e,n){return 0===e&&0===n?1/e==1/n:e===n||!(!t(e)||!t(n))}},"./node_modules/object-is/index.js":(e,t,n)=>{var r=n("./node_modules/define-properties/index.js"),o=n("./node_modules/call-bind/index.js"),i=n("./node_modules/object-is/implementation.js"),s=n("./node_modules/object-is/polyfill.js"),a=n("./node_modules/object-is/shim.js"),c=o(s(),Object);r(c,{getPolyfill:s,implementation:i,shim:a}),e.exports=c},"./node_modules/object-is/polyfill.js":(e,t,n)=>{var r=n("./node_modules/object-is/implementation.js");e.exports=function(){return"function"==typeof Object.is?Object.is:r}},"./node_modules/object-is/shim.js":(e,t,n)=>{var r=n("./node_modules/object-is/polyfill.js"),o=n("./node_modules/define-properties/index.js");e.exports=function(){var e=r();return o(Object,{is:e},{is:function(){return Object.is!==e}}),e}},"./node_modules/object-keys/implementation.js":(e,t,n)=>{var r;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,s=n("./node_modules/object-keys/isArguments.js"),a=Object.prototype.propertyIsEnumerable,c=!a.call({toString:null},"toString"),l=a.call((function(){}),"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(e){var t=e.constructor;return t&&t.prototype===e},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},d=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!p["$"+e]&&o.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{f(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();r=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===i.call(e),r=s(e),a=t&&"[object String]"===i.call(e),p=[];if(!t&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var h=l&&n;if(a&&e.length>0&&!o.call(e,0))for(var g=0;g<e.length;++g)p.push(String(g));if(r&&e.length>0)for(var m=0;m<e.length;++m)p.push(String(m));else for(var y in e)h&&"prototype"===y||!o.call(e,y)||p.push(String(y));if(c)for(var b=function(e){if("undefined"==typeof window||!d)return f(e);try{return f(e)}catch(e){return!1}}(e),v=0;v<u.length;++v)b&&"constructor"===u[v]||!o.call(e,u[v])||p.push(u[v]);return p}}e.exports=r},"./node_modules/object-keys/index.js":(e,t,n)=>{var r=Array.prototype.slice,o=n("./node_modules/object-keys/isArguments.js"),i=Object.keys,s=i?function(e){return i(e)}:n("./node_modules/object-keys/implementation.js"),a=Object.keys;s.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return o(e)?a(r.call(e)):a(e)})}else Object.keys=s;return Object.keys||s},e.exports=s},"./node_modules/object-keys/isArguments.js":e=>{var t=Object.prototype.toString;e.exports=function(e){var n=t.call(e),r="[object Arguments]"===n;return r||(r="[object Array]"!==n&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),r}},"./node_modules/path-browserify/index.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js");function o(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function i(e,t){for(var n,r="",o=0,i=-1,s=0,a=0;a<=e.length;++a){if(a<e.length)n=e.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(i===a-1||1===s);else if(i!==a-1&&2===s){if(r.length<2||2!==o||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2))if(r.length>2){var c=r.lastIndexOf("/");if(c!==r.length-1){-1===c?(r="",o=0):o=(r=r.slice(0,c)).length-1-r.lastIndexOf("/"),i=a,s=0;continue}}else if(2===r.length||1===r.length){r="",o=0,i=a,s=0;continue}t&&(r.length>0?r+="/..":r="..",o=2)}else r.length>0?r+="/"+e.slice(i+1,a):r=e.slice(i+1,a),o=a-i-1;i=a,s=0}else 46===n&&-1!==s?++s:s=-1}return r}var s={resolve:function(){for(var e,t="",n=!1,s=arguments.length-1;s>=-1&&!n;s--){var a;s>=0?a=arguments[s]:(void 0===e&&(e=r.cwd()),a=e),o(a),0!==a.length&&(t=a+"/"+t,n=47===a.charCodeAt(0))}return t=i(t,!n),n?t.length>0?"/"+t:"/":t.length>0?t:"."},normalize:function(e){if(o(e),0===e.length)return".";var t=47===e.charCodeAt(0),n=47===e.charCodeAt(e.length-1);return 0!==(e=i(e,!t)).length||t||(e="."),e.length>0&&n&&(e+="/"),t?"/"+e:e},isAbsolute:function(e){return o(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,t=0;t<arguments.length;++t){var n=arguments[t];o(n),n.length>0&&(void 0===e?e=n:e+="/"+n)}return void 0===e?".":s.normalize(e)},relative:function(e,t){if(o(e),o(t),e===t)return"";if((e=s.resolve(e))===(t=s.resolve(t)))return"";for(var n=1;n<e.length&&47===e.charCodeAt(n);++n);for(var r=e.length,i=r-n,a=1;a<t.length&&47===t.charCodeAt(a);++a);for(var c=t.length-a,l=i<c?i:c,u=-1,f=0;f<=l;++f){if(f===l){if(c>l){if(47===t.charCodeAt(a+f))return t.slice(a+f+1);if(0===f)return t.slice(a+f)}else i>l&&(47===e.charCodeAt(n+f)?u=f:0===f&&(u=0));break}var p=e.charCodeAt(n+f);if(p!==t.charCodeAt(a+f))break;47===p&&(u=f)}var d="";for(f=n+u+1;f<=r;++f)f!==r&&47!==e.charCodeAt(f)||(0===d.length?d+="..":d+="/..");return d.length>0?d+t.slice(a+u):(a+=u,47===t.charCodeAt(a)&&++a,t.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(o(e),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,i=!0,s=e.length-1;s>=1;--s)if(47===(t=e.charCodeAt(s))){if(!i){r=s;break}}else i=!1;return-1===r?n?"/":".":n&&1===r?"//":e.slice(0,r)},basename:function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');o(e);var n,r=0,i=-1,s=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t.length===e.length&&t===e)return"";var a=t.length-1,c=-1;for(n=e.length-1;n>=0;--n){var l=e.charCodeAt(n);if(47===l){if(!s){r=n+1;break}}else-1===c&&(s=!1,c=n+1),a>=0&&(l===t.charCodeAt(a)?-1==--a&&(i=n):(a=-1,i=c))}return r===i?i=c:-1===i&&(i=e.length),e.slice(r,i)}for(n=e.length-1;n>=0;--n)if(47===e.charCodeAt(n)){if(!s){r=n+1;break}}else-1===i&&(s=!1,i=n+1);return-1===i?"":e.slice(r,i)},extname:function(e){o(e);for(var t=-1,n=0,r=-1,i=!0,s=0,a=e.length-1;a>=0;--a){var c=e.charCodeAt(a);if(47!==c)-1===r&&(i=!1,r=a+1),46===c?-1===t?t=a:1!==s&&(s=1):-1!==t&&(s=-1);else if(!i){n=a+1;break}}return-1===t||-1===r||0===s||1===s&&t===r-1&&t===n+1?"":e.slice(t,r)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var n=t.dir||t.root,r=t.base||(t.name||"")+(t.ext||"");return n?n===t.root?n+r:n+"/"+r:r}(0,e)},parse:function(e){o(e);var t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;var n,r=e.charCodeAt(0),i=47===r;i?(t.root="/",n=1):n=0;for(var s=-1,a=0,c=-1,l=!0,u=e.length-1,f=0;u>=n;--u)if(47!==(r=e.charCodeAt(u)))-1===c&&(l=!1,c=u+1),46===r?-1===s?s=u:1!==f&&(f=1):-1!==s&&(f=-1);else if(!l){a=u+1;break}return-1===s||-1===c||0===f||1===f&&s===c-1&&s===a+1?-1!==c&&(t.base=t.name=0===a&&i?e.slice(1,c):e.slice(a,c)):(0===a&&i?(t.name=e.slice(1,s),t.base=e.slice(1,c)):(t.name=e.slice(a,s),t.base=e.slice(a,c)),t.ext=e.slice(s,c)),a>0?t.dir=e.slice(0,a-1):i&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};s.posix=s,e.exports=s},"./node_modules/picomatch/index.js":(e,t,n)=>{e.exports=n("./node_modules/picomatch/lib/picomatch.js")},"./node_modules/picomatch/lib/constants.js":(e,t,n)=>{const r=n("./node_modules/path-browserify/index.js"),u="\\.{1,2}(?:\\/|$)",f={DOT_LITERAL:"\\.",PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:"\\/",ONE_CHAR:"(?=.)",QMARK:"[^/]",END_ANCHOR:"(?:\\/|$)",DOTS_SLASH:u,NO_DOT:"(?!\\.)",NO_DOTS:`(?!(?:^|\\/)${u})`,NO_DOT_SLASH:"(?!\\.{0,1}(?:\\/|$))",NO_DOTS_SLASH:`(?!${u})`,QMARK_NO_DOT:"[^.\\/]",STAR:"[^/]*?",START_ANCHOR:"(?:^|\\/)"},p={...f,SLASH_LITERAL:"[\\\\/]",QMARK:"[^\\\\/]",STAR:"[^\\\\/]*?",DOTS_SLASH:"\\.{1,2}(?:[\\\\/]|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|[\\\\/])\\.{1,2}(?:[\\\\/]|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:[\\\\/]|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:[\\\\/]|$))",QMARK_NO_DOT:"[^.\\\\/]",START_ANCHOR:"(?:^|[\\\\/])",END_ANCHOR:"(?:[\\\\/]|$)"};e.exports={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:r.sep,extglobChars:e=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${e.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:e=>!0===e?p:f}},"./node_modules/picomatch/lib/parse.js":(e,t,n)=>{const r=n("./node_modules/picomatch/lib/constants.js"),o=n("./node_modules/picomatch/lib/utils.js"),{MAX_LENGTH:i,POSIX_REGEX_SOURCE:s,REGEX_NON_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_BACKREF:c,REPLACEMENTS:l}=r,u=(e,t)=>{if("function"==typeof t.expandRange)return t.expandRange(...e,t);e.sort();const n=`[${e.join("-")}]`;try{new RegExp(n)}catch(t){return e.map((e=>o.escapeRegex(e))).join("..")}return n},f=(e,t)=>`Missing ${e}: "${t}" - use "\\\\${t}" to match literal characters`,p=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");e=l[e]||e;const n={...t},p="number"==typeof n.maxLength?Math.min(i,n.maxLength):i;let d=e.length;if(d>p)throw new SyntaxError(`Input length: ${d}, exceeds maximum allowed length: ${p}`);const h={type:"bos",value:"",output:n.prepend||""},g=[h],m=n.capture?"":"?:",y=o.isWindows(t),b=r.globChars(y),v=r.extglobChars(b),{DOT_LITERAL:E,PLUS_LITERAL:w,SLASH_LITERAL:j,ONE_CHAR:_,DOTS_SLASH:x,NO_DOT:A,NO_DOT_SLASH:O,NO_DOTS_SLASH:R,QMARK:S,QMARK_NO_DOT:C,STAR:T,START_ANCHOR:M}=b,$=e=>`(${m}(?:(?!${M}${e.dot?x:E}).)*?)`,k=n.dot?"":A,I=n.dot?S:C;let N=!0===n.bash?$(n):T;n.capture&&(N=`(${N})`),"boolean"==typeof n.noext&&(n.noextglob=n.noext);const P={input:e,index:-1,start:0,dot:!0===n.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:g};e=o.removePrefix(e,P),d=e.length;const L=[],B=[],D=[];let F,H=h;const U=()=>P.index===d-1,q=P.peek=(t=1)=>e[P.index+t],W=P.advance=()=>e[++P.index]||"",G=()=>e.slice(P.index+1),z=(e="",t=0)=>{P.consumed+=e,P.index+=t},V=e=>{P.output+=null!=e.output?e.output:e.value,z(e.value)},K=()=>{let e=1;for(;"!"===q()&&("("!==q(2)||"?"===q(3));)W(),P.start++,e++;return e%2!=0&&(P.negated=!0,P.start++,!0)},Q=e=>{P[e]++,D.push(e)},X=e=>{P[e]--,D.pop()},Y=e=>{if("globstar"===H.type){const t=P.braces>0&&("comma"===e.type||"brace"===e.type),n=!0===e.extglob||L.length&&("pipe"===e.type||"paren"===e.type);"slash"===e.type||"paren"===e.type||t||n||(P.output=P.output.slice(0,-H.output.length),H.type="star",H.value="*",H.output=N,P.output+=H.output)}if(L.length&&"paren"!==e.type&&(L[L.length-1].inner+=e.value),(e.value||e.output)&&V(e),H&&"text"===H.type&&"text"===e.type)return H.value+=e.value,void(H.output=(H.output||"")+e.value);e.prev=H,g.push(e),H=e},Z=(e,t)=>{const r={...v[t],conditions:1,inner:""};r.prev=H,r.parens=P.parens,r.output=P.output;const o=(n.capture?"(":"")+r.open;Q("parens"),Y({type:e,value:t,output:P.output?"":_}),Y({type:"paren",extglob:!0,value:W(),output:o}),L.push(r)},J=e=>{let t,r=e.close+(n.capture?")":"");if("negate"===e.type){let o=N;e.inner&&e.inner.length>1&&e.inner.includes("/")&&(o=$(n)),(o!==N||U()||/^\)+$/.test(G()))&&(r=e.close=`)$))${o}`),e.inner.includes("*")&&(t=G())&&/^\.[^\\/.]+$/.test(t)&&(r=e.close=`)${t})${o})`),"bos"===e.prev.type&&(P.negatedExtglob=!0)}Y({type:"paren",extglob:!0,value:F,output:r}),X("parens")};if(!1!==n.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(e)){let r=!1,i=e.replace(c,((e,t,n,o,i,s)=>"\\"===o?(r=!0,e):"?"===o?t?t+o+(i?S.repeat(i.length):""):0===s?I+(i?S.repeat(i.length):""):S.repeat(n.length):"."===o?E.repeat(n.length):"*"===o?t?t+o+(i?N:""):N:t?e:`\\${e}`));return!0===r&&(i=!0===n.unescape?i.replace(/\\/g,""):i.replace(/\\+/g,(e=>e.length%2==0?"\\\\":e?"\\":""))),i===e&&!0===n.contains?(P.output=e,P):(P.output=o.wrapOutput(i,P,t),P)}for(;!U();){if(F=W(),"\0"===F)continue;if("\\"===F){const e=q();if("/"===e&&!0!==n.bash)continue;if("."===e||";"===e)continue;if(!e){F+="\\",Y({type:"text",value:F});continue}const t=/^\\+/.exec(G());let r=0;if(t&&t[0].length>2&&(r=t[0].length,P.index+=r,r%2!=0&&(F+="\\")),!0===n.unescape?F=W():F+=W(),0===P.brackets){Y({type:"text",value:F});continue}}if(P.brackets>0&&("]"!==F||"["===H.value||"[^"===H.value)){if(!1!==n.posix&&":"===F){const e=H.value.slice(1);if(e.includes("[")&&(H.posix=!0,e.includes(":"))){const e=H.value.lastIndexOf("["),t=H.value.slice(0,e),n=H.value.slice(e+2),r=s[n];if(r){H.value=t+r,P.backtrack=!0,W(),h.output||1!==g.indexOf(H)||(h.output=_);continue}}}("["===F&&":"!==q()||"-"===F&&"]"===q())&&(F=`\\${F}`),"]"!==F||"["!==H.value&&"[^"!==H.value||(F=`\\${F}`),!0===n.posix&&"!"===F&&"["===H.value&&(F="^"),H.value+=F,V({value:F});continue}if(1===P.quotes&&'"'!==F){F=o.escapeRegex(F),H.value+=F,V({value:F});continue}if('"'===F){P.quotes=1===P.quotes?0:1,!0===n.keepQuotes&&Y({type:"text",value:F});continue}if("("===F){Q("parens"),Y({type:"paren",value:F});continue}if(")"===F){if(0===P.parens&&!0===n.strictBrackets)throw new SyntaxError(f("opening","("));const e=L[L.length-1];if(e&&P.parens===e.parens+1){J(L.pop());continue}Y({type:"paren",value:F,output:P.parens?")":"\\)"}),X("parens");continue}if("["===F){if(!0!==n.nobracket&&G().includes("]"))Q("brackets");else{if(!0!==n.nobracket&&!0===n.strictBrackets)throw new SyntaxError(f("closing","]"));F=`\\${F}`}Y({type:"bracket",value:F});continue}if("]"===F){if(!0===n.nobracket||H&&"bracket"===H.type&&1===H.value.length){Y({type:"text",value:F,output:`\\${F}`});continue}if(0===P.brackets){if(!0===n.strictBrackets)throw new SyntaxError(f("opening","["));Y({type:"text",value:F,output:`\\${F}`});continue}X("brackets");const e=H.value.slice(1);if(!0===H.posix||"^"!==e[0]||e.includes("/")||(F=`/${F}`),H.value+=F,V({value:F}),!1===n.literalBrackets||o.hasRegexChars(e))continue;const t=o.escapeRegex(H.value);if(P.output=P.output.slice(0,-H.value.length),!0===n.literalBrackets){P.output+=t,H.value=t;continue}H.value=`(${m}${t}|${H.value})`,P.output+=H.value;continue}if("{"===F&&!0!==n.nobrace){Q("braces");const e={type:"brace",value:F,output:"(",outputIndex:P.output.length,tokensIndex:P.tokens.length};B.push(e),Y(e);continue}if("}"===F){const e=B[B.length-1];if(!0===n.nobrace||!e){Y({type:"text",value:F,output:F});continue}let t=")";if(!0===e.dots){const e=g.slice(),r=[];for(let t=e.length-1;t>=0&&(g.pop(),"brace"!==e[t].type);t--)"dots"!==e[t].type&&r.unshift(e[t].value);t=u(r,n),P.backtrack=!0}if(!0!==e.comma&&!0!==e.dots){const n=P.output.slice(0,e.outputIndex),r=P.tokens.slice(e.tokensIndex);e.value=e.output="\\{",F=t="\\}",P.output=n;for(const e of r)P.output+=e.output||e.value}Y({type:"brace",value:F,output:t}),X("braces"),B.pop();continue}if("|"===F){L.length>0&&L[L.length-1].conditions++,Y({type:"text",value:F});continue}if(","===F){let e=F;const t=B[B.length-1];t&&"braces"===D[D.length-1]&&(t.comma=!0,e="|"),Y({type:"comma",value:F,output:e});continue}if("/"===F){if("dot"===H.type&&P.index===P.start+1){P.start=P.index+1,P.consumed="",P.output="",g.pop(),H=h;continue}Y({type:"slash",value:F,output:j});continue}if("."===F){if(P.braces>0&&"dot"===H.type){"."===H.value&&(H.output=E);const e=B[B.length-1];H.type="dots",H.output+=F,H.value+=F,e.dots=!0;continue}if(P.braces+P.parens===0&&"bos"!==H.type&&"slash"!==H.type){Y({type:"text",value:F,output:E});continue}Y({type:"dot",value:F,output:E});continue}if("?"===F){if((!H||"("!==H.value)&&!0!==n.noextglob&&"("===q()&&"?"!==q(2)){Z("qmark",F);continue}if(H&&"paren"===H.type){const e=q();let t=F;if("<"===e&&!o.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===H.value&&!/[!=<:]/.test(e)||"<"===e&&!/<([!=]|\w+>)/.test(G()))&&(t=`\\${F}`),Y({type:"text",value:F,output:t});continue}if(!0!==n.dot&&("slash"===H.type||"bos"===H.type)){Y({type:"qmark",value:F,output:C});continue}Y({type:"qmark",value:F,output:S});continue}if("!"===F){if(!0!==n.noextglob&&"("===q()&&("?"!==q(2)||!/[!=<:]/.test(q(3)))){Z("negate",F);continue}if(!0!==n.nonegate&&0===P.index){K();continue}}if("+"===F){if(!0!==n.noextglob&&"("===q()&&"?"!==q(2)){Z("plus",F);continue}if(H&&"("===H.value||!1===n.regex){Y({type:"plus",value:F,output:w});continue}if(H&&("bracket"===H.type||"paren"===H.type||"brace"===H.type)||P.parens>0){Y({type:"plus",value:F});continue}Y({type:"plus",value:w});continue}if("@"===F){if(!0!==n.noextglob&&"("===q()&&"?"!==q(2)){Y({type:"at",extglob:!0,value:F,output:""});continue}Y({type:"text",value:F});continue}if("*"!==F){"$"!==F&&"^"!==F||(F=`\\${F}`);const e=a.exec(G());e&&(F+=e[0],P.index+=e[0].length),Y({type:"text",value:F});continue}if(H&&("globstar"===H.type||!0===H.star)){H.type="star",H.star=!0,H.value+=F,H.output=N,P.backtrack=!0,P.globstar=!0,z(F);continue}let t=G();if(!0!==n.noextglob&&/^\([^?]/.test(t)){Z("star",F);continue}if("star"===H.type){if(!0===n.noglobstar){z(F);continue}const r=H.prev,o=r.prev,i="slash"===r.type||"bos"===r.type,s=o&&("star"===o.type||"globstar"===o.type);if(!0===n.bash&&(!i||t[0]&&"/"!==t[0])){Y({type:"star",value:F,output:""});continue}const a=P.braces>0&&("comma"===r.type||"brace"===r.type),c=L.length&&("pipe"===r.type||"paren"===r.type);if(!i&&"paren"!==r.type&&!a&&!c){Y({type:"star",value:F,output:""});continue}for(;"/**"===t.slice(0,3);){const n=e[P.index+4];if(n&&"/"!==n)break;t=t.slice(3),z("/**",3)}if("bos"===r.type&&U()){H.type="globstar",H.value+=F,H.output=$(n),P.output=H.output,P.globstar=!0,z(F);continue}if("slash"===r.type&&"bos"!==r.prev.type&&!s&&U()){P.output=P.output.slice(0,-(r.output+H.output).length),r.output=`(?:${r.output}`,H.type="globstar",H.output=$(n)+(n.strictSlashes?")":"|$)"),H.value+=F,P.globstar=!0,P.output+=r.output+H.output,z(F);continue}if("slash"===r.type&&"bos"!==r.prev.type&&"/"===t[0]){const e=void 0!==t[1]?"|$":"";P.output=P.output.slice(0,-(r.output+H.output).length),r.output=`(?:${r.output}`,H.type="globstar",H.output=`${$(n)}${j}|${j}${e})`,H.value+=F,P.output+=r.output+H.output,P.globstar=!0,z(F+W()),Y({type:"slash",value:"/",output:""});continue}if("bos"===r.type&&"/"===t[0]){H.type="globstar",H.value+=F,H.output=`(?:^|${j}|${$(n)}${j})`,P.output=H.output,P.globstar=!0,z(F+W()),Y({type:"slash",value:"/",output:""});continue}P.output=P.output.slice(0,-H.output.length),H.type="globstar",H.output=$(n),H.value+=F,P.output+=H.output,P.globstar=!0,z(F);continue}const r={type:"star",value:F,output:N};!0!==n.bash?!H||"bracket"!==H.type&&"paren"!==H.type||!0!==n.regex?(P.index!==P.start&&"slash"!==H.type&&"dot"!==H.type||("dot"===H.type?(P.output+=O,H.output+=O):!0===n.dot?(P.output+=R,H.output+=R):(P.output+=k,H.output+=k),"*"!==q()&&(P.output+=_,H.output+=_)),Y(r)):(r.output=F,Y(r)):(r.output=".*?","bos"!==H.type&&"slash"!==H.type||(r.output=k+r.output),Y(r))}for(;P.brackets>0;){if(!0===n.strictBrackets)throw new SyntaxError(f("closing","]"));P.output=o.escapeLast(P.output,"["),X("brackets")}for(;P.parens>0;){if(!0===n.strictBrackets)throw new SyntaxError(f("closing",")"));P.output=o.escapeLast(P.output,"("),X("parens")}for(;P.braces>0;){if(!0===n.strictBrackets)throw new SyntaxError(f("closing","}"));P.output=o.escapeLast(P.output,"{"),X("braces")}if(!0===n.strictSlashes||"star"!==H.type&&"bracket"!==H.type||Y({type:"maybe_slash",value:"",output:`${j}?`}),!0===P.backtrack){P.output="";for(const e of P.tokens)P.output+=null!=e.output?e.output:e.value,e.suffix&&(P.output+=e.suffix)}return P};p.fastpaths=(e,t)=>{const n={...t},s="number"==typeof n.maxLength?Math.min(i,n.maxLength):i,a=e.length;if(a>s)throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${s}`);e=l[e]||e;const c=o.isWindows(t),{DOT_LITERAL:u,SLASH_LITERAL:f,ONE_CHAR:p,DOTS_SLASH:d,NO_DOT:h,NO_DOTS:g,NO_DOTS_SLASH:m,STAR:y,START_ANCHOR:b}=r.globChars(c),v=n.dot?g:h,E=n.dot?m:h,w=n.capture?"":"?:";let j=!0===n.bash?".*?":y;n.capture&&(j=`(${j})`);const _=e=>!0===e.noglobstar?j:`(${w}(?:(?!${b}${e.dot?d:u}).)*?)`,x=e=>{switch(e){case"*":return`${v}${p}${j}`;case".*":return`${u}${p}${j}`;case"*.*":return`${v}${j}${u}${p}${j}`;case"*/*":return`${v}${j}${f}${p}${E}${j}`;case"**":return v+_(n);case"**/*":return`(?:${v}${_(n)}${f})?${E}${p}${j}`;case"**/*.*":return`(?:${v}${_(n)}${f})?${E}${j}${u}${p}${j}`;case"**/.*":return`(?:${v}${_(n)}${f})?${u}${p}${j}`;default:{const t=/^(.*?)\.(\w+)$/.exec(e);if(!t)return;const n=x(t[1]);if(!n)return;return n+u+t[2]}}},A=o.removePrefix(e,{negated:!1,prefix:""});let O=x(A);return O&&!0!==n.strictSlashes&&(O+=`${f}?`),O},e.exports=p},"./node_modules/picomatch/lib/picomatch.js":(e,t,n)=>{const r=n("./node_modules/path-browserify/index.js"),o=n("./node_modules/picomatch/lib/scan.js"),i=n("./node_modules/picomatch/lib/parse.js"),s=n("./node_modules/picomatch/lib/utils.js"),a=n("./node_modules/picomatch/lib/constants.js"),c=(e,t,n=!1)=>{if(Array.isArray(e)){const r=e.map((e=>c(e,t,n))),o=e=>{for(const t of r){const n=t(e);if(n)return n}return!1};return o}const r=(o=e)&&"object"==typeof o&&!Array.isArray(o)&&e.tokens&&e.input;var o;if(""===e||"string"!=typeof e&&!r)throw new TypeError("Expected pattern to be a non-empty string");const i=t||{},a=s.isWindows(t),l=r?c.compileRe(e,t):c.makeRe(e,t,!1,!0),u=l.state;delete l.state;let f=()=>!1;if(i.ignore){const e={...t,ignore:null,onMatch:null,onResult:null};f=c(i.ignore,e,n)}const p=(n,r=!1)=>{const{isMatch:o,match:s,output:p}=c.test(n,l,t,{glob:e,posix:a}),d={glob:e,state:u,regex:l,posix:a,input:n,output:p,match:s,isMatch:o};return"function"==typeof i.onResult&&i.onResult(d),!1===o?(d.isMatch=!1,!!r&&d):f(n)?("function"==typeof i.onIgnore&&i.onIgnore(d),d.isMatch=!1,!!r&&d):("function"==typeof i.onMatch&&i.onMatch(d),!r||d)};return n&&(p.state=u),p};c.test=(e,t,n,{glob:r,posix:o}={})=>{if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(""===e)return{isMatch:!1,output:""};const i=n||{},a=i.format||(o?s.toPosixSlashes:null);let l=e===r,u=l&&a?a(e):e;return!1===l&&(u=a?a(e):e,l=u===r),!1!==l&&!0!==i.capture||(l=!0===i.matchBase||!0===i.basename?c.matchBase(e,t,n,o):t.exec(u)),{isMatch:Boolean(l),match:l,output:u}},c.matchBase=(e,t,n,o=s.isWindows(n))=>(t instanceof RegExp?t:c.makeRe(t,n)).test(r.basename(e)),c.isMatch=(e,t,n)=>c(t,n)(e),c.parse=(e,t)=>Array.isArray(e)?e.map((e=>c.parse(e,t))):i(e,{...t,fastpaths:!1}),c.scan=(e,t)=>o(e,t),c.compileRe=(e,t,n=!1,r=!1)=>{if(!0===n)return e.output;const o=t||{},i=o.contains?"":"^",s=o.contains?"":"$";let a=`${i}(?:${e.output})${s}`;e&&!0===e.negated&&(a=`^(?!${a}).*$`);const l=c.toRegex(a,t);return!0===r&&(l.state=e),l},c.makeRe=(e,t={},n=!1,r=!1)=>{if(!e||"string"!=typeof e)throw new TypeError("Expected a non-empty string");let o={negated:!1,fastpaths:!0};return!1===t.fastpaths||"."!==e[0]&&"*"!==e[0]||(o.output=i.fastpaths(e,t)),o.output||(o=i(e,t)),c.compileRe(o,t,n,r)},c.toRegex=(e,t)=>{try{const n=t||{};return new RegExp(e,n.flags||(n.nocase?"i":""))}catch(e){if(t&&!0===t.debug)throw e;return/$^/}},c.constants=a,e.exports=c},"./node_modules/picomatch/lib/scan.js":(e,t,n)=>{const r=n("./node_modules/picomatch/lib/utils.js"),{CHAR_ASTERISK:o,CHAR_AT:i,CHAR_BACKWARD_SLASH:s,CHAR_COMMA:a,CHAR_DOT:c,CHAR_EXCLAMATION_MARK:l,CHAR_FORWARD_SLASH:u,CHAR_LEFT_CURLY_BRACE:f,CHAR_LEFT_PARENTHESES:p,CHAR_LEFT_SQUARE_BRACKET:d,CHAR_PLUS:h,CHAR_QUESTION_MARK:g,CHAR_RIGHT_CURLY_BRACE:m,CHAR_RIGHT_PARENTHESES:y,CHAR_RIGHT_SQUARE_BRACKET:b}=n("./node_modules/picomatch/lib/constants.js"),v=e=>e===u||e===s,E=e=>{!0!==e.isPrefix&&(e.depth=e.isGlobstar?1/0:1)};e.exports=(e,t)=>{const n=t||{},w=e.length-1,j=!0===n.parts||!0===n.scanToEnd,_=[],x=[],A=[];let O,R,S=e,C=-1,T=0,M=0,$=!1,k=!1,I=!1,N=!1,P=!1,L=!1,B=!1,D=!1,F=!1,H=!1,U=0,q={value:"",depth:0,isGlob:!1};const W=()=>C>=w,G=()=>(O=R,S.charCodeAt(++C));for(;C<w;){let e;if(R=G(),R!==s){if(!0===L||R===f){for(U++;!0!==W()&&(R=G());)if(R!==s)if(R!==f){if(!0!==L&&R===c&&(R=G())===c){if($=q.isBrace=!0,I=q.isGlob=!0,H=!0,!0===j)continue;break}if(!0!==L&&R===a){if($=q.isBrace=!0,I=q.isGlob=!0,H=!0,!0===j)continue;break}if(R===m&&(U--,0===U)){L=!1,$=q.isBrace=!0,H=!0;break}}else U++;else B=q.backslashes=!0,G();if(!0===j)continue;break}if(R!==u){if(!0!==n.noext&&!0==(R===h||R===i||R===o||R===g||R===l)&&S.charCodeAt(C+1)===p){if(I=q.isGlob=!0,N=q.isExtglob=!0,H=!0,R===l&&C===T&&(F=!0),!0===j){for(;!0!==W()&&(R=G());)if(R!==s){if(R===y){I=q.isGlob=!0,H=!0;break}}else B=q.backslashes=!0,R=G();continue}break}if(R===o){if(O===o&&(P=q.isGlobstar=!0),I=q.isGlob=!0,H=!0,!0===j)continue;break}if(R===g){if(I=q.isGlob=!0,H=!0,!0===j)continue;break}if(R===d){for(;!0!==W()&&(e=G());)if(e!==s){if(e===b){k=q.isBracket=!0,I=q.isGlob=!0,H=!0;break}}else B=q.backslashes=!0,G();if(!0===j)continue;break}if(!0===n.nonegate||R!==l||C!==T){if(!0!==n.noparen&&R===p){if(I=q.isGlob=!0,!0===j){for(;!0!==W()&&(R=G());)if(R!==p){if(R===y){H=!0;break}}else B=q.backslashes=!0,R=G();continue}break}if(!0===I){if(H=!0,!0===j)continue;break}}else D=q.negated=!0,T++}else{if(_.push(C),x.push(q),q={value:"",depth:0,isGlob:!1},!0===H)continue;if(O===c&&C===T+1){T+=2;continue}M=C+1}}else B=q.backslashes=!0,R=G(),R===f&&(L=!0)}!0===n.noext&&(N=!1,I=!1);let z=S,V="",K="";T>0&&(V=S.slice(0,T),S=S.slice(T),M-=T),z&&!0===I&&M>0?(z=S.slice(0,M),K=S.slice(M)):!0===I?(z="",K=S):z=S,z&&""!==z&&"/"!==z&&z!==S&&v(z.charCodeAt(z.length-1))&&(z=z.slice(0,-1)),!0===n.unescape&&(K&&(K=r.removeBackslashes(K)),z&&!0===B&&(z=r.removeBackslashes(z)));const Q={prefix:V,input:e,start:T,base:z,glob:K,isBrace:$,isBracket:k,isGlob:I,isExtglob:N,isGlobstar:P,negated:D,negatedExtglob:F};if(!0===n.tokens&&(Q.maxDepth=0,v(R)||x.push(q),Q.tokens=x),!0===n.parts||!0===n.tokens){let t;for(let r=0;r<_.length;r++){const o=t?t+1:T,i=_[r],s=e.slice(o,i);n.tokens&&(0===r&&0!==T?(x[r].isPrefix=!0,x[r].value=V):x[r].value=s,E(x[r]),Q.maxDepth+=x[r].depth),0===r&&""===s||A.push(s),t=i}if(t&&t+1<e.length){const r=e.slice(t+1);A.push(r),n.tokens&&(x[x.length-1].value=r,E(x[x.length-1]),Q.maxDepth+=x[x.length-1].depth)}Q.slashes=_,Q.parts=A}return Q}},"./node_modules/picomatch/lib/utils.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js");const o=n("./node_modules/path-browserify/index.js"),i="win32"===r.platform,{REGEX_BACKSLASH:s,REGEX_REMOVE_BACKSLASH:a,REGEX_SPECIAL_CHARS:c,REGEX_SPECIAL_CHARS_GLOBAL:l}=n("./node_modules/picomatch/lib/constants.js");t.isObject=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),t.hasRegexChars=e=>c.test(e),t.isRegexChar=e=>1===e.length&&t.hasRegexChars(e),t.escapeRegex=e=>e.replace(l,"\\$1"),t.toPosixSlashes=e=>e.replace(s,"/"),t.removeBackslashes=e=>e.replace(a,(e=>"\\"===e?"":e)),t.supportsLookbehinds=()=>{const e=r.version.slice(1).split(".").map(Number);return 3===e.length&&e[0]>=9||8===e[0]&&e[1]>=10},t.isWindows=e=>e&&"boolean"==typeof e.windows?e.windows:!0===i||"\\"===o.sep,t.escapeLast=(e,n,r)=>{const o=e.lastIndexOf(n,r);return-1===o?e:"\\"===e[o-1]?t.escapeLast(e,n,o-1):`${e.slice(0,o)}\\${e.slice(o)}`},t.removePrefix=(e,t={})=>{let n=e;return n.startsWith("./")&&(n=n.slice(2),t.prefix="./"),n},t.wrapOutput=(e,t={},n={})=>{let r=`${n.contains?"":"^"}(?:${e})${n.contains?"":"$"}`;return!0===t.negated&&(r=`(?:^(?!${r}).*$)`),r}},"./node_modules/pretty-format/build/collections.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printIteratorEntries=function(e,t,n,r,o,i,s=": "){let a="",c=e.next();if(!c.done){a+=t.spacingOuter;const l=n+t.indent;for(;!c.done;){a+=l+i(c.value[0],t,l,r,o)+s+i(c.value[1],t,l,r,o),c=e.next(),c.done?t.min||(a+=","):a+=","+t.spacingInner}a+=t.spacingOuter+n}return a},t.printIteratorValues=function(e,t,n,r,o,i){let s="",a=e.next();if(!a.done){s+=t.spacingOuter;const c=n+t.indent;for(;!a.done;)s+=c+i(a.value,t,c,r,o),a=e.next(),a.done?t.min||(s+=","):s+=","+t.spacingInner;s+=t.spacingOuter+n}return s},t.printListItems=function(e,t,n,r,o,i){let s="";if(e.length){s+=t.spacingOuter;const a=n+t.indent;for(let n=0;n<e.length;n++)s+=a,n in e&&(s+=i(e[n],t,a,r,o)),n<e.length-1?s+=","+t.spacingInner:t.min||(s+=",");s+=t.spacingOuter+n}return s},t.printObjectProperties=function(e,t,n,r,o,i){let s="";const a=((e,t)=>{const n=Object.keys(e).sort(t);return Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach((t=>{Object.getOwnPropertyDescriptor(e,t).enumerable&&n.push(t)})),n})(e,t.compareKeys);if(a.length){s+=t.spacingOuter;const c=n+t.indent;for(let n=0;n<a.length;n++){const l=a[n];s+=c+i(l,t,c,r,o)+": "+i(e[l],t,c,r,o),n<a.length-1?s+=","+t.spacingInner:t.min||(s+=",")}s+=t.spacingOuter+n}return s}},"./node_modules/pretty-format/build/index.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.DEFAULT_OPTIONS=void 0,t.format=L,t.plugins=void 0;var r=p(n("./node_modules/pretty-format/node_modules/ansi-styles/index.js")),o=n("./node_modules/pretty-format/build/collections.js"),i=p(n("./node_modules/pretty-format/build/plugins/AsymmetricMatcher.js")),s=p(n("./node_modules/pretty-format/build/plugins/ConvertAnsi.js")),a=p(n("./node_modules/pretty-format/build/plugins/DOMCollection.js")),c=p(n("./node_modules/pretty-format/build/plugins/DOMElement.js")),l=p(n("./node_modules/pretty-format/build/plugins/Immutable.js")),u=p(n("./node_modules/pretty-format/build/plugins/ReactElement.js")),f=p(n("./node_modules/pretty-format/build/plugins/ReactTestComponent.js"));function p(e){return e&&e.__esModule?e:{default:e}}const d=Object.prototype.toString,h=Date.prototype.toISOString,g=Error.prototype.toString,m=RegExp.prototype.toString,y=e=>"function"==typeof e.constructor&&e.constructor.name||"Object",b=/^Symbol\((.*)\)(.*)$/,v=/\n/gi;class E extends Error{constructor(e,t){super(e),this.stack=t,this.name=this.constructor.name}}function w(e,t){return t?"[Function "+(e.name||"anonymous")+"]":"[Function]"}function j(e){return String(e).replace(b,"Symbol($1)")}function _(e){return"["+g.call(e)+"]"}function x(e,t,n,r){if(!0===e||!1===e)return""+e;if(void 0===e)return"undefined";if(null===e)return"null";const o=typeof e;if("number"===o)return function(e){return Object.is(e,-0)?"-0":String(e)}(e);if("bigint"===o)return function(e){return String(`${e}n`)}(e);if("string"===o)return r?'"'+e.replace(/"|\\/g,"\\$&")+'"':'"'+e+'"';if("function"===o)return w(e,t);if("symbol"===o)return j(e);const i=d.call(e);return"[object WeakMap]"===i?"WeakMap {}":"[object WeakSet]"===i?"WeakSet {}":"[object Function]"===i||"[object GeneratorFunction]"===i?w(e,t):"[object Symbol]"===i?j(e):"[object Date]"===i?isNaN(+e)?"Date { NaN }":h.call(e):"[object Error]"===i?_(e):"[object RegExp]"===i?n?m.call(e).replace(/[\\^$*+?.()|[\]{}]/g,"\\$&"):m.call(e):e instanceof Error?_(e):null}function A(e,t,n,r,i,s){if(-1!==i.indexOf(e))return"[Circular]";(i=i.slice()).push(e);const a=++r>t.maxDepth,c=t.min;if(t.callToJSON&&!a&&e.toJSON&&"function"==typeof e.toJSON&&!s)return S(e.toJSON(),t,n,r,i,!0);const l=d.call(e);return"[object Arguments]"===l?a?"[Arguments]":(c?"":"Arguments ")+"["+(0,o.printListItems)(e,t,n,r,i,S)+"]":function(e){return"[object Array]"===e||"[object ArrayBuffer]"===e||"[object DataView]"===e||"[object Float32Array]"===e||"[object Float64Array]"===e||"[object Int8Array]"===e||"[object Int16Array]"===e||"[object Int32Array]"===e||"[object Uint8Array]"===e||"[object Uint8ClampedArray]"===e||"[object Uint16Array]"===e||"[object Uint32Array]"===e}(l)?a?"["+e.constructor.name+"]":(c?"":t.printBasicPrototype||"Array"!==e.constructor.name?e.constructor.name+" ":"")+"["+(0,o.printListItems)(e,t,n,r,i,S)+"]":"[object Map]"===l?a?"[Map]":"Map {"+(0,o.printIteratorEntries)(e.entries(),t,n,r,i,S," => ")+"}":"[object Set]"===l?a?"[Set]":"Set {"+(0,o.printIteratorValues)(e.values(),t,n,r,i,S)+"}":a||(e=>"undefined"!=typeof window&&e===window)(e)?"["+y(e)+"]":(c?"":t.printBasicPrototype||"Object"!==y(e)?y(e)+" ":"")+"{"+(0,o.printObjectProperties)(e,t,n,r,i,S)+"}"}function O(e,t,n,r,o,i){let s;try{s=function(e){return null!=e.serialize}(e)?e.serialize(t,n,r,o,i,S):e.print(t,(e=>S(e,n,r,o,i)),(e=>{const t=r+n.indent;return t+e.replace(v,"\n"+t)}),{edgeSpacing:n.spacingOuter,min:n.min,spacing:n.spacingInner},n.colors)}catch(e){throw new E(e.message,e.stack)}if("string"!=typeof s)throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof s}".`);return s}function R(e,t){for(let n=0;n<e.length;n++)try{if(e[n].test(t))return e[n]}catch(e){throw new E(e.message,e.stack)}return null}function S(e,t,n,r,o,i){const s=R(t.plugins,e);if(null!==s)return O(s,e,t,n,r,o);const a=x(e,t.printFunctionName,t.escapeRegex,t.escapeString);return null!==a?a:A(e,t,n,r,o,i)}const C={comment:"gray",content:"reset",prop:"yellow",tag:"cyan",value:"green"},T=Object.keys(C),M={callToJSON:!0,compareKeys:void 0,escapeRegex:!1,escapeString:!0,highlight:!1,indent:2,maxDepth:1/0,min:!1,plugins:[],printBasicPrototype:!0,printFunctionName:!0,theme:C};t.DEFAULT_OPTIONS=M;const $=e=>T.reduce(((t,n)=>{const o=e.theme&&void 0!==e.theme[n]?e.theme[n]:C[n],i=o&&r.default[o];if(!i||"string"!=typeof i.close||"string"!=typeof i.open)throw new Error(`pretty-format: Option "theme" has a key "${n}" whose value "${o}" is undefined in ansi-styles.`);return t[n]=i,t}),Object.create(null)),k=e=>e&&void 0!==e.printFunctionName?e.printFunctionName:M.printFunctionName,I=e=>e&&void 0!==e.escapeRegex?e.escapeRegex:M.escapeRegex,N=e=>e&&void 0!==e.escapeString?e.escapeString:M.escapeString,P=e=>{var t,n;return{callToJSON:e&&void 0!==e.callToJSON?e.callToJSON:M.callToJSON,colors:e&&e.highlight?$(e):T.reduce(((e,t)=>(e[t]={close:"",open:""},e)),Object.create(null)),compareKeys:e&&"function"==typeof e.compareKeys?e.compareKeys:M.compareKeys,escapeRegex:I(e),escapeString:N(e),indent:e&&e.min?"":(n=e&&void 0!==e.indent?e.indent:M.indent,new Array(n+1).join(" ")),maxDepth:e&&void 0!==e.maxDepth?e.maxDepth:M.maxDepth,min:e&&void 0!==e.min?e.min:M.min,plugins:e&&void 0!==e.plugins?e.plugins:M.plugins,printBasicPrototype:null===(t=null==e?void 0:e.printBasicPrototype)||void 0===t||t,printFunctionName:k(e),spacingInner:e&&e.min?" ":"\n",spacingOuter:e&&e.min?"":"\n"}};function L(e,t){if(t&&(function(e){if(Object.keys(e).forEach((e=>{if(!M.hasOwnProperty(e))throw new Error(`pretty-format: Unknown option "${e}".`)})),e.min&&void 0!==e.indent&&0!==e.indent)throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');if(void 0!==e.theme){if(null===e.theme)throw new Error('pretty-format: Option "theme" must not be null.');if("object"!=typeof e.theme)throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof e.theme}".`)}}(t),t.plugins)){const n=R(t.plugins,e);if(null!==n)return O(n,e,P(t),"",0,[])}const n=x(e,k(t),I(t),N(t));return null!==n?n:A(e,P(t),"",0,[])}const B={AsymmetricMatcher:i.default,ConvertAnsi:s.default,DOMCollection:a.default,DOMElement:c.default,Immutable:l.default,ReactElement:u.default,ReactTestComponent:f.default};t.plugins=B;var D=L;t.default=D},"./node_modules/pretty-format/build/plugins/AsymmetricMatcher.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.serialize=t.default=void 0;var r=n("./node_modules/pretty-format/build/collections.js"),o="undefined"!=typeof globalThis?globalThis:void 0!==o?o:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),i=o["jest-symbol-do-not-touch"]||o.Symbol;const s="function"==typeof i&&i.for?i.for("jest.asymmetricMatcher"):1267621,c=(e,t,n,o,i,s)=>{const c=e.toString();return"ArrayContaining"===c||"ArrayNotContaining"===c?++o>t.maxDepth?"["+c+"]":c+" ["+(0,r.printListItems)(e.sample,t,n,o,i,s)+"]":"ObjectContaining"===c||"ObjectNotContaining"===c?++o>t.maxDepth?"["+c+"]":c+" {"+(0,r.printObjectProperties)(e.sample,t,n,o,i,s)+"}":"StringMatching"===c||"StringNotMatching"===c||"StringContaining"===c||"StringNotContaining"===c?c+" "+s(e.sample,t,n,o,i):e.toAsymmetricMatcher()};t.serialize=c;const l=e=>e&&e.$$typeof===s;t.test=l;var u={serialize:c,test:l};t.default=u},"./node_modules/pretty-format/build/plugins/ConvertAnsi.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.serialize=t.default=void 0;var r=i(n("./node_modules/ansi-regex/index.js")),o=i(n("./node_modules/pretty-format/node_modules/ansi-styles/index.js"));function i(e){return e&&e.__esModule?e:{default:e}}const s=e=>"string"==typeof e&&!!e.match((0,r.default)());t.test=s;const a=(e,t,n,i,s,a)=>a(e.replace((0,r.default)(),(e=>{switch(e){case o.default.red.close:case o.default.green.close:case o.default.cyan.close:case o.default.gray.close:case o.default.white.close:case o.default.yellow.close:case o.default.bgRed.close:case o.default.bgGreen.close:case o.default.bgYellow.close:case o.default.inverse.close:case o.default.dim.close:case o.default.bold.close:case o.default.reset.open:case o.default.reset.close:return"</>";case o.default.red.open:return"<red>";case o.default.green.open:return"<green>";case o.default.cyan.open:return"<cyan>";case o.default.gray.open:return"<gray>";case o.default.white.open:return"<white>";case o.default.yellow.open:return"<yellow>";case o.default.bgRed.open:return"<bgRed>";case o.default.bgGreen.open:return"<bgGreen>";case o.default.bgYellow.open:return"<bgYellow>";case o.default.inverse.open:return"<inverse>";case o.default.dim.open:return"<dim>";case o.default.bold.open:return"<bold>";default:return""}})),t,n,i,s);t.serialize=a;var c={serialize:a,test:s};t.default=c},"./node_modules/pretty-format/build/plugins/DOMCollection.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.serialize=t.default=void 0;var r=n("./node_modules/pretty-format/build/collections.js");const o=["DOMStringMap","NamedNodeMap"],i=/^(HTML\w*Collection|NodeList)$/,s=e=>{return e&&e.constructor&&!!e.constructor.name&&(t=e.constructor.name,-1!==o.indexOf(t)||i.test(t));var t};t.test=s;const a=(e,t,n,i,s,a)=>{const c=e.constructor.name;return++i>t.maxDepth?"["+c+"]":(t.min?"":c+" ")+(-1!==o.indexOf(c)?"{"+(0,r.printObjectProperties)((e=>"NamedNodeMap"===e.constructor.name)(e)?Array.from(e).reduce(((e,t)=>(e[t.name]=t.value,e)),{}):{...e},t,n,i,s,a)+"}":"["+(0,r.printListItems)(Array.from(e),t,n,i,s,a)+"]")};t.serialize=a;var c={serialize:a,test:s};t.default=c},"./node_modules/pretty-format/build/plugins/DOMElement.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.serialize=t.default=void 0;var r=n("./node_modules/pretty-format/build/plugins/lib/markup.js");const o=/^((HTML|SVG)\w*)?Element$/,i=e=>{var t;return(null==e||null===(t=e.constructor)||void 0===t?void 0:t.name)&&(e=>{const t=e.constructor.name,{nodeType:n,tagName:r}=e,i="string"==typeof r&&r.includes("-")||(e=>{try{return"function"==typeof e.hasAttribute&&e.hasAttribute("is")}catch{return!1}})(e);return 1===n&&(o.test(t)||i)||3===n&&"Text"===t||8===n&&"Comment"===t||11===n&&"DocumentFragment"===t})(e)};function s(e){return 11===e.nodeType}t.test=i;const a=(e,t,n,o,i,a)=>{if(function(e){return 3===e.nodeType}(e))return(0,r.printText)(e.data,t);if(function(e){return 8===e.nodeType}(e))return(0,r.printComment)(e.data,t);const c=s(e)?"DocumentFragment":e.tagName.toLowerCase();return++o>t.maxDepth?(0,r.printElementAsLeaf)(c,t):(0,r.printElement)(c,(0,r.printProps)(s(e)?[]:Array.from(e.attributes).map((e=>e.name)).sort(),s(e)?{}:Array.from(e.attributes).reduce(((e,t)=>(e[t.name]=t.value,e)),{}),t,n+t.indent,o,i,a),(0,r.printChildren)(Array.prototype.slice.call(e.childNodes||e.children),t,n+t.indent,o,i,a),t,n)};t.serialize=a;var c={serialize:a,test:i};t.default=c},"./node_modules/pretty-format/build/plugins/Immutable.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.serialize=t.default=void 0;var r=n("./node_modules/pretty-format/build/collections.js");const o="@@__IMMUTABLE_ORDERED__@@",i=e=>"Immutable."+e,s=e=>"["+e+"]",a=" ",c=(e,t,n,o,c,l,u)=>++o>t.maxDepth?s(i(u)):i(u)+a+"["+(0,r.printIteratorValues)(e.values(),t,n,o,c,l)+"]",l=(e,t,n,l,u,f)=>e["@@__IMMUTABLE_MAP__@@"]?((e,t,n,o,c,l,u)=>++o>t.maxDepth?s(i(u)):i(u)+a+"{"+(0,r.printIteratorEntries)(e.entries(),t,n,o,c,l)+"}")(e,t,n,l,u,f,e[o]?"OrderedMap":"Map"):e["@@__IMMUTABLE_LIST__@@"]?c(e,t,n,l,u,f,"List"):e["@@__IMMUTABLE_SET__@@"]?c(e,t,n,l,u,f,e[o]?"OrderedSet":"Set"):e["@@__IMMUTABLE_STACK__@@"]?c(e,t,n,l,u,f,"Stack"):e["@@__IMMUTABLE_SEQ__@@"]?((e,t,n,o,c,l)=>{const u=i("Seq");return++o>t.maxDepth?s(u):e["@@__IMMUTABLE_KEYED__@@"]?u+a+"{"+(e._iter||e._object?(0,r.printIteratorEntries)(e.entries(),t,n,o,c,l):"…")+"}":u+a+"["+(e._iter||e._array||e._collection||e._iterable?(0,r.printIteratorValues)(e.values(),t,n,o,c,l):"…")+"]"})(e,t,n,l,u,f):((e,t,n,o,c,l)=>{const u=i(e._name||"Record");return++o>t.maxDepth?s(u):u+a+"{"+(0,r.printIteratorEntries)(function(e){let t=0;return{next(){if(t<e._keys.length){const n=e._keys[t++];return{done:!1,value:[n,e.get(n)]}}return{done:!0,value:void 0}}}}(e),t,n,o,c,l)+"}"})(e,t,n,l,u,f);t.serialize=l;const u=e=>e&&(!0===e["@@__IMMUTABLE_ITERABLE__@@"]||!0===e["@@__IMMUTABLE_RECORD__@@"]);t.test=u;var f={serialize:l,test:u};t.default=f},"./node_modules/pretty-format/build/plugins/ReactElement.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.serialize=t.default=void 0;var r=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=i(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var a=o?Object.getOwnPropertyDescriptor(e,s):null;a&&(a.get||a.set)?Object.defineProperty(r,s,a):r[s]=e[s]}return r.default=e,n&&n.set(e,r),r}(n("./node_modules/react-is/index.js")),o=n("./node_modules/pretty-format/build/plugins/lib/markup.js");function i(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(i=function(e){return e?n:t})(e)}const s=(e,t=[])=>(Array.isArray(e)?e.forEach((e=>{s(e,t)})):null!=e&&!1!==e&&t.push(e),t),a=e=>{const t=e.type;if("string"==typeof t)return t;if("function"==typeof t)return t.displayName||t.name||"Unknown";if(r.isFragment(e))return"React.Fragment";if(r.isSuspense(e))return"React.Suspense";if("object"==typeof t&&null!==t){if(r.isContextProvider(e))return"Context.Provider";if(r.isContextConsumer(e))return"Context.Consumer";if(r.isForwardRef(e)){if(t.displayName)return t.displayName;const e=t.render.displayName||t.render.name||"";return""!==e?"ForwardRef("+e+")":"ForwardRef"}if(r.isMemo(e)){const e=t.displayName||t.type.displayName||t.type.name||"";return""!==e?"Memo("+e+")":"Memo"}}return"UNDEFINED"},c=(e,t,n,r,i,c)=>++r>t.maxDepth?(0,o.printElementAsLeaf)(a(e),t):(0,o.printElement)(a(e),(0,o.printProps)((e=>{const{props:t}=e;return Object.keys(t).filter((e=>"children"!==e&&void 0!==t[e])).sort()})(e),e.props,t,n+t.indent,r,i,c),(0,o.printChildren)(s(e.props.children),t,n+t.indent,r,i,c),t,n);t.serialize=c;const l=e=>null!=e&&r.isElement(e);t.test=l;var u={serialize:c,test:l};t.default=u},"./node_modules/pretty-format/build/plugins/ReactTestComponent.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.serialize=t.default=void 0;var r=n("./node_modules/pretty-format/build/plugins/lib/markup.js"),o="undefined"!=typeof globalThis?globalThis:void 0!==o?o:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),i=o["jest-symbol-do-not-touch"]||o.Symbol;const s="function"==typeof i&&i.for?i.for("react.test.json"):245830487,a=(e,t,n,o,i,s)=>++o>t.maxDepth?(0,r.printElementAsLeaf)(e.type,t):(0,r.printElement)(e.type,e.props?(0,r.printProps)((e=>{const{props:t}=e;return t?Object.keys(t).filter((e=>void 0!==t[e])).sort():[]})(e),e.props,t,n+t.indent,o,i,s):"",e.children?(0,r.printChildren)(e.children,t,n+t.indent,o,i,s):"",t,n);t.serialize=a;const c=e=>e&&e.$$typeof===s;t.test=c;var l={serialize:a,test:c};t.default=l},"./node_modules/pretty-format/build/plugins/lib/escapeHTML.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;")}},"./node_modules/pretty-format/build/plugins/lib/markup.js":(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.printText=t.printProps=t.printElementAsLeaf=t.printElement=t.printComment=t.printChildren=void 0;var r,o=(r=n("./node_modules/pretty-format/build/plugins/lib/escapeHTML.js"))&&r.__esModule?r:{default:r};t.printProps=(e,t,n,r,o,i,s)=>{const a=r+n.indent,c=n.colors;return e.map((e=>{const l=t[e];let u=s(l,n,a,o,i);return"string"!=typeof l&&(-1!==u.indexOf("\n")&&(u=n.spacingOuter+a+u+n.spacingOuter+r),u="{"+u+"}"),n.spacingInner+r+c.prop.open+e+c.prop.close+"="+c.value.open+u+c.value.close})).join("")},t.printChildren=(e,t,n,r,o,s)=>e.map((e=>t.spacingOuter+n+("string"==typeof e?i(e,t):s(e,t,n,r,o)))).join("");const i=(e,t)=>{const n=t.colors.content;return n.open+(0,o.default)(e)+n.close};t.printText=i,t.printComment=(e,t)=>{const n=t.colors.comment;return n.open+"\x3c!--"+(0,o.default)(e)+"--\x3e"+n.close},t.printElement=(e,t,n,r,o)=>{const i=r.colors.tag;return i.open+"<"+e+(t&&i.close+t+r.spacingOuter+o+i.open)+(n?">"+i.close+n+r.spacingOuter+o+i.open+"</"+e:(t&&!r.min?"":" ")+"/")+">"+i.close},t.printElementAsLeaf=(e,t)=>{const n=t.colors.tag;return n.open+"<"+e+n.close+" …"+n.open+" />"+n.close}},"./node_modules/pretty-format/node_modules/ansi-styles/index.js":(e,t,n)=>{e=n.nmd(e);const r=(e=0)=>t=>`[${38+e};5;${t}m`,o=(e=0)=>(t,n,r)=>`[${38+e};2;${t};${n};${r}m`;Object.defineProperty(e,"exports",{enumerable:!0,get:function(){const e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.gray=t.color.blackBright,t.bgColor.bgGray=t.bgColor.bgBlackBright,t.color.grey=t.color.blackBright,t.bgColor.bgGrey=t.bgColor.bgBlackBright;for(const[n,r]of Object.entries(t)){for(const[n,o]of Object.entries(r))t[n]={open:`[${o[0]}m`,close:`[${o[1]}m`},r[n]=t[n],e.set(o[0],o[1]);Object.defineProperty(t,n,{value:r,enumerable:!1})}return Object.defineProperty(t,"codes",{value:e,enumerable:!1}),t.color.close="[39m",t.bgColor.close="[49m",t.color.ansi256=r(),t.color.ansi16m=o(),t.bgColor.ansi256=r(10),t.bgColor.ansi16m=o(10),Object.defineProperties(t,{rgbToAnsi256:{value:(e,t,n)=>e===t&&t===n?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(n/255*5),enumerable:!1},hexToRgb:{value:e=>{const t=/(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(e.toString(16));if(!t)return[0,0,0];let{colorString:n}=t.groups;3===n.length&&(n=n.split("").map((e=>e+e)).join(""));const r=Number.parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},enumerable:!1},hexToAnsi256:{value:e=>t.rgbToAnsi256(...t.hexToRgb(e)),enumerable:!1}}),t}})},"./node_modules/process/browser.js":e=>{var t,n,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var a,c=[],l=!1,u=-1;function f(){l&&a&&(l=!1,a.length?c=a.concat(c):u=-1,c.length&&p())}function p(){if(!l){var e=s(f);l=!0;for(var t=c.length;t;){for(a=c,c=[];++u<t;)a&&a[u].run();u=-1,t=c.length}a=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new d(e,t)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},"./node_modules/querystring/decode.js":e=>{function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,n,r,o){n=n||"&",r=r||"=";var i={};if("string"!=typeof e||0===e.length)return i;var s=/\+/g;e=e.split(n);var a=1e3;o&&"number"==typeof o.maxKeys&&(a=o.maxKeys);var c=e.length;a>0&&c>a&&(c=a);for(var l=0;l<c;++l){var u,f,p,d,h=e[l].replace(s,"%20"),g=h.indexOf(r);g>=0?(u=h.substr(0,g),f=h.substr(g+1)):(u=h,f=""),p=decodeURIComponent(u),d=decodeURIComponent(f),t(i,p)?Array.isArray(i[p])?i[p].push(d):i[p]=[i[p],d]:i[p]=d}return i}},"./node_modules/querystring/encode.js":e=>{var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,n,r,o){return n=n||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(o){var i=encodeURIComponent(t(o))+r;return Array.isArray(e[o])?e[o].map((function(e){return i+encodeURIComponent(t(e))})).join(n):i+encodeURIComponent(t(e[o]))})).join(n):o?encodeURIComponent(t(o))+r+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,n)=>{t.decode=t.parse=n("./node_modules/querystring/decode.js"),t.encode=t.stringify=n("./node_modules/querystring/encode.js")},"./node_modules/react-is/cjs/react-is.production.min.js":(e,t)=>{var n=60103,r=60106,o=60107,i=60108,s=60114,a=60109,c=60110,l=60112,u=60113,f=60120,p=60115,d=60116,h=60121,g=60122,m=60117,y=60129,b=60131;if("function"==typeof Symbol&&Symbol.for){var v=Symbol.for;n=v("react.element"),r=v("react.portal"),o=v("react.fragment"),i=v("react.strict_mode"),s=v("react.profiler"),a=v("react.provider"),c=v("react.context"),l=v("react.forward_ref"),u=v("react.suspense"),f=v("react.suspense_list"),p=v("react.memo"),d=v("react.lazy"),h=v("react.block"),g=v("react.server.block"),m=v("react.fundamental"),y=v("react.debug_trace_mode"),b=v("react.legacy_hidden")}function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case s:case i:case u:case f:return e;default:switch(e=e&&e.$$typeof){case c:case l:case d:case p:case a:return e;default:return t}}case r:return t}}}var w=a,j=n,_=l,x=o,A=d,O=p,R=r,S=s,C=i,T=u;t.ContextConsumer=c,t.ContextProvider=w,t.Element=j,t.ForwardRef=_,t.Fragment=x,t.Lazy=A,t.Memo=O,t.Portal=R,t.Profiler=S,t.StrictMode=C,t.Suspense=T,t.isAsyncMode=function(){return!1},t.isConcurrentMode=function(){return!1},t.isContextConsumer=function(e){return E(e)===c},t.isContextProvider=function(e){return E(e)===a},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},t.isForwardRef=function(e){return E(e)===l},t.isFragment=function(e){return E(e)===o},t.isLazy=function(e){return E(e)===d},t.isMemo=function(e){return E(e)===p},t.isPortal=function(e){return E(e)===r},t.isProfiler=function(e){return E(e)===s},t.isStrictMode=function(e){return E(e)===i},t.isSuspense=function(e){return E(e)===u},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===s||e===y||e===i||e===u||e===f||e===b||"object"==typeof e&&null!==e&&(e.$$typeof===d||e.$$typeof===p||e.$$typeof===a||e.$$typeof===c||e.$$typeof===l||e.$$typeof===m||e.$$typeof===h||e[0]===g)},t.typeOf=E},"./node_modules/react-is/index.js":(e,t,n)=>{e.exports=n("./node_modules/react-is/cjs/react-is.production.min.js")},"./node_modules/slash/index.js":e=>{e.exports=e=>{const t=/^\\\\\?\\/.test(e),n=/[^\u0000-\u0080]+/.test(e);return t||n?e:e.replace(/\\/g,"/")}},"./node_modules/stack-utils/index.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js");const o=n("./node_modules/stack-utils/node_modules/escape-string-regexp/index.js"),i="object"==typeof r&&r&&"function"==typeof r.cwd?r.cwd():".",s=[].concat(n("?b420").builtinModules,"bootstrap_node","node").map((e=>new RegExp(`(?:\\((?:node:)?${e}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${e}(?:\\.js)?:\\d+:\\d+$)`)));s.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/,/\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/,/\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);class a{constructor(e){"internals"in(e={ignoredPackages:[],...e})==0&&(e.internals=a.nodeInternals()),"cwd"in e==0&&(e.cwd=i),this._cwd=e.cwd.replace(/\\/g,"/"),this._internals=[].concat(e.internals,function(e){if(0===e.length)return[];const t=e.map((e=>o(e)));return new RegExp(`[/\\\\]node_modules[/\\\\](?:${t.join("|")})[/\\\\][^:]+:\\d+:\\d+`)}(e.ignoredPackages)),this._wrapCallSite=e.wrapCallSite||!1}static nodeInternals(){return[...s]}clean(e,t=0){t=" ".repeat(t),Array.isArray(e)||(e=e.split("\n")),!/^\s*at /.test(e[0])&&/^\s*at /.test(e[1])&&(e=e.slice(1));let n=!1,r=null;const o=[];return e.forEach((e=>{if(e=e.replace(/\\/g,"/"),this._internals.some((t=>t.test(e))))return;const t=/^\s*at /.test(e);n?e=e.trimEnd().replace(/^(\s+)at /,"$1"):(e=e.trim(),t&&(e=e.slice(3))),(e=e.replace(`${this._cwd}/`,""))&&(t?(r&&(o.push(r),r=null),o.push(e)):(n=!0,r=e))})),o.map((e=>`${t}${e}\n`)).join("")}captureString(e,t=this.captureString){"function"==typeof e&&(t=e,e=1/0);const{stackTraceLimit:n}=Error;e&&(Error.stackTraceLimit=e);const r={};Error.captureStackTrace(r,t);const{stack:o}=r;return Error.stackTraceLimit=n,this.clean(o)}capture(e,t=this.capture){"function"==typeof e&&(t=e,e=1/0);const{prepareStackTrace:n,stackTraceLimit:r}=Error;Error.prepareStackTrace=(e,t)=>this._wrapCallSite?t.map(this._wrapCallSite):t,e&&(Error.stackTraceLimit=e);const o={};Error.captureStackTrace(o,t);const{stack:i}=o;return Object.assign(Error,{prepareStackTrace:n,stackTraceLimit:r}),i}at(e=this.at){const[t]=this.capture(1,e);if(!t)return{};const n={line:t.getLineNumber(),column:t.getColumnNumber()};let r;c(n,t.getFileName(),this._cwd),t.isConstructor()&&(n.constructor=!0),t.isEval()&&(n.evalOrigin=t.getEvalOrigin()),t.isNative()&&(n.native=!0);try{r=t.getTypeName()}catch(e){}r&&"Object"!==r&&"[object Object]"!==r&&(n.type=r);const o=t.getFunctionName();o&&(n.function=o);const i=t.getMethodName();return i&&o!==i&&(n.method=i),n}parseLine(e){const t=e&&e.match(l);if(!t)return null;const n="new"===t[1];let r=t[2];const o=t[3],i=t[4],s=Number(t[5]),a=Number(t[6]);let f=t[7];const p=t[8],d=t[9],h="native"===t[10],g=")"===t[11];let m;const y={};if(p&&(y.line=Number(p)),d&&(y.column=Number(d)),g&&f){let e=0;for(let t=f.length-1;t>0;t--)if(")"===f.charAt(t))e++;else if("("===f.charAt(t)&&" "===f.charAt(t-1)&&(e--,-1===e&&" "===f.charAt(t-1))){const e=f.slice(0,t-1),n=f.slice(t+1);f=n,r+=` (${e}`;break}}if(r){const e=r.match(u);e&&(r=e[1],m=e[2])}return c(y,f,this._cwd),n&&(y.constructor=!0),o&&(y.evalOrigin=o,y.evalLine=s,y.evalColumn=a,y.evalFile=i&&i.replace(/\\/g,"/")),h&&(y.native=!0),r&&(y.function=r),m&&r!==m&&(y.method=m),y}}function c(e,t,n){t&&((t=t.replace(/\\/g,"/")).startsWith(`${n}/`)&&(t=t.slice(n.length+1)),e.file=t)}const l=new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"),u=/^(.*?) \[as (.*?)\]$/;e.exports=a},"./node_modules/stack-utils/node_modules/escape-string-regexp/index.js":e=>{const t=/[|\\{}()[\]^$+*?.-]/g;e.exports=e=>{if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(t,"\\$&")}},"./node_modules/supports-color/browser.js":e=>{e.exports={stdout:!1,stderr:!1}},"./node_modules/to-regex-range/index.js":(e,t,n)=>{const r=n("./node_modules/is-number/index.js"),o=(e,t,n)=>{if(!1===r(e))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===t||e===t)return String(e);if(!1===r(t))throw new TypeError("toRegexRange: expected the second argument to be a number.");let i={relaxZeros:!0,...n};"boolean"==typeof i.strictZeros&&(i.relaxZeros=!1===i.strictZeros);let c=e+":"+t+"="+String(i.relaxZeros)+String(i.shorthand)+String(i.capture)+String(i.wrap);if(o.cache.hasOwnProperty(c))return o.cache[c].result;let l=Math.min(e,t),u=Math.max(e,t);if(1===Math.abs(l-u)){let n=e+"|"+t;return i.capture?`(${n})`:!1===i.wrap?n:`(?:${n})`}let f=h(e)||h(t),p={min:e,max:t,a:l,b:u},d=[],g=[];return f&&(p.isPadded=f,p.maxLen=String(p.max).length),l<0&&(g=s(u<0?Math.abs(u):1,Math.abs(l),p,i),l=p.a=0),u>=0&&(d=s(l,u,p,i)),p.negatives=g,p.positives=d,p.result=function(e,t,n){let r=a(e,t,"-",!1,n)||[],o=a(t,e,"",!1,n)||[],i=a(e,t,"-?",!0,n)||[];return r.concat(i).concat(o).join("|")}(g,d,i),!0===i.capture?p.result=`(${p.result})`:!1!==i.wrap&&d.length+g.length>1&&(p.result=`(?:${p.result})`),o.cache[c]=p,p.result};function i(e,t,n){if(e===t)return{pattern:e,count:[],digits:0};let r=function(e,t){let n=[];for(let r=0;r<e.length;r++)n.push([e[r],t[r]]);return n}(e,t),o=r.length,i="",s=0;for(let e=0;e<o;e++){let[t,o]=r[e];t===o?i+=t:"0"!==t||"9"!==o?i+=d(t,o,n):s++}return s&&(i+=!0===n.shorthand?"\\d":"[0-9]"),{pattern:i,count:[s],digits:o}}function s(e,t,n,r){let o,s=function(e,t){let n=1,r=1,o=u(e,n),i=new Set([t]);for(;e<=o&&o<=t;)i.add(o),n+=1,o=u(e,n);for(o=f(t+1,r)-1;e<o&&o<=t;)i.add(o),r+=1,o=f(t+1,r)-1;return i=[...i],i.sort(c),i}(e,t),a=[],l=e;for(let e=0;e<s.length;e++){let t=s[e],c=i(String(l),String(t),r),u="";n.isPadded||!o||o.pattern!==c.pattern?(n.isPadded&&(u=g(t,n,r)),c.string=u+c.pattern+p(c.count),a.push(c),l=t+1,o=c):(o.count.length>1&&o.count.pop(),o.count.push(c.count[0]),o.string=o.pattern+p(o.count),l=t+1)}return a}function a(e,t,n,r,o){let i=[];for(let o of e){let{string:e}=o;r||l(t,"string",e)||i.push(n+e),r&&l(t,"string",e)&&i.push(n+e)}return i}function c(e,t){return e>t?1:t>e?-1:0}function l(e,t,n){return e.some((e=>e[t]===n))}function u(e,t){return Number(String(e).slice(0,-t)+"9".repeat(t))}function f(e,t){return e-e%Math.pow(10,t)}function p(e){let[t=0,n=""]=e;return n||t>1?`{${t+(n?","+n:"")}}`:""}function d(e,t,n){return`[${e}${t-e==1?"":"-"}${t}]`}function h(e){return/^-?(0+)\d/.test(e)}function g(e,t,n){if(!t.isPadded)return e;let r=Math.abs(t.maxLen-String(e).length),o=!1!==n.relaxZeros;switch(r){case 0:return"";case 1:return o?"0?":"0";case 2:return o?"0{0,2}":"00";default:return o?`0{0,${r}}`:`0{${r}}`}}o.cache={},o.clearCache=()=>o.cache={},e.exports=o},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,n){var r;e=n.nmd(e),function(o){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof n.g&&n.g;i.global!==i&&i.window!==i&&i.self;var s,a=2147483647,c=36,l=/^xn--/,u=/[^\x20-\x7E]/,f=/[\x2E\u3002\uFF0E\uFF61]/g,p={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,h=String.fromCharCode;function g(e){throw RangeError(p[e])}function m(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function y(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+m((e=e.replace(f,".")).split("."),t).join(".")}function b(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function v(e){return m(e,(function(e){var t="";return e>65535&&(t+=h((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+h(e)})).join("")}function E(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,n){var r=0;for(e=n?d(e/700):e>>1,e+=d(e/t);e>455;r+=c)e=d(e/35);return d(r+36*e/(e+38))}function j(e){var t,n,r,o,i,s,l,u,f,p,h,m=[],y=e.length,b=0,E=128,j=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&g("not-basic"),m.push(e.charCodeAt(r));for(o=n>0?n+1:0;o<y;){for(i=b,s=1,l=c;o>=y&&g("invalid-input"),((u=(h=e.charCodeAt(o++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:c)>=c||u>d((a-b)/s))&&g("overflow"),b+=u*s,!(u<(f=l<=j?1:l>=j+26?26:l-j));l+=c)s>d(a/(p=c-f))&&g("overflow"),s*=p;j=w(b-i,t=m.length+1,0==i),d(b/t)>a-E&&g("overflow"),E+=d(b/t),b%=t,m.splice(b++,0,E)}return v(m)}function _(e){var t,n,r,o,i,s,l,u,f,p,m,y,v,j,_,x=[];for(y=(e=b(e)).length,t=128,n=0,i=72,s=0;s<y;++s)(m=e[s])<128&&x.push(h(m));for(r=o=x.length,o&&x.push("-");r<y;){for(l=a,s=0;s<y;++s)(m=e[s])>=t&&m<l&&(l=m);for(l-t>d((a-n)/(v=r+1))&&g("overflow"),n+=(l-t)*v,t=l,s=0;s<y;++s)if((m=e[s])<t&&++n>a&&g("overflow"),m==t){for(u=n,f=c;!(u<(p=f<=i?1:f>=i+26?26:f-i));f+=c)_=u-p,j=c-p,x.push(h(E(p+_%j,0))),u=d(_/j);x.push(h(E(u,0))),i=w(n,v,r==o),n=0,++r}++n,++t}return x.join("")}s={version:"1.3.2",ucs2:{decode:b,encode:v},decode:j,encode:_,toASCII:function(e){return y(e,(function(e){return u.test(e)?"xn--"+_(e):e}))},toUnicode:function(e){return y(e,(function(e){return l.test(e)?j(e.slice(4).toLowerCase()):e}))}},void 0===(r=function(){return s}.call(t,n,t,e))||(e.exports=r)}()},"./node_modules/url/url.js":(e,t,n)=>{var r=n("./node_modules/url/node_modules/punycode/punycode.js"),o=n("./node_modules/url/util.js");function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=v,t.resolve=function(e,t){return v(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?v(e,!1,!0).resolveObject(t):t},t.format=function(e){return o.isString(e)&&(e=v(e)),e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(l),f=["%","/","?",";","#"].concat(u),p=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,g={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=n("./node_modules/querystring/index.js");function v(e,t,n){if(e&&o.isObject(e)&&e instanceof i)return e;var r=new i;return r.parse(e,t,n),r}i.prototype.parse=function(e,t,n){if(!o.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),a=-1!==i&&i<e.indexOf("#")?"?":"#",l=e.split(a);l[0]=l[0].replace(/\\/g,"/");var v=e=l.join(a);if(v=v.trim(),!n&&1===e.split("#").length){var E=c.exec(v);if(E)return this.path=v,this.href=v,this.pathname=E[1],E[2]?(this.search=E[2],this.query=t?b.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=s.exec(v);if(w){var j=(w=w[0]).toLowerCase();this.protocol=j,v=v.substr(w.length)}if(n||w||v.match(/^\/\/[^@\/]+@[^@\/]+/)){var _="//"===v.substr(0,2);!_||w&&m[w]||(v=v.substr(2),this.slashes=!0)}if(!m[w]&&(_||w&&!y[w])){for(var x,A,O=-1,R=0;R<p.length;R++)-1!==(S=v.indexOf(p[R]))&&(-1===O||S<O)&&(O=S);for(-1!==(A=-1===O?v.lastIndexOf("@"):v.lastIndexOf("@",O))&&(x=v.slice(0,A),v=v.slice(A+1),this.auth=decodeURIComponent(x)),O=-1,R=0;R<f.length;R++){var S;-1!==(S=v.indexOf(f[R]))&&(-1===O||S<O)&&(O=S)}-1===O&&(O=v.length),this.host=v.slice(0,O),v=v.slice(O),this.parseHost(),this.hostname=this.hostname||"";var C="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!C)for(var T=this.hostname.split(/\./),M=(R=0,T.length);R<M;R++){var $=T[R];if($&&!$.match(d)){for(var k="",I=0,N=$.length;I<N;I++)$.charCodeAt(I)>127?k+="x":k+=$[I];if(!k.match(d)){var P=T.slice(0,R),L=T.slice(R+1),B=$.match(h);B&&(P.push(B[1]),L.unshift(B[2])),L.length&&(v="/"+L.join(".")+v),this.hostname=P.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),C||(this.hostname=r.toASCII(this.hostname));var D=this.port?":"+this.port:"",F=this.hostname||"";this.host=F+D,this.href+=this.host,C&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==v[0]&&(v="/"+v))}if(!g[j])for(R=0,M=u.length;R<M;R++){var H=u[R];if(-1!==v.indexOf(H)){var U=encodeURIComponent(H);U===H&&(U=escape(H)),v=v.split(H).join(U)}}var q=v.indexOf("#");-1!==q&&(this.hash=v.substr(q),v=v.slice(0,q));var W=v.indexOf("?");if(-1!==W?(this.search=v.substr(W),this.query=v.substr(W+1),t&&(this.query=b.parse(this.query)),v=v.slice(0,W)):t&&(this.search="",this.query={}),v&&(this.pathname=v),y[j]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){D=this.pathname||"";var G=this.search||"";this.path=D+G}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,s="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(s=b.stringify(this.query));var a=this.search||s&&"?"+s||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||y[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),t+i+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+r},i.prototype.resolve=function(e){return this.resolveObject(v(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(o.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var n=new i,r=Object.keys(this),s=0;s<r.length;s++){var a=r[s];n[a]=this[a]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),l=0;l<c.length;l++){var u=c[l];"protocol"!==u&&(n[u]=e[u])}return y[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!y[e.protocol]){for(var f=Object.keys(e),p=0;p<f.length;p++){var d=f[p];n[d]=e[d]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||m[e.protocol])n.pathname=e.pathname;else{for(var h=(e.pathname||"").split("/");h.length&&!(e.host=h.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==h[0]&&h.unshift(""),h.length<2&&h.unshift(""),n.pathname=h.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var g=n.pathname||"",b=n.search||"";n.path=g+b}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var v=n.pathname&&"/"===n.pathname.charAt(0),E=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=E||v||n.host&&e.pathname,j=w,_=n.pathname&&n.pathname.split("/")||[],x=(h=e.pathname&&e.pathname.split("/")||[],n.protocol&&!y[n.protocol]);if(x&&(n.hostname="",n.port=null,n.host&&(""===_[0]?_[0]=n.host:_.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===h[0]?h[0]=e.host:h.unshift(e.host)),e.host=null),w=w&&(""===h[0]||""===_[0])),E)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,_=h;else if(h.length)_||(_=[]),_.pop(),_=_.concat(h),n.search=e.search,n.query=e.query;else if(!o.isNullOrUndefined(e.search))return x&&(n.hostname=n.host=_.shift(),(C=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=C.shift(),n.host=n.hostname=C.shift())),n.search=e.search,n.query=e.query,o.isNull(n.pathname)&&o.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!_.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var A=_.slice(-1)[0],O=(n.host||e.host||_.length>1)&&("."===A||".."===A)||""===A,R=0,S=_.length;S>=0;S--)"."===(A=_[S])?_.splice(S,1):".."===A?(_.splice(S,1),R++):R&&(_.splice(S,1),R--);if(!w&&!j)for(;R--;R)_.unshift("..");!w||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),O&&"/"!==_.join("/").substr(-1)&&_.push("");var C,T=""===_[0]||_[0]&&"/"===_[0].charAt(0);return x&&(n.hostname=n.host=T?"":_.length?_.shift():"",(C=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=C.shift(),n.host=n.hostname=C.shift())),(w=w||n.host&&_.length)&&!T&&_.unshift(""),_.length?n.pathname=_.join("/"):(n.pathname=null,n.path=null),o.isNull(n.pathname)&&o.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},i.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/util/support/isBufferBrowser.js":e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},"./node_modules/util/support/types.js":(e,t,n)=>{var r=n("./node_modules/is-arguments/index.js"),o=n("./node_modules/is-generator-function/index.js"),i=n("./node_modules/which-typed-array/index.js"),s=n("./node_modules/is-typed-array/index.js");function a(e){return e.call.bind(e)}var c="undefined"!=typeof BigInt,l="undefined"!=typeof Symbol,u=a(Object.prototype.toString),f=a(Number.prototype.valueOf),p=a(String.prototype.valueOf),d=a(Boolean.prototype.valueOf);if(c)var h=a(BigInt.prototype.valueOf);if(l)var g=a(Symbol.prototype.valueOf);function m(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function y(e){return"[object Map]"===u(e)}function b(e){return"[object Set]"===u(e)}function v(e){return"[object WeakMap]"===u(e)}function E(e){return"[object WeakSet]"===u(e)}function w(e){return"[object ArrayBuffer]"===u(e)}function j(e){return"undefined"!=typeof ArrayBuffer&&(w.working?w(e):e instanceof ArrayBuffer)}function _(e){return"[object DataView]"===u(e)}function x(e){return"undefined"!=typeof DataView&&(_.working?_(e):e instanceof DataView)}t.isArgumentsObject=r,t.isGeneratorFunction=o,t.isTypedArray=s,t.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},t.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):s(e)||x(e)},t.isUint8Array=function(e){return"Uint8Array"===i(e)},t.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===i(e)},t.isUint16Array=function(e){return"Uint16Array"===i(e)},t.isUint32Array=function(e){return"Uint32Array"===i(e)},t.isInt8Array=function(e){return"Int8Array"===i(e)},t.isInt16Array=function(e){return"Int16Array"===i(e)},t.isInt32Array=function(e){return"Int32Array"===i(e)},t.isFloat32Array=function(e){return"Float32Array"===i(e)},t.isFloat64Array=function(e){return"Float64Array"===i(e)},t.isBigInt64Array=function(e){return"BigInt64Array"===i(e)},t.isBigUint64Array=function(e){return"BigUint64Array"===i(e)},y.working="undefined"!=typeof Map&&y(new Map),t.isMap=function(e){return"undefined"!=typeof Map&&(y.working?y(e):e instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),t.isSet=function(e){return"undefined"!=typeof Set&&(b.working?b(e):e instanceof Set)},v.working="undefined"!=typeof WeakMap&&v(new WeakMap),t.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(v.working?v(e):e instanceof WeakMap)},E.working="undefined"!=typeof WeakSet&&E(new WeakSet),t.isWeakSet=function(e){return E(e)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),t.isArrayBuffer=j,_.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&_(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=x;var A="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function O(e){return"[object SharedArrayBuffer]"===u(e)}function R(e){return void 0!==A&&(void 0===O.working&&(O.working=O(new A)),O.working?O(e):e instanceof A)}function S(e){return m(e,f)}function C(e){return m(e,p)}function T(e){return m(e,d)}function M(e){return c&&m(e,h)}function $(e){return l&&m(e,g)}t.isSharedArrayBuffer=R,t.isAsyncFunction=function(e){return"[object AsyncFunction]"===u(e)},t.isMapIterator=function(e){return"[object Map Iterator]"===u(e)},t.isSetIterator=function(e){return"[object Set Iterator]"===u(e)},t.isGeneratorObject=function(e){return"[object Generator]"===u(e)},t.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===u(e)},t.isNumberObject=S,t.isStringObject=C,t.isBooleanObject=T,t.isBigIntObject=M,t.isSymbolObject=$,t.isBoxedPrimitive=function(e){return S(e)||C(e)||T(e)||M(e)||$(e)},t.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(j(e)||R(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(t,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},"./node_modules/util/util.js":(e,t,n)=>{var r=n("./node_modules/process/browser.js"),o=n("./node_modules/console-browserify/index.js"),i=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++)n[t[r]]=Object.getOwnPropertyDescriptor(e,t[r]);return n},s=/%[sdj%]/g;t.format=function(e){if(!E(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(u(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,o=r.length,i=String(e).replace(s,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),a=r[n];n<o;a=r[++n])b(a)||!_(a)?i+=" "+a:i+=" "+u(a);return i},t.deprecate=function(e,n){if(void 0!==r&&!0===r.noDeprecation)return e;if(void 0===r)return function(){return t.deprecate(e,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(r.throwDeprecation)throw new Error(n);r.traceDeprecation?o.trace(n):o.error(n),i=!0}return e.apply(this,arguments)}};var a={},c=/^$/;if(r.env.NODE_DEBUG){var l=r.env.NODE_DEBUG;l=l.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),c=new RegExp("^"+l+"$","i")}function u(e,n){var r={seen:[],stylize:p};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),y(n)?r.showHidden=n:n&&t._extend(r,n),w(r.showHidden)&&(r.showHidden=!1),w(r.depth)&&(r.depth=2),w(r.colors)&&(r.colors=!1),w(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=f),d(r,e,r.depth)}function f(e,t){var n=u.styles[t];return n?"["+u.colors[n][0]+"m"+e+"["+u.colors[n][1]+"m":e}function p(e,t){return e}function d(e,n,r){if(e.customInspect&&n&&O(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,e);return E(o)||(o=d(e,o,r)),o}var i=function(e,t){if(w(t))return e.stylize("undefined","undefined");if(E(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return v(t)?e.stylize(""+t,"number"):y(t)?e.stylize(""+t,"boolean"):b(t)?e.stylize("null","null"):void 0}(e,n);if(i)return i;var s=Object.keys(n),a=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(n)),A(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return h(n);if(0===s.length){if(O(n)){var c=n.name?": "+n.name:"";return e.stylize("[Function"+c+"]","special")}if(j(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(x(n))return e.stylize(Date.prototype.toString.call(n),"date");if(A(n))return h(n)}var l,u="",f=!1,p=["{","}"];return m(n)&&(f=!0,p=["[","]"]),O(n)&&(u=" [Function"+(n.name?": "+n.name:"")+"]"),j(n)&&(u=" "+RegExp.prototype.toString.call(n)),x(n)&&(u=" "+Date.prototype.toUTCString.call(n)),A(n)&&(u=" "+h(n)),0!==s.length||f&&0!=n.length?r<0?j(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),l=f?function(e,t,n,r,o){for(var i=[],s=0,a=t.length;s<a;++s)M(t,String(s))?i.push(g(e,t,n,r,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(g(e,t,n,r,o,!0))})),i}(e,n,r,a,s):s.map((function(t){return g(e,n,r,a,t,f)})),e.seen.pop(),function(e,t,n){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}(l,u,p)):p[0]+u+p[1]}function h(e){return"["+Error.prototype.toString.call(e)+"]"}function g(e,t,n,r,o,i){var s,a,c;if((c=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),M(r,o)||(s="["+o+"]"),a||(e.seen.indexOf(c.value)<0?(a=b(n)?d(e,c.value,null):d(e,c.value,n-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),w(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function m(e){return Array.isArray(e)}function y(e){return"boolean"==typeof e}function b(e){return null===e}function v(e){return"number"==typeof e}function E(e){return"string"==typeof e}function w(e){return void 0===e}function j(e){return _(e)&&"[object RegExp]"===R(e)}function _(e){return"object"==typeof e&&null!==e}function x(e){return _(e)&&"[object Date]"===R(e)}function A(e){return _(e)&&("[object Error]"===R(e)||e instanceof Error)}function O(e){return"function"==typeof e}function R(e){return Object.prototype.toString.call(e)}function S(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(e=e.toUpperCase(),!a[e])if(c.test(e)){var n=r.pid;a[e]=function(){var r=t.format.apply(t,arguments);o.error("%s %d: %s",e,n,r)}}else a[e]=function(){};return a[e]},t.inspect=u,u.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},u.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=n("./node_modules/util/support/types.js"),t.isArray=m,t.isBoolean=y,t.isNull=b,t.isNullOrUndefined=function(e){return null==e},t.isNumber=v,t.isString=E,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=w,t.isRegExp=j,t.types.isRegExp=j,t.isObject=_,t.isDate=x,t.types.isDate=x,t.isError=A,t.types.isNativeError=A,t.isFunction=O,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n("./node_modules/util/support/isBufferBrowser.js");var C=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function M(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){o.log("%s - %s",function T(){var e=new Date,t=[S(e.getHours()),S(e.getMinutes()),S(e.getSeconds())].join(":");return[e.getDate(),C[e.getMonth()],t].join(" ")}(),t.format.apply(t,arguments))},t.inherits=n("./node_modules/inherits/inherits_browser.js"),t._extend=function(e,t){if(!t||!_(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e};var $="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function k(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if($&&e[$]){var t;if("function"!=typeof(t=e[$]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,$,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,r=new Promise((function(e,r){t=e,n=r})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(e,r){e?n(e):t(r)}));try{e.apply(this,o)}catch(e){n(e)}return r}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),$&&Object.defineProperty(t,$,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,i(e))},t.promisify.custom=$,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],n=0;n<arguments.length;n++)t.push(arguments[n]);var o=t.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,s=function(){return o.apply(i,arguments)};e.apply(this,t).then((function(e){r.nextTick(s.bind(null,null,e))}),(function(e){r.nextTick(k.bind(null,e,s))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,i(e)),t}},"./node_modules/which-typed-array/index.js":(e,t,n)=>{var r=n("./node_modules/foreach/index.js"),o=n("./node_modules/available-typed-arrays/index.js"),i=n("./node_modules/call-bind/callBound.js"),s=i("Object.prototype.toString"),a=n("./node_modules/has-tostringtag/shams.js")(),c="undefined"==typeof globalThis?n.g:globalThis,l=o(),u=i("String.prototype.slice"),f={},p=n("./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js"),d=Object.getPrototypeOf;a&&p&&d&&r(l,(function(e){if("function"==typeof c[e]){var t=new c[e];if(Symbol.toStringTag in t){var n=d(t),r=p(n,Symbol.toStringTag);if(!r){var o=d(n);r=p(o,Symbol.toStringTag)}f[e]=r.get}}}));var h=n("./node_modules/is-typed-array/index.js");e.exports=function(e){return!!h(e)&&(a&&Symbol.toStringTag in e?function(e){var t=!1;return r(f,(function(n,r){if(!t)try{var o=n.call(e);o===r&&(t=o)}catch(e){}})),t}(e):u(s(e),8,-1))}},"?4d29":()=>{},"?b420":()=>{},"./node_modules/available-typed-arrays/index.js":(e,t,n)=>{var r=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],o="undefined"==typeof globalThis?n.g:globalThis;e.exports=function(){for(var e=[],t=0;t<r.length;t++)"function"==typeof o[r[t]]&&(e[e.length]=r[t]);return e}},"./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js":(e,t,n)=>{var r=n("./node_modules/get-intrinsic/index.js")("%Object.getOwnPropertyDescriptor%",!0);if(r)try{r([],"length")}catch(e){r=null}e.exports=r}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var r={};(()=>{n.d(r,{Z:()=>t});var e=n("./node_modules/expect/build/index.js");const t=n.n(e)()})();var o=r.Z,redent=__webpack_require__("./node_modules/redent/index.js"),redent_default=__webpack_require__.n(redent),isEqual=__webpack_require__("./node_modules/lodash/isEqual.js"),isEqual_default=__webpack_require__.n(isEqual);function $parcel$defineInteropFlag(a){Object.defineProperty(a,"__esModule",{value:!0,configurable:!0})}function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:!0,configurable:!0})}var $009ddb00d3ec72b8$exports={};$parcel$defineInteropFlag($009ddb00d3ec72b8$exports),$parcel$export($009ddb00d3ec72b8$exports,"default",(()=>$009ddb00d3ec72b8$export$2e2bcd8739ae039));class $009ddb00d3ec72b8$export$2e2bcd8739ae039 extends Error{constructor(filename,msg,lineno,column,css){super(filename+":"+lineno+":"+column+": "+msg),this.reason=msg,this.filename=filename,this.line=lineno,this.column=column,this.source=css}}var $0865a9fb4cc365fe$exports={};$parcel$defineInteropFlag($0865a9fb4cc365fe$exports),$parcel$export($0865a9fb4cc365fe$exports,"default",(()=>$0865a9fb4cc365fe$export$2e2bcd8739ae039));class $0865a9fb4cc365fe$export$2e2bcd8739ae039{constructor(start,end,source){this.start=start,this.end=end,this.source=source}}var $b2e137848b48cf4f$export$9be5dd6e61d5d73a,CssTypes;$parcel$export({},"CssTypes",(()=>$b2e137848b48cf4f$export$9be5dd6e61d5d73a)),(CssTypes=$b2e137848b48cf4f$export$9be5dd6e61d5d73a||($b2e137848b48cf4f$export$9be5dd6e61d5d73a={})).stylesheet="stylesheet",CssTypes.rule="rule",CssTypes.declaration="declaration",CssTypes.comment="comment",CssTypes.container="container",CssTypes.charset="charset",CssTypes.document="document",CssTypes.customMedia="custom-media",CssTypes.fontFace="font-face",CssTypes.host="host",CssTypes.import="import",CssTypes.keyframes="keyframes",CssTypes.keyframe="keyframe",CssTypes.layer="layer",CssTypes.media="media",CssTypes.namespace="namespace",CssTypes.page="page",CssTypes.supports="supports";const $d708735ed1303b43$var$commentre=/\/\*[^]*?(?:\*\/|$)/g;function $d708735ed1303b43$var$trim(str){return str?str.trim():""}function $d708735ed1303b43$var$addParent(obj,parent){const isNode=obj&&"string"==typeof obj.type,childParent=isNode?obj:parent;for(const k in obj){const value=obj[k];Array.isArray(value)?value.forEach((v=>{$d708735ed1303b43$var$addParent(v,childParent)})):value&&"object"==typeof value&&$d708735ed1303b43$var$addParent(value,childParent)}return isNode&&Object.defineProperty(obj,"parent",{configurable:!0,writable:!0,enumerable:!1,value:parent||null}),obj}var $d708735ed1303b43$export$2e2bcd8739ae039=(css,options)=>{options=options||{};let lineno=1,column=1;function position(){const start={line:lineno,column:column};return function(node){return node.position=new $0865a9fb4cc365fe$export$2e2bcd8739ae039(start,{line:lineno,column:column},options?.source||""),whitespace(),node}}const errorsList=[];function error(msg){const err=new $009ddb00d3ec72b8$export$2e2bcd8739ae039(options?.source||"",msg,lineno,column,css);if(!options?.silent)throw err;errorsList.push(err)}function open(){return match(/^{\s*/)}function close(){return match(/^}/)}function rules(){let node;const rules=[];for(whitespace(),comments(rules);css.length&&"}"!==css.charAt(0)&&(node=atrule()||rule());)node&&(rules.push(node),comments(rules));return rules}function match(re){const m=re.exec(css);if(!m)return;const str=m[0];return function updatePosition(str){const lines=str.match(/\n/g);lines&&(lineno+=lines.length);const i=str.lastIndexOf("\n");column=~i?str.length-i:column+str.length}(str),css=css.slice(str.length),m}function whitespace(){match(/^\s*/)}function comments(rules){let c;for(rules=rules||[];c=comment();)c&&rules.push(c);return rules}function comment(){const pos=position();if("/"!==css.charAt(0)||"*"!==css.charAt(1))return;const m=match(/^\/\*[^]*?\*\//);return m?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.comment,comment:m[0].slice(2,-2)}):error("End of comment missing")}function findClosingParenthese(str,start,depth){let ptr=start+1,found=!1,closeParentheses=str.indexOf(")",ptr);for(;!found&&-1!==closeParentheses;){const nextParentheses=str.indexOf("(",ptr);if(-1!==nextParentheses&&nextParentheses<closeParentheses){ptr=findClosingParenthese(str,nextParentheses+1,depth+1)+1,closeParentheses=str.indexOf(")",ptr)}else found=!0}return found&&-1!==closeParentheses?closeParentheses:-1}function selector(){const m=match(/^([^{]+)/);if(!m)return;let res=$d708735ed1303b43$var$trim(m[0]).replace($d708735ed1303b43$var$commentre,"");if(-1===res.indexOf(","))return[res];let ptr=0,startParentheses=res.indexOf("(",ptr);for(;-1!==startParentheses;){const closeParentheses=findClosingParenthese(res,startParentheses,0);if(-1===closeParentheses)break;ptr=closeParentheses+1,res=res.substring(0,startParentheses)+res.substring(startParentheses,closeParentheses).replace(/,/g,"‌")+res.substring(closeParentheses),startParentheses=res.indexOf("(",ptr)}return res=res.replace(/("|')(?:\\\1|.)*?\1/g,(m=>m.replace(/,/g,"‌"))),res.split(",").map((s=>$d708735ed1303b43$var$trim(s.replace(/\u200C/g,","))))}function declaration(){const pos=position(),propMatch=match(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);if(!propMatch)return;const propValue=$d708735ed1303b43$var$trim(propMatch[0]);if(!match(/^:\s*/))return error("property missing ':'");const val=match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/),ret=pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.declaration,property:propValue.replace($d708735ed1303b43$var$commentre,""),value:val?$d708735ed1303b43$var$trim(val[0]).replace($d708735ed1303b43$var$commentre,""):""});return match(/^[;\s]*/),ret}function declarations(){const decls=[];if(!open())return error("missing '{'");let decl;for(comments(decls);decl=declaration();)decl&&(decls.push(decl),comments(decls));return close()?decls:error("missing '}'")}function keyframe(){let m;const vals=[],pos=position();for(;m=match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);)vals.push(m[1]),match(/^,\s*/);if(vals.length)return pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.keyframe,values:vals,declarations:declarations()||[]})}const atimport=_compileAtrule("import"),atcharset=_compileAtrule("charset"),atnamespace=_compileAtrule("namespace");function _compileAtrule(name){const re=new RegExp("^@"+name+"\\s*((?::?[^;'\"]|\"(?:\\\\\"|[^\"])*?\"|'(?:\\\\'|[^'])*?')+)(?:;|$)");return function(){const pos=position(),m=match(re);if(!m)return;const ret={type:name};return ret[name]=m[1].trim(),pos(ret)}}function atrule(){if("@"===css[0])return function atkeyframes(){const pos=position(),m1=match(/^@([-\w]+)?keyframes\s*/);if(!m1)return;const vendor=m1[1],m2=match(/^([-\w]+)\s*/);if(!m2)return error("@keyframes missing name");const name=m2[1];if(!open())return error("@keyframes missing '{'");let frame,frames=comments();for(;frame=keyframe();)frames.push(frame),frames=frames.concat(comments());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.keyframes,name:name,vendor:vendor,keyframes:frames}):error("@keyframes missing '}'")}()||function atmedia(){const pos=position(),m=match(/^@media *([^{]+)/);if(!m)return;const media=$d708735ed1303b43$var$trim(m[1]);if(!open())return error("@media missing '{'");const style=comments().concat(rules());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.media,media:media,rules:style}):error("@media missing '}'")}()||function atcustommedia(){const pos=position(),m=match(/^@custom-media\s+(--\S+)\s*([^{;\s][^{;]*);/);if(m)return pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.customMedia,name:$d708735ed1303b43$var$trim(m[1]),media:$d708735ed1303b43$var$trim(m[2])})}()||function atsupports(){const pos=position(),m=match(/^@supports *([^{]+)/);if(!m)return;const supports=$d708735ed1303b43$var$trim(m[1]);if(!open())return error("@supports missing '{'");const style=comments().concat(rules());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.supports,supports:supports,rules:style}):error("@supports missing '}'")}()||atimport()||atcharset()||atnamespace()||function atdocument(){const pos=position(),m=match(/^@([-\w]+)?document *([^{]+)/);if(!m)return;const vendor=$d708735ed1303b43$var$trim(m[1]),doc=$d708735ed1303b43$var$trim(m[2]);if(!open())return error("@document missing '{'");const style=comments().concat(rules());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.document,document:doc,vendor:vendor,rules:style}):error("@document missing '}'")}()||function atpage(){const pos=position();if(!match(/^@page */))return;const sel=selector()||[];if(!open())return error("@page missing '{'");let decl,decls=comments();for(;decl=declaration();)decls.push(decl),decls=decls.concat(comments());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.page,selectors:sel,declarations:decls}):error("@page missing '}'")}()||function athost(){const pos=position();if(!match(/^@host\s*/))return;if(!open())return error("@host missing '{'");const style=comments().concat(rules());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.host,rules:style}):error("@host missing '}'")}()||function atfontface(){const pos=position();if(!match(/^@font-face\s*/))return;if(!open())return error("@font-face missing '{'");let decl,decls=comments();for(;decl=declaration();)decls.push(decl),decls=decls.concat(comments());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.fontFace,declarations:decls}):error("@font-face missing '}'")}()||function atcontainer(){const pos=position(),m=match(/^@container *([^{]+)/);if(!m)return;const container=$d708735ed1303b43$var$trim(m[1]);if(!open())return error("@container missing '{'");const style=comments().concat(rules());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.container,container:container,rules:style}):error("@container missing '}'")}()||function atlayer(){const pos=position(),m=match(/^@layer *([^{;@]+)/);if(!m)return;const layer=$d708735ed1303b43$var$trim(m[1]);if(!open())return match(/^[;\s]*/),pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.layer,layer:layer});const style=comments().concat(rules());return close()?pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.layer,layer:layer,rules:style}):error("@layer missing '}'")}()}function rule(){const pos=position(),sel=selector();return sel?(comments(),pos({type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.rule,selectors:sel,declarations:declarations()||[]})):error("selector missing")}return $d708735ed1303b43$var$addParent(function stylesheet(){const rulesList=rules();return{type:$b2e137848b48cf4f$export$9be5dd6e61d5d73a.stylesheet,stylesheet:{source:options?.source,rules:rulesList,parsingErrors:errorsList}}}())};const $149c1bd638913645$export$98e6a39c04603d36=$d708735ed1303b43$export$2e2bcd8739ae039;var dist=__webpack_require__("./node_modules/dom-accessibility-api/dist/index.mjs"),source=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/chalk/source/index.js"),source_default=__webpack_require__.n(source),isEqualWith=__webpack_require__("./node_modules/lodash/isEqualWith.js"),isEqualWith_default=__webpack_require__.n(isEqualWith),uniq=__webpack_require__("./node_modules/lodash/uniq.js"),uniq_default=__webpack_require__.n(uniq),css_escape=__webpack_require__("./node_modules/css.escape/css.escape.js"),css_escape_default=__webpack_require__.n(css_escape),lib=__webpack_require__("./node_modules/aria-query/lib/index.js");class GenericTypeError extends Error{constructor(expectedString,received,matcherFn,context){super(),Error.captureStackTrace&&Error.captureStackTrace(this,matcherFn);let withType="";try{withType=context.utils.printWithType("Received",received,context.utils.printReceived)}catch(e){}this.message=[context.utils.matcherHint(`${context.isNot?".not":""}.${matcherFn.name}`,"received",""),"",`${context.utils.RECEIVED_COLOR("received")} value must ${expectedString}.`,withType].join("\n")}}class HtmlElementTypeError extends GenericTypeError{constructor(...args){super("be an HTMLElement or an SVGElement",...args)}}class NodeTypeError extends GenericTypeError{constructor(...args){super("be a Node",...args)}}function checkHasWindow(htmlElement,ErrorClass,...args){if(!htmlElement||!htmlElement.ownerDocument||!htmlElement.ownerDocument.defaultView)throw new ErrorClass(htmlElement,...args)}function checkHtmlElement(htmlElement,...args){checkHasWindow(htmlElement,HtmlElementTypeError,...args);const window=htmlElement.ownerDocument.defaultView;if(!(htmlElement instanceof window.HTMLElement||htmlElement instanceof window.SVGElement))throw new HtmlElementTypeError(htmlElement,...args)}class InvalidCSSError extends Error{constructor(received,matcherFn,context){super(),Error.captureStackTrace&&Error.captureStackTrace(this,matcherFn),this.message=[received.message,"",context.utils.RECEIVED_COLOR("Failing css:"),context.utils.RECEIVED_COLOR(`${received.css}`)].join("\n")}}function display(context,value){return"string"==typeof value?value:context.utils.stringify(value)}function getMessage(context,matcher,expectedLabel,expectedValue,receivedLabel,receivedValue){return[`${matcher}\n`,`${expectedLabel}:\n${context.utils.EXPECTED_COLOR(redent_default()(display(context,expectedValue),2))}`,`${receivedLabel}:\n${context.utils.RECEIVED_COLOR(redent_default()(display(context,receivedValue),2))}`].join("\n")}function deprecate(name,replacementText){console.warn(`Warning: ${name} has been deprecated and will be removed in future updates.`,replacementText)}function normalize(text){return text.replace(/\s+/g," ").trim()}function getTag(element){return element.tagName&&element.tagName.toLowerCase()}function getSingleElementValue(element){if(element)switch(element.tagName.toLowerCase()){case"input":return function getInputValue(inputElement){switch(inputElement.type){case"number":return""===inputElement.value?null:Number(inputElement.value);case"checkbox":return inputElement.checked;default:return inputElement.value}}(element);case"select":return function getSelectValue({multiple:multiple,options:options}){const selectedOptions=[...options].filter((option=>option.selected));return multiple?[...selectedOptions].map((opt=>opt.value)):0!==selectedOptions.length?selectedOptions[0].value:void 0}(element);default:return element.value}}function compareArraysAsSet(a,b){if(Array.isArray(a)&&Array.isArray(b))return isEqual_default()(new Set(a),new Set(b))}function toBeInTheDOM(element,container){return deprecate("toBeInTheDOM","Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container."),element&&checkHtmlElement(element,toBeInTheDOM,this),container&&checkHtmlElement(container,toBeInTheDOM,this),{pass:container?container.contains(element):!!element,message:()=>[this.utils.matcherHint((this.isNot?".not":"")+".toBeInTheDOM","element",""),"","Received:",`  ${this.utils.printReceived(element?element.cloneNode(!1):element)}`].join("\n")}}function toBeInTheDocument(element){null===element&&this.isNot||checkHtmlElement(element,toBeInTheDocument,this);const pass=null!==element&&element.ownerDocument===element.getRootNode({composed:!0}),errorFound=()=>`expected document not to contain element, found ${this.utils.stringify(element.cloneNode(!0))} instead`;return{pass:pass,message:()=>[this.utils.matcherHint((this.isNot?".not":"")+".toBeInTheDocument","element",""),"",this.utils.RECEIVED_COLOR(this.isNot?errorFound():"element could not be found in the document")].join("\n")}}function toBeEmpty(element){return deprecate("toBeEmpty","Please use instead toBeEmptyDOMElement for finding empty nodes in the DOM."),checkHtmlElement(element,toBeEmpty,this),{pass:""===element.innerHTML,message:()=>[this.utils.matcherHint((this.isNot?".not":"")+".toBeEmpty","element",""),"","Received:",`  ${this.utils.printReceived(element.innerHTML)}`].join("\n")}}function toBeEmptyDOMElement(element){return checkHtmlElement(element,toBeEmptyDOMElement,this),{pass:isEmptyElement(element),message:()=>[this.utils.matcherHint((this.isNot?".not":"")+".toBeEmptyDOMElement","element",""),"","Received:",`  ${this.utils.printReceived(element.innerHTML)}`].join("\n")}}function isEmptyElement(element){return 0===[...element.childNodes].filter((node=>8!==node.nodeType)).length}function toContainElement(container,element){return checkHtmlElement(container,toContainElement,this),null!==element&&checkHtmlElement(element,toContainElement,this),{pass:container.contains(element),message:()=>[this.utils.matcherHint((this.isNot?".not":"")+".toContainElement","element","element"),"",this.utils.RECEIVED_COLOR(`${this.utils.stringify(container.cloneNode(!1))} ${this.isNot?"contains:":"does not contain:"} ${this.utils.stringify(element?element.cloneNode(!1):element)}\n        `)].join("\n")}}function getNormalizedHtml(container,htmlText){const div=container.ownerDocument.createElement("div");return div.innerHTML=htmlText,div.innerHTML}function toContainHTML(container,htmlText){if(checkHtmlElement(container,toContainHTML,this),"string"!=typeof htmlText)throw new Error(`.toContainHTML() expects a string value, got ${htmlText}`);return{pass:container.outerHTML.includes(getNormalizedHtml(container,htmlText)),message:()=>[this.utils.matcherHint((this.isNot?".not":"")+".toContainHTML","element",""),"Expected:",`  ${this.utils.EXPECTED_COLOR(htmlText)}`,"Received:",`  ${this.utils.printReceived(container.cloneNode(!0))}`].join("\n")}}function toHaveTextContent(node,checkWith,options={normalizeWhitespace:!0}){!function checkNode(node,...args){if(checkHasWindow(node,NodeTypeError,...args),!(node instanceof node.ownerDocument.defaultView.Node))throw new NodeTypeError(node,...args)}(node,toHaveTextContent,this);const textContent=options.normalizeWhitespace?normalize(node.textContent):node.textContent.replace(/\u00a0/g," "),checkingWithEmptyString=""!==textContent&&""===checkWith;return{pass:!checkingWithEmptyString&&(textToMatch=textContent,matcher=checkWith,matcher instanceof RegExp?matcher.test(textToMatch):textToMatch.includes(String(matcher))),message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveTextContent","element",""),checkingWithEmptyString?"Checking with empty string will always match, use .toBeEmptyDOMElement() instead":`Expected element ${to} have text content`,checkWith,"Received",textContent)}};var textToMatch,matcher}function toHaveAccessibleDescription(htmlElement,expectedAccessibleDescription){checkHtmlElement(htmlElement,toHaveAccessibleDescription,this);const actualAccessibleDescription=(0,dist.b)(htmlElement);let pass=!1;return pass=1===arguments.length?""!==actualAccessibleDescription:expectedAccessibleDescription instanceof RegExp?expectedAccessibleDescription.test(actualAccessibleDescription):this.equals(actualAccessibleDescription,expectedAccessibleDescription),{pass:pass,message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint(`${this.isNot?".not":""}.${toHaveAccessibleDescription.name}`,"element",""),`Expected element ${to} have accessible description`,expectedAccessibleDescription,"Received",actualAccessibleDescription)}}}const ariaInvalidName="aria-invalid",validStates=["false"];function toHaveAccessibleErrorMessage(htmlElement,expectedAccessibleErrorMessage){checkHtmlElement(htmlElement,toHaveAccessibleErrorMessage,this);const to=this.isNot?"not to":"to",method=this.isNot?".not.toHaveAccessibleErrorMessage":".toHaveAccessibleErrorMessage",errormessageId=htmlElement.getAttribute("aria-errormessage");if(!!errormessageId&&/\s+/.test(errormessageId))return{pass:!1,message:()=>getMessage(this,this.utils.matcherHint(method,"element"),"Expected element's `aria-errormessage` attribute to be empty or a single, valid ID","","Received",`aria-errormessage="${errormessageId}"`)};const ariaInvalidVal=htmlElement.getAttribute(ariaInvalidName);if(!htmlElement.hasAttribute(ariaInvalidName)||validStates.includes(ariaInvalidVal))return{pass:!1,message:()=>getMessage(this,this.utils.matcherHint(method,"element"),"Expected element to be marked as invalid with attribute",`${ariaInvalidName}="${String(!0)}"`,"Received",htmlElement.hasAttribute("aria-invalid")?`${ariaInvalidName}="${htmlElement.getAttribute(ariaInvalidName)}`:null)};const error=normalize(htmlElement.ownerDocument.getElementById(errormessageId)?.textContent??"");return{pass:void 0===expectedAccessibleErrorMessage?Boolean(error):expectedAccessibleErrorMessage instanceof RegExp?expectedAccessibleErrorMessage.test(error):this.equals(error,expectedAccessibleErrorMessage),message:()=>getMessage(this,this.utils.matcherHint(method,"element"),`Expected element ${to} have accessible error message`,expectedAccessibleErrorMessage??"","Received",error)}}function toHaveAccessibleName(htmlElement,expectedAccessibleName){checkHtmlElement(htmlElement,toHaveAccessibleName,this);const actualAccessibleName=(0,dist.AB)(htmlElement);let pass=!1;return pass=1===arguments.length?""!==actualAccessibleName:expectedAccessibleName instanceof RegExp?expectedAccessibleName.test(actualAccessibleName):this.equals(actualAccessibleName,expectedAccessibleName),{pass:pass,message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint(`${this.isNot?".not":""}.${toHaveAccessibleName.name}`,"element",""),`Expected element ${to} have accessible name`,expectedAccessibleName,"Received",actualAccessibleName)}}}function printAttribute(stringify,name,value){return void 0===value?name:`${name}=${stringify(value)}`}function getAttributeComment(stringify,name,value){return void 0===value?`element.hasAttribute(${stringify(name)})`:`element.getAttribute(${stringify(name)}) === ${stringify(value)}`}function toHaveAttribute(htmlElement,name,expectedValue){checkHtmlElement(htmlElement,toHaveAttribute,this);const isExpectedValuePresent=void 0!==expectedValue,hasAttribute=htmlElement.hasAttribute(name),receivedValue=htmlElement.getAttribute(name);return{pass:isExpectedValuePresent?hasAttribute&&this.equals(receivedValue,expectedValue):hasAttribute,message:()=>{const to=this.isNot?"not to":"to",receivedAttribute=hasAttribute?printAttribute(this.utils.stringify,name,receivedValue):null;return getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveAttribute","element",this.utils.printExpected(name),{secondArgument:isExpectedValuePresent?this.utils.printExpected(expectedValue):void 0,comment:getAttributeComment(this.utils.stringify,name,expectedValue)}),`Expected the element ${to} have attribute`,printAttribute(this.utils.stringify,name,expectedValue),"Received",receivedAttribute)}}}function splitClassNames(str){return str?str.split(/\s+/).filter((s=>s.length>0)):[]}function isSubset$1(subset,superset){return subset.every((item=>superset.includes(item)))}function toHaveClass(htmlElement,...params){checkHtmlElement(htmlElement,toHaveClass,this);const{expectedClassNames:expectedClassNames,options:options}=function getExpectedClassNamesAndOptions(params){const lastParam=params.pop();let expectedClassNames,options;return"object"==typeof lastParam?(expectedClassNames=params,options=lastParam):(expectedClassNames=params.concat(lastParam),options={exact:!1}),{expectedClassNames:expectedClassNames,options:options}}(params),received=splitClassNames(htmlElement.getAttribute("class")),expected=expectedClassNames.reduce(((acc,className)=>acc.concat(splitClassNames(className))),[]);return options.exact?{pass:isSubset$1(expected,received)&&expected.length===received.length,message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveClass","element",this.utils.printExpected(expected.join(" "))),`Expected the element ${to} have EXACTLY defined classes`,expected.join(" "),"Received",received.join(" "))}}:expected.length>0?{pass:isSubset$1(expected,received),message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveClass","element",this.utils.printExpected(expected.join(" "))),`Expected the element ${to} have class`,expected.join(" "),"Received",received.join(" "))}}:{pass:!!this.isNot&&received.length>0,message:()=>this.isNot?getMessage(this,this.utils.matcherHint(".not.toHaveClass","element",""),"Expected the element to have classes","(none)","Received",received.join(" ")):[this.utils.matcherHint(".toHaveClass","element"),"At least one expected class must be provided."].join("\n")}}function printoutStyles(styles){return Object.keys(styles).sort().map((prop=>`${prop}: ${styles[prop]};`)).join("\n")}function expectedDiff(diffFn,expected,computedStyles){const received=Array.from(computedStyles).filter((prop=>void 0!==expected[prop])).reduce(((obj,prop)=>Object.assign(obj,{[prop]:computedStyles.getPropertyValue(prop)})),{});return diffFn(printoutStyles(expected),printoutStyles(received)).replace(`${source_default().red("+ Received")}\n`,"")}function toHaveStyle(htmlElement,css){checkHtmlElement(htmlElement,toHaveStyle,this);const parsedCSS="object"==typeof css?css:function parseCSS(css,...args){const ast=$149c1bd638913645$export$98e6a39c04603d36(`selector { ${css} }`,{silent:!0}).stylesheet;if(ast.parsingErrors&&ast.parsingErrors.length>0){const{reason:reason,line:line}=ast.parsingErrors[0];throw new InvalidCSSError({css:css,message:`Syntax error parsing expected css: ${reason} on line: ${line}`},...args)}return ast.rules[0].declarations.filter((d=>"declaration"===d.type)).reduce(((obj,{property:property,value:value})=>Object.assign(obj,{[property]:value})),{})}(css,toHaveStyle,this),{getComputedStyle:getComputedStyle}=htmlElement.ownerDocument.defaultView,expected=function getStyleDeclaration(document,css){const styles={},copy=document.createElement("div");return Object.keys(css).forEach((property=>{copy.style[property]=css[property],styles[property]=copy.style[property]})),styles}(htmlElement.ownerDocument,parsedCSS),received=getComputedStyle(htmlElement);return{pass:(styles=expected,computedStyle=received,!!Object.keys(styles).length&&Object.entries(styles).every((([prop,value])=>computedStyle[prop]===value||computedStyle.getPropertyValue(prop.toLowerCase())===value))),message:()=>{const matcher=(this.isNot?".not":"")+".toHaveStyle";return[this.utils.matcherHint(matcher,"element",""),expectedDiff(this.utils.diff,expected,received)].join("\n\n")}};var styles,computedStyle}function toHaveFocus(element){return checkHtmlElement(element,toHaveFocus,this),{pass:element.ownerDocument.activeElement===element,message:()=>[this.utils.matcherHint((this.isNot?".not":"")+".toHaveFocus","element",""),"",...this.isNot?["Received element is focused:",`  ${this.utils.printReceived(element)}`]:["Expected element with focus:",`  ${this.utils.printExpected(element)}`,"Received element with focus:",`  ${this.utils.printReceived(element.ownerDocument.activeElement)}`]].join("\n")}}function getFormValue(container,name){const elements=[...container.querySelectorAll(`[name="${css_escape_default()(name)}"]`)];if(0!==elements.length)return 1===elements.length?getSingleElementValue(elements[0]):function getMultiElementValue(elements){const types=uniq_default()(elements.map((element=>element.type)));if(1!==types.length)throw new Error("Multiple form elements with the same name must be of the same type");switch(types[0]){case"radio":{const theChosenOne=elements.find((radio=>radio.checked));return theChosenOne?theChosenOne.value:void 0}case"checkbox":return elements.filter((checkbox=>checkbox.checked)).map((checkbox=>checkbox.value));default:return elements.map((element=>element.value))}}(elements)}function getPureName(name){return/\[\]$/.test(name)?name.slice(0,-2):name}function toHaveFormValues(formElement,expectedValues){if(checkHtmlElement(formElement,toHaveFormValues,this),!formElement.elements)throw new Error("toHaveFormValues must be called on a form or a fieldset");const formValues=function getAllFormValues(container){return Array.from(container.elements).map((element=>element.name)).reduce(((obj,name)=>({...obj,[getPureName(name)]:getFormValue(container,name)})),{})}(formElement);return{pass:Object.entries(expectedValues).every((([name,expectedValue])=>isEqualWith_default()(formValues[name],expectedValue,compareArraysAsSet))),message:()=>{const to=this.isNot?"not to":"to",matcher=(this.isNot?".not":"")+".toHaveFormValues",commonKeyValues=Object.keys(formValues).filter((key=>expectedValues.hasOwnProperty(key))).reduce(((obj,key)=>({...obj,[key]:formValues[key]})),{});return[this.utils.matcherHint(matcher,"element",""),`Expected the element ${to} have form values`,this.utils.diff(expectedValues,commonKeyValues)].join("\n\n")}}}function isElementVisible(element,previousElement){return function isStyleVisible(element){const{getComputedStyle:getComputedStyle}=element.ownerDocument.defaultView,{display:display,visibility:visibility,opacity:opacity}=getComputedStyle(element);return"none"!==display&&"hidden"!==visibility&&"collapse"!==visibility&&"0"!==opacity&&0!==opacity}(element)&&function isAttributeVisible(element,previousElement){let detailsVisibility;return detailsVisibility=previousElement?"DETAILS"!==element.nodeName||"SUMMARY"===previousElement.nodeName||element.hasAttribute("open"):"DETAILS"!==element.nodeName||element.hasAttribute("open"),!element.hasAttribute("hidden")&&detailsVisibility}(element,previousElement)&&(!element.parentElement||isElementVisible(element.parentElement,element))}function toBeVisible(element){checkHtmlElement(element,toBeVisible,this);const isInDocument=element.ownerDocument===element.getRootNode({composed:!0}),isVisible=isInDocument&&isElementVisible(element);return{pass:isVisible,message:()=>{const is=isVisible?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeVisible","element",""),"",`Received element ${is} visible${isInDocument?"":" (element is not in the document)"}:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}const FORM_TAGS$2=["fieldset","input","select","optgroup","option","button","textarea"];function isElementDisabledByParent(element,parent){return isElementDisabled(parent)&&!function isFirstLegendChildOfFieldset(element,parent){return"legend"===getTag(element)&&"fieldset"===getTag(parent)&&element.isSameNode(Array.from(parent.children).find((child=>"legend"===getTag(child))))}(element,parent)}function canElementBeDisabled(element){const tag=getTag(element);return FORM_TAGS$2.includes(tag)||function isCustomElement(tag){return tag.includes("-")}(tag)}function isElementDisabled(element){return canElementBeDisabled(element)&&element.hasAttribute("disabled")}function isAncestorDisabled(element){const parent=element.parentElement;return Boolean(parent)&&(isElementDisabledByParent(element,parent)||isAncestorDisabled(parent))}function isElementOrAncestorDisabled(element){return canElementBeDisabled(element)&&(isElementDisabled(element)||isAncestorDisabled(element))}function toBeDisabled(element){checkHtmlElement(element,toBeDisabled,this);const isDisabled=isElementOrAncestorDisabled(element);return{pass:isDisabled,message:()=>{const is=isDisabled?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeDisabled","element",""),"",`Received element ${is} disabled:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}function toBeEnabled(element){checkHtmlElement(element,toBeEnabled,this);const isEnabled=!isElementOrAncestorDisabled(element);return{pass:isEnabled,message:()=>{const is=isEnabled?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeEnabled","element",""),"",`Received element ${is} enabled:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}const FORM_TAGS$1=["select","textarea"],ARIA_FORM_TAGS=["input","select","textarea"],UNSUPPORTED_INPUT_TYPES=["color","hidden","range","submit","image","reset"],SUPPORTED_ARIA_ROLES=["combobox","gridcell","radiogroup","spinbutton","tree"];function toBeRequired(element){checkHtmlElement(element,toBeRequired,this);const isRequired=function isRequiredOnFormTagsExceptInput(element){return FORM_TAGS$1.includes(getTag(element))&&element.hasAttribute("required")}(element)||function isRequiredOnSupportedInput(element){return"input"===getTag(element)&&element.hasAttribute("required")&&(element.hasAttribute("type")&&!UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute("type"))||!element.hasAttribute("type"))}(element)||function isElementRequiredByARIA(element){return element.hasAttribute("aria-required")&&"true"===element.getAttribute("aria-required")&&(ARIA_FORM_TAGS.includes(getTag(element))||element.hasAttribute("role")&&SUPPORTED_ARIA_ROLES.includes(element.getAttribute("role")))}(element);return{pass:isRequired,message:()=>{const is=isRequired?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeRequired","element",""),"",`Received element ${is} required:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}const FORM_TAGS=["form","input","select","textarea"];function isElementInvalid(element){const isHaveAriaInvalid=function isElementHavingAriaInvalid(element){return element.hasAttribute("aria-invalid")&&"false"!==element.getAttribute("aria-invalid")}(element);return function isSupportsValidityMethod(element){return FORM_TAGS.includes(getTag(element))}(element)?isHaveAriaInvalid||!element.checkValidity():isHaveAriaInvalid}function toBeInvalid(element){checkHtmlElement(element,toBeInvalid,this);const isInvalid=isElementInvalid(element);return{pass:isInvalid,message:()=>{const is=isInvalid?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeInvalid","element",""),"",`Received element ${is} currently invalid:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}function toBeValid(element){checkHtmlElement(element,toBeValid,this);const isValid=!isElementInvalid(element);return{pass:isValid,message:()=>{const is=isValid?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeValid","element",""),"",`Received element ${is} currently valid:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}function toHaveValue(htmlElement,expectedValue){if(checkHtmlElement(htmlElement,toHaveValue,this),"input"===htmlElement.tagName.toLowerCase()&&["checkbox","radio"].includes(htmlElement.type))throw new Error("input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead");const receivedValue=getSingleElementValue(htmlElement),expectsValue=void 0!==expectedValue;let expectedTypedValue=expectedValue,receivedTypedValue=receivedValue;return expectedValue==receivedValue&&expectedValue!==receivedValue&&(expectedTypedValue=`${expectedValue} (${typeof expectedValue})`,receivedTypedValue=`${receivedValue} (${typeof receivedValue})`),{pass:expectsValue?isEqualWith_default()(receivedValue,expectedValue,compareArraysAsSet):Boolean(receivedValue),message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveValue","element",expectedValue),`Expected the element ${to} have value`,expectsValue?expectedTypedValue:"(any)","Received",receivedTypedValue)}}}function toHaveDisplayValue(htmlElement,expectedValue){checkHtmlElement(htmlElement,toHaveDisplayValue,this);const tagName=htmlElement.tagName.toLowerCase();if(!["select","input","textarea"].includes(tagName))throw new Error(".toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.");if("input"===tagName&&["radio","checkbox"].includes(htmlElement.type))throw new Error(`.toHaveDisplayValue() currently does not support input[type="${htmlElement.type}"], try with another matcher instead.`);const values=function getValues(tagName,htmlElement){return"select"===tagName?Array.from(htmlElement).filter((option=>option.selected)).map((option=>option.textContent)):[htmlElement.value]}(tagName,htmlElement),expectedValues=function getExpectedValues(expectedValue){return expectedValue instanceof Array?expectedValue:[expectedValue]}(expectedValue),numberOfMatchesWithValues=expectedValues.filter((expected=>values.some((value=>expected instanceof RegExp?expected.test(value):this.equals(value,String(expected)))))).length,matchedWithAllValues=numberOfMatchesWithValues===values.length,matchedWithAllExpectedValues=numberOfMatchesWithValues===expectedValues.length;return{pass:matchedWithAllValues&&matchedWithAllExpectedValues,message:()=>getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveDisplayValue","element",""),`Expected element ${this.isNot?"not ":""}to have display value`,expectedValue,"Received",values)}}function toBeChecked(element){checkHtmlElement(element,toBeChecked,this);const isValidInput=()=>"input"===element.tagName.toLowerCase()&&["checkbox","radio"].includes(element.type);if(!(isValidInput()||roleSupportsChecked(element.getAttribute("role"))&&["true","false"].includes(element.getAttribute("aria-checked"))))return{pass:!1,message:()=>`only inputs with type="checkbox" or type="radio" or elements with ${function supportedRolesSentence(){return function toSentence(array,{wordConnector:wordConnector=", ",lastWordConnector:lastWordConnector=" and "}={}){return[array.slice(0,-1).join(wordConnector),array[array.length-1]].join(array.length>1?lastWordConnector:"")}(function supportedRoles(){return lib.uJ.keys().filter(roleSupportsChecked)}().map((role=>`role="${role}"`)),{lastWordConnector:" or "})}()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`};const isChecked=()=>isValidInput()?element.checked:"true"===element.getAttribute("aria-checked");return{pass:isChecked(),message:()=>{const is=isChecked()?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeChecked","element",""),"",`Received element ${is} checked:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}function roleSupportsChecked(role){return void 0!==lib.uJ.get(role)?.props["aria-checked"]}function toBePartiallyChecked(element){checkHtmlElement(element,toBePartiallyChecked,this);const isValidInput=()=>"input"===element.tagName.toLowerCase()&&"checkbox"===element.type;if(!isValidInput()&&"checkbox"!==element.getAttribute("role"))return{pass:!1,message:()=>'only inputs with type="checkbox" or elements with role="checkbox" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead'};const isPartiallyChecked=()=>{const isAriaMixed="mixed"===element.getAttribute("aria-checked");return isValidInput()&&element.indeterminate||isAriaMixed};return{pass:isPartiallyChecked(),message:()=>{const is=isPartiallyChecked()?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBePartiallyChecked","element",""),"",`Received element ${is} partially checked:`,`  ${this.utils.printReceived(element.cloneNode(!1))}`].join("\n")}}}function toHaveDescription(htmlElement,checkWith){deprecate("toHaveDescription","Please use toHaveAccessibleDescription."),checkHtmlElement(htmlElement,toHaveDescription,this);const expectsDescription=void 0!==checkWith,descriptionIDs=(htmlElement.getAttribute("aria-describedby")||"").split(/\s+/).filter(Boolean);let description="";if(descriptionIDs.length>0){const document=htmlElement.ownerDocument,descriptionEls=descriptionIDs.map((descriptionID=>document.getElementById(descriptionID))).filter(Boolean);description=normalize(descriptionEls.map((el=>el.textContent)).join(" "))}return{pass:expectsDescription?checkWith instanceof RegExp?checkWith.test(description):this.equals(description,checkWith):Boolean(description),message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveDescription","element",""),`Expected the element ${to} have description`,this.utils.printExpected(checkWith),"Received",this.utils.printReceived(description))}}}function toHaveErrorMessage(htmlElement,checkWith){if(deprecate("toHaveErrorMessage","Please use toHaveAccessibleErrorMessage."),checkHtmlElement(htmlElement,toHaveErrorMessage,this),!htmlElement.hasAttribute("aria-invalid")||"false"===htmlElement.getAttribute("aria-invalid")){const not=this.isNot?".not":"";return{pass:!1,message:()=>getMessage(this,this.utils.matcherHint(`${not}.toHaveErrorMessage`,"element",""),"Expected the element to have invalid state indicated by",'aria-invalid="true"',"Received",htmlElement.hasAttribute("aria-invalid")?`aria-invalid="${htmlElement.getAttribute("aria-invalid")}"`:this.utils.printReceived(""))}}const expectsErrorMessage=void 0!==checkWith,errormessageIDs=(htmlElement.getAttribute("aria-errormessage")||"").split(/\s+/).filter(Boolean);let errormessage="";if(errormessageIDs.length>0){const document=htmlElement.ownerDocument,errormessageEls=errormessageIDs.map((errormessageID=>document.getElementById(errormessageID))).filter(Boolean);errormessage=normalize(errormessageEls.map((el=>el.textContent)).join(" "))}return{pass:expectsErrorMessage?checkWith instanceof RegExp?checkWith.test(errormessage):this.equals(errormessage,checkWith):Boolean(errormessage),message:()=>{const to=this.isNot?"not to":"to";return getMessage(this,this.utils.matcherHint((this.isNot?".not":"")+".toHaveErrorMessage","element",""),`Expected the element ${to} have error message`,this.utils.printExpected(checkWith),"Received",this.utils.printReceived(errormessage))}}}var events2,build=__webpack_require__("./node_modules/jest-mock/build/index.js"),Channel=class{constructor(input={}){this.sender=Math.random().toString(16).slice(2),this.events={},this.data={},this.transports=[],this.isAsync=input.async||!1,void 0!==input.transports?(this.transports=input.transports||[],this.transports.forEach((t=>{t.setHandler((event=>this.handleEvent(event)))}))):this.transports=input.transport?[input.transport]:[],this.transports.forEach((t=>{t.setHandler((event=>this.handleEvent(event)))}))}get hasTransport(){return this.transports.length>0}addListener(eventName,listener){this.events[eventName]=this.events[eventName]||[],this.events[eventName].push(listener)}emit(eventName,...args){let event={type:eventName,args:args,from:this.sender},options={};args.length>=1&&args[0]&&args[0].options&&(options=args[0].options);let handler=()=>{this.transports.forEach((t=>{t.send(event,options)})),this.handleEvent(event)};this.isAsync?setImmediate(handler):handler()}last(eventName){return this.data[eventName]}eventNames(){return Object.keys(this.events)}listenerCount(eventName){let listeners=this.listeners(eventName);return listeners?listeners.length:0}listeners(eventName){return this.events[eventName]||void 0}once(eventName,listener){let onceListener=this.onceListener(eventName,listener);this.addListener(eventName,onceListener)}removeAllListeners(eventName){eventName?this.events[eventName]&&delete this.events[eventName]:this.events={}}removeListener(eventName,listener){let listeners=this.listeners(eventName);listeners&&(this.events[eventName]=listeners.filter((l=>l!==listener)))}on(eventName,listener){this.addListener(eventName,listener)}off(eventName,listener){this.removeListener(eventName,listener)}handleEvent(event){let listeners=this.listeners(event.type);listeners&&listeners.length&&listeners.forEach((fn=>{fn.apply(event,event.args)})),this.data[event.type]=event.args}onceListener(eventName,listener){let onceListener=(...args)=>(this.removeListener(eventName,onceListener),listener(...args));return onceListener}},scope=(()=>{let win;return win=typeof window<"u"?window:typeof globalThis<"u"?globalThis:typeof __webpack_require__.g<"u"?__webpack_require__.g:typeof self<"u"?self:{},win})(),events=((events2=events||{}).CHANNEL_CREATED="channelCreated",events2.CONFIG_ERROR="configError",events2.STORY_INDEX_INVALIDATED="storyIndexInvalidated",events2.STORY_SPECIFIED="storySpecified",events2.SET_CONFIG="setConfig",events2.SET_STORIES="setStories",events2.SET_INDEX="setIndex",events2.SET_CURRENT_STORY="setCurrentStory",events2.CURRENT_STORY_WAS_SET="currentStoryWasSet",events2.FORCE_RE_RENDER="forceReRender",events2.FORCE_REMOUNT="forceRemount",events2.PRELOAD_ENTRIES="preloadStories",events2.STORY_PREPARED="storyPrepared",events2.DOCS_PREPARED="docsPrepared",events2.STORY_CHANGED="storyChanged",events2.STORY_UNCHANGED="storyUnchanged",events2.STORY_RENDERED="storyRendered",events2.STORY_MISSING="storyMissing",events2.STORY_ERRORED="storyErrored",events2.STORY_THREW_EXCEPTION="storyThrewException",events2.STORY_RENDER_PHASE_CHANGED="storyRenderPhaseChanged",events2.PLAY_FUNCTION_THREW_EXCEPTION="playFunctionThrewException",events2.UPDATE_STORY_ARGS="updateStoryArgs",events2.STORY_ARGS_UPDATED="storyArgsUpdated",events2.RESET_STORY_ARGS="resetStoryArgs",events2.SET_GLOBALS="setGlobals",events2.UPDATE_GLOBALS="updateGlobals",events2.GLOBALS_UPDATED="globalsUpdated",events2.REGISTER_SUBSCRIPTION="registerSubscription",events2.PREVIEW_KEYDOWN="previewKeydown",events2.PREVIEW_BUILDER_PROGRESS="preview_builder_progress",events2.SELECT_STORY="selectStory",events2.STORIES_COLLAPSE_ALL="storiesCollapseAll",events2.STORIES_EXPAND_ALL="storiesExpandAll",events2.DOCS_RENDERED="docsRendered",events2.SHARED_STATE_CHANGED="sharedStateChanged",events2.SHARED_STATE_SET="sharedStateSet",events2.NAVIGATE_URL="navigateUrl",events2.UPDATE_QUERY_PARAMS="updateQueryParams",events2.REQUEST_WHATS_NEW_DATA="requestWhatsNewData",events2.RESULT_WHATS_NEW_DATA="resultWhatsNewData",events2.SET_WHATS_NEW_CACHE="setWhatsNewCache",events2.TOGGLE_WHATS_NEW_NOTIFICATIONS="toggleWhatsNewNotifications",events2.TELEMETRY_ERROR="telemetryError",events2),{CHANNEL_CREATED:CHANNEL_CREATED,CONFIG_ERROR:CONFIG_ERROR,CURRENT_STORY_WAS_SET:CURRENT_STORY_WAS_SET,DOCS_PREPARED:DOCS_PREPARED,DOCS_RENDERED:DOCS_RENDERED,FORCE_RE_RENDER:FORCE_RE_RENDER,FORCE_REMOUNT:FORCE_REMOUNT,GLOBALS_UPDATED:GLOBALS_UPDATED,NAVIGATE_URL:NAVIGATE_URL,PLAY_FUNCTION_THREW_EXCEPTION:PLAY_FUNCTION_THREW_EXCEPTION,PRELOAD_ENTRIES:PRELOAD_ENTRIES,PREVIEW_BUILDER_PROGRESS:PREVIEW_BUILDER_PROGRESS,PREVIEW_KEYDOWN:PREVIEW_KEYDOWN,REGISTER_SUBSCRIPTION:REGISTER_SUBSCRIPTION,RESET_STORY_ARGS:RESET_STORY_ARGS,SELECT_STORY:SELECT_STORY,SET_CONFIG:SET_CONFIG,SET_CURRENT_STORY:SET_CURRENT_STORY,SET_GLOBALS:SET_GLOBALS,SET_INDEX:SET_INDEX,SET_STORIES:SET_STORIES,SHARED_STATE_CHANGED:SHARED_STATE_CHANGED,SHARED_STATE_SET:SHARED_STATE_SET,STORIES_COLLAPSE_ALL:STORIES_COLLAPSE_ALL,STORIES_EXPAND_ALL:STORIES_EXPAND_ALL,STORY_ARGS_UPDATED:STORY_ARGS_UPDATED,STORY_CHANGED:STORY_CHANGED,STORY_ERRORED:STORY_ERRORED,STORY_INDEX_INVALIDATED:STORY_INDEX_INVALIDATED,STORY_MISSING:STORY_MISSING,STORY_PREPARED:STORY_PREPARED,STORY_RENDER_PHASE_CHANGED:STORY_RENDER_PHASE_CHANGED,STORY_RENDERED:STORY_RENDERED,STORY_SPECIFIED:STORY_SPECIFIED,STORY_THREW_EXCEPTION:STORY_THREW_EXCEPTION,STORY_UNCHANGED:STORY_UNCHANGED,UPDATE_GLOBALS:UPDATE_GLOBALS,UPDATE_QUERY_PARAMS:UPDATE_QUERY_PARAMS,UPDATE_STORY_ARGS:UPDATE_STORY_ARGS,REQUEST_WHATS_NEW_DATA:REQUEST_WHATS_NEW_DATA,RESULT_WHATS_NEW_DATA:RESULT_WHATS_NEW_DATA,SET_WHATS_NEW_CACHE:SET_WHATS_NEW_CACHE,TOGGLE_WHATS_NEW_NOTIFICATIONS:TOGGLE_WHATS_NEW_NOTIFICATIONS,TELEMETRY_ERROR:TELEMETRY_ERROR}=events,IGNORED_EXCEPTION=new Error("ignoredException"),{LOGLEVEL:LOGLEVEL}=scope,levels={trace:1,debug:2,info:3,warn:4,error:5,silent:10},currentLogLevelNumber=levels[LOGLEVEL]||levels.info,logger={trace:(message,...rest)=>{currentLogLevelNumber<=levels.trace&&console.trace(message,...rest)},debug:(message,...rest)=>{currentLogLevelNumber<=levels.debug&&console.debug(message,...rest)},info:(message,...rest)=>{currentLogLevelNumber<=levels.info&&console.info(message,...rest)},warn:(message,...rest)=>{currentLogLevelNumber<=levels.warn&&console.warn(message,...rest)},error:(message,...rest)=>{currentLogLevelNumber<=levels.error&&console.error(message,...rest)},log:(message,...rest)=>{currentLogLevelNumber<levels.silent&&console.log(message,...rest)}},logged=new Set,once=type=>(message,...rest)=>{if(!logged.has(message))return logged.add(message),logger[type](message,...rest)};once.clear=()=>logged.clear(),once.trace=once("trace"),once.debug=once("debug"),once.info=once("info"),once.warn=once("warn"),once.error=once("error"),once.log=once("log");once("warn");var pretty=type=>(...args)=>{let argArray=[];if(args.length){let reResultArray,startTagRe=/<span\s+style=(['"])([^'"]*)\1\s*>/gi,endTagRe=/<\/span>/gi;for(argArray.push(args[0].replace(startTagRe,"%c").replace(endTagRe,"%c"));reResultArray=startTagRe.exec(args[0]);)argArray.push(reResultArray[2]),argArray.push("");for(let j=1;j<args.length;j++)argArray.push(args[j])}logger[type].apply(logger,argArray)};pretty.trace=pretty("trace"),pretty.debug=pretty("debug"),pretty.info=pretty("info"),pretty.warn=pretty("warn"),pretty.error=pretty("error");var{CONFIG_TYPE:CONFIG_TYPE}=scope;var AddonStore=class{constructor(){this.getChannel=()=>{if(!this.channel){let channel=function mockChannel(){return new Channel({transport:{setHandler:()=>{},send:()=>{}}})}();return this.setChannel(channel),channel}return this.channel},this.getServerChannel=()=>{if(!this.serverChannel)throw new Error("Accessing non-existent serverChannel");return this.serverChannel},this.ready=()=>this.promise,this.hasChannel=()=>!!this.channel,this.hasServerChannel=()=>!!this.serverChannel,this.setChannel=channel=>{this.channel=channel,this.resolve()},this.setServerChannel=channel=>{this.serverChannel=channel},this.promise=new Promise((res=>{this.resolve=()=>res(this.getChannel())}))}},KEY="__STORYBOOK_ADDONS_PREVIEW";var CallStates2,addons=function getAddonsStore(){return scope[KEY]||(scope[KEY]=new AddonStore),scope[KEY]}(),CallStates=((CallStates2=CallStates||{}).DONE="done",CallStates2.ERROR="error",CallStates2.ACTIVE="active",CallStates2.WAITING="waiting",CallStates2),EVENTS_CALL="storybook/instrumenter/call",EVENTS_SYNC="storybook/instrumenter/sync",EVENTS_START="storybook/instrumenter/start",EVENTS_BACK="storybook/instrumenter/back",EVENTS_GOTO="storybook/instrumenter/goto",EVENTS_NEXT="storybook/instrumenter/next",EVENTS_END="storybook/instrumenter/end",controlsDisabled={start:!1,back:!1,goto:!1,next:!1,end:!1},alreadyCompletedException=new Error("This function ran after the play function completed. Did you forget to `await` it?"),isObject=o=>"[object Object]"===Object.prototype.toString.call(o),isInstrumentable=o=>{if(!isObject(o)&&!(o=>"[object Module]"===Object.prototype.toString.call(o))(o))return!1;if(void 0===o.constructor)return!0;let proto=o.constructor.prototype;return!(!isObject(proto)||!1===Object.prototype.hasOwnProperty.call(proto,"isPrototypeOf"))},getInitialState=()=>({renderPhase:void 0,isDebugging:!1,isPlaying:!1,isLocked:!1,cursor:0,calls:[],shadowCalls:[],callRefsByResult:new Map,chainedCallIds:new Set,ancestors:[],playUntil:void 0,resolvers:{},syncTimeout:void 0}),getRetainedState=(state,isDebugging=!1)=>{let calls=(isDebugging?state.shadowCalls:state.calls).filter((call=>call.retain));if(!calls.length)return;let callRefsByResult=new Map(Array.from(state.callRefsByResult.entries()).filter((([,ref])=>ref.retain)));return{cursor:calls.length,calls:calls,callRefsByResult:callRefsByResult}},Instrumenter=class{constructor(){this.initialized=!1,this.channel=addons.getChannel(),this.state=scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__||{};let resetState=({storyId:storyId,isPlaying:isPlaying=!0,isDebugging:isDebugging=!1})=>{let state=this.getState(storyId);this.setState(storyId,{...getInitialState(),...getRetainedState(state,isDebugging),shadowCalls:isDebugging?state.shadowCalls:[],chainedCallIds:isDebugging?state.chainedCallIds:new Set,playUntil:isDebugging?state.playUntil:void 0,isPlaying:isPlaying,isDebugging:isDebugging}),this.sync(storyId)};this.channel.on(FORCE_REMOUNT,resetState),this.channel.on(STORY_RENDER_PHASE_CHANGED,(({storyId:storyId,newPhase:newPhase})=>{let{isDebugging:isDebugging}=this.getState(storyId);this.setState(storyId,{renderPhase:newPhase}),"preparing"===newPhase&&isDebugging&&resetState({storyId:storyId}),"playing"===newPhase&&resetState({storyId:storyId,isDebugging:isDebugging}),"played"===newPhase&&this.setState(storyId,{isLocked:!1,isPlaying:!1,isDebugging:!1}),"errored"===newPhase&&this.setState(storyId,{isLocked:!1,isPlaying:!1})})),this.channel.on(SET_CURRENT_STORY,(()=>{this.initialized?this.cleanup():this.initialized=!0}));let start=({storyId:storyId,playUntil:playUntil})=>{this.getState(storyId).isDebugging||this.setState(storyId,(({calls:calls})=>({calls:[],shadowCalls:calls.map((call=>({...call,status:"waiting"}))),isDebugging:!0})));let log=this.getLog(storyId);this.setState(storyId,(({shadowCalls:shadowCalls})=>{var _a;if(playUntil||!log.length)return{playUntil:playUntil};let firstRowIndex=shadowCalls.findIndex((call=>call.id===log[0].callId));return{playUntil:null==(_a=shadowCalls.slice(0,firstRowIndex).filter((call=>call.interceptable&&!call.ancestors.length)).slice(-1)[0])?void 0:_a.id}})),this.channel.emit(FORCE_REMOUNT,{storyId:storyId,isDebugging:!0})},end=({storyId:storyId})=>{this.setState(storyId,{playUntil:void 0,isDebugging:!1}),Object.values(this.getState(storyId).resolvers).forEach((resolve=>resolve()))};this.channel.on(EVENTS_START,start),this.channel.on(EVENTS_BACK,(({storyId:storyId})=>{var _a;let log=this.getLog(storyId).filter((call=>!call.ancestors.length)),last=log.reduceRight(((res,item,index)=>res>=0||"waiting"===item.status?res:index),-1);start({storyId:storyId,playUntil:null==(_a=log[last-1])?void 0:_a.callId})})),this.channel.on(EVENTS_GOTO,(({storyId:storyId,callId:callId})=>{var _a;let{calls:calls,shadowCalls:shadowCalls,resolvers:resolvers}=this.getState(storyId),call=calls.find((({id:id})=>id===callId)),shadowCall=shadowCalls.find((({id:id})=>id===callId));if(!call&&shadowCall&&Object.values(resolvers).length>0){let nextId=null==(_a=this.getLog(storyId).find((c=>"waiting"===c.status)))?void 0:_a.callId;shadowCall.id!==nextId&&this.setState(storyId,{playUntil:shadowCall.id}),Object.values(resolvers).forEach((resolve=>resolve()))}else start({storyId:storyId,playUntil:callId})})),this.channel.on(EVENTS_NEXT,(({storyId:storyId})=>{var _a;let{resolvers:resolvers}=this.getState(storyId);if(Object.values(resolvers).length>0)Object.values(resolvers).forEach((resolve=>resolve()));else{let nextId=null==(_a=this.getLog(storyId).find((c=>"waiting"===c.status)))?void 0:_a.callId;nextId?start({storyId:storyId,playUntil:nextId}):end({storyId:storyId})}})),this.channel.on(EVENTS_END,end)}getState(storyId){return this.state[storyId]||getInitialState()}setState(storyId,update){let state=this.getState(storyId),patch="function"==typeof update?update(state):update;this.state={...this.state,[storyId]:{...state,...patch}},scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__=this.state}cleanup(){this.state=Object.entries(this.state).reduce(((acc,[storyId,state])=>{let retainedState=getRetainedState(state);return retainedState&&(acc[storyId]=Object.assign(getInitialState(),retainedState)),acc}),{});let payload={controlStates:controlsDisabled,logItems:[]};this.channel.emit(EVENTS_SYNC,payload),scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__=this.state}getLog(storyId){let{calls:calls,shadowCalls:shadowCalls}=this.getState(storyId),merged=[...shadowCalls];calls.forEach(((call,index)=>{merged[index]=call}));let seen=new Set;return merged.reduceRight(((acc,call)=>(call.args.forEach((arg=>{null!=arg&&arg.__callId__&&seen.add(arg.__callId__)})),call.path.forEach((node=>{node.__callId__&&seen.add(node.__callId__)})),(call.interceptable||call.exception)&&!seen.has(call.id)&&(acc.unshift({callId:call.id,status:call.status,ancestors:call.ancestors}),seen.add(call.id)),acc)),[])}instrument(obj,options){if(!isInstrumentable(obj))return obj;let{mutate:mutate=!1,path:path=[]}=options;return Object.keys(obj).reduce(((acc,key)=>{let value=obj[key];return"function"!=typeof value?(acc[key]=this.instrument(value,{...options,path:path.concat(key)}),acc):"function"==typeof value.__originalFn__?(acc[key]=value,acc):(acc[key]=(...args)=>this.track(key,value,args,options),acc[key].__originalFn__=value,Object.defineProperty(acc[key],"name",{value:key,writable:!1}),Object.keys(value).length>0&&Object.assign(acc[key],this.instrument({...value},{...options,path:path.concat(key)})),acc)}),mutate?obj:(obj=>{try{return new obj.constructor}catch{return{}}})(obj))}track(method,fn,args,options){var _a,_b,_c,_d;let storyId=(null==(_a=null==args?void 0:args[0])?void 0:_a.__storyId__)||(null==(_d=null==(_c=null==(_b=scope.__STORYBOOK_PREVIEW__)?void 0:_b.selectionStore)?void 0:_c.selection)?void 0:_d.storyId),{cursor:cursor,ancestors:ancestors}=this.getState(storyId);this.setState(storyId,{cursor:cursor+1});let id=`${ancestors.slice(-1)[0]||storyId} [${cursor}] ${method}`,{path:path=[],intercept:intercept=!1,retain:retain=!1}=options,interceptable="function"==typeof intercept?intercept(method,path):intercept,call={id:id,cursor:cursor,storyId:storyId,ancestors:ancestors,path:path,method:method,args:args,interceptable:interceptable,retain:retain},result=(interceptable&&!ancestors.length?this.intercept:this.invoke).call(this,fn,call,options);return this.instrument(result,{...options,mutate:!0,path:[{__callId__:call.id}]})}intercept(fn,call,options){let{chainedCallIds:chainedCallIds,isDebugging:isDebugging,playUntil:playUntil}=this.getState(call.storyId),isChainedUpon=chainedCallIds.has(call.id);return!isDebugging||isChainedUpon||playUntil?(playUntil===call.id&&this.setState(call.storyId,{playUntil:void 0}),this.invoke(fn,call,options)):new Promise((resolve=>{this.setState(call.storyId,(({resolvers:resolvers})=>({isLocked:!1,resolvers:{...resolvers,[call.id]:resolve}})))})).then((()=>(this.setState(call.storyId,(state=>{let{[call.id]:_,...resolvers}=state.resolvers;return{isLocked:!0,resolvers:resolvers}})),this.invoke(fn,call,options))))}invoke(fn,call,options){let{callRefsByResult:callRefsByResult,renderPhase:renderPhase}=this.getState(call.storyId),serializeValues=value=>{var _a,_b;if(callRefsByResult.has(value))return callRefsByResult.get(value);if(value instanceof Array)return value.map(serializeValues);if(value instanceof Date)return{__date__:{value:value.toISOString()}};if(value instanceof Error){let{name:name,message:message,stack:stack}=value;return{__error__:{name:name,message:message,stack:stack}}}if(value instanceof RegExp){let{flags:flags,source:source}=value;return{__regexp__:{flags:flags,source:source}}}if(value instanceof scope.window.HTMLElement){let{prefix:prefix,localName:localName,id:id,classList:classList,innerText:innerText}=value;return{__element__:{prefix:prefix,localName:localName,id:id,classNames:Array.from(classList),innerText:innerText}}}return"function"==typeof value?{__function__:{name:value.name}}:"symbol"==typeof value?{__symbol__:{description:value.description}}:"object"==typeof value&&(null==(_a=null==value?void 0:value.constructor)?void 0:_a.name)&&"Object"!==(null==(_b=null==value?void 0:value.constructor)?void 0:_b.name)?{__class__:{name:value.constructor.name}}:"[object Object]"===Object.prototype.toString.call(value)?Object.fromEntries(Object.entries(value).map((([key,val])=>[key,serializeValues(val)]))):value},info={...call,args:call.args.map(serializeValues)};call.path.forEach((ref=>{null!=ref&&ref.__callId__&&this.setState(call.storyId,(({chainedCallIds:chainedCallIds})=>({chainedCallIds:new Set(Array.from(chainedCallIds).concat(ref.__callId__))})))}));let handleException=e=>{if(e instanceof Error){let{name:name,message:message,stack:stack,callId:callId=call.id}=e,exception={name:name,message:message,stack:stack,callId:callId};if(this.update({...info,status:"error",exception:exception}),this.setState(call.storyId,(state=>({callRefsByResult:new Map([...Array.from(state.callRefsByResult.entries()),[e,{__callId__:call.id,retain:call.retain}]])}))),call.ancestors.length)throw Object.prototype.hasOwnProperty.call(e,"callId")||Object.defineProperty(e,"callId",{value:call.id}),e;if(e!==alreadyCompletedException)throw logger.warn(e),IGNORED_EXCEPTION}throw e};try{if("played"===renderPhase&&!call.retain)throw alreadyCompletedException;let result=fn(...(options.getArgs?options.getArgs(call,this.getState(call.storyId)):call.args).map((arg=>"function"!=typeof arg||Object.keys(arg).length?arg:(...args)=>{let{cursor:cursor,ancestors:ancestors}=this.getState(call.storyId);this.setState(call.storyId,{cursor:0,ancestors:[...ancestors,call.id]});let restore=()=>this.setState(call.storyId,{cursor:cursor,ancestors:ancestors}),willRestore=!1;try{let res=arg(...args);return res instanceof Promise?(willRestore=!0,res.finally(restore)):res}finally{willRestore||restore()}})));return result&&["object","function","symbol"].includes(typeof result)&&this.setState(call.storyId,(state=>({callRefsByResult:new Map([...Array.from(state.callRefsByResult.entries()),[result,{__callId__:call.id,retain:call.retain}]])}))),this.update({...info,status:result instanceof Promise?"active":"done"}),result instanceof Promise?result.then((value=>(this.update({...info,status:"done"}),value)),handleException):result}catch(e){return handleException(e)}}update(call){this.channel.emit(EVENTS_CALL,call),this.setState(call.storyId,(({calls:calls})=>{let callsById=calls.concat(call).reduce(((a,c)=>Object.assign(a,{[c.id]:c})),{});return{calls:Object.values(callsById).sort(((a,b)=>a.id.localeCompare(b.id,void 0,{numeric:!0})))}})),this.sync(call.storyId)}sync(storyId){let synchronize=()=>{var _a;let{isLocked:isLocked,isPlaying:isPlaying}=this.getState(storyId),logItems=this.getLog(storyId),pausedAt=null==(_a=logItems.filter((({ancestors:ancestors})=>!ancestors.length)).find((item=>"waiting"===item.status)))?void 0:_a.callId,hasActive=logItems.some((item=>"active"===item.status));if(isLocked||hasActive||0===logItems.length){let payload2={controlStates:controlsDisabled,logItems:logItems};return void this.channel.emit(EVENTS_SYNC,payload2)}let hasPrevious=logItems.some((item=>"done"===item.status||"error"===item.status)),payload={controlStates:{start:hasPrevious,back:hasPrevious,goto:!0,next:isPlaying,end:isPlaying},logItems:logItems,pausedAt:pausedAt};this.channel.emit(EVENTS_SYNC,payload)};this.setState(storyId,(({syncTimeout:syncTimeout})=>(clearTimeout(syncTimeout),{syncTimeout:setTimeout(synchronize,0)})))}};function instrument(obj,options={}){var _a,_b,_c,_d;try{let forceInstrument=!1,skipInstrument=!1;return null!=(_b=null==(_a=scope.window.location)?void 0:_a.search)&&_b.includes("instrument=true")?forceInstrument=!0:null!=(_d=null==(_c=scope.window.location)?void 0:_c.search)&&_d.includes("instrument=false")&&(skipInstrument=!0),scope.window.parent===scope.window&&!forceInstrument||skipInstrument?obj:(scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__||(scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__=new Instrumenter),scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__.instrument(obj,options))}catch(e){return once.warn(e),obj}}var{jest:jest}=instrument({jest:build}),expect=instrument({expect:o},{intercept:(_method,path)=>"expect"!==path[0]}).expect;expect.extend(matchers_namespaceObject)},"./node_modules/@storybook/testing-library/dist/index.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{mV:function(){return dist_userEvent},X_:function(){return waitFor},uh:function(){return within}});var api_namespaceObject={};__webpack_require__.r(api_namespaceObject),__webpack_require__.d(api_namespaceObject,{clear:function(){return clear},click:function(){return click},copy:function(){return copy},cut:function(){return cut},dblClick:function(){return dblClick},deselectOptions:function(){return deselectOptions},hover:function(){return hover},keyboard:function(){return keyboard},paste:function(){return paste},pointer:function(){return pointer},selectOptions:function(){return selectOptions},tab:function(){return tab},tripleClick:function(){return tripleClick},type:function(){return type},unhover:function(){return unhover},upload:function(){return upload}});var directApi_namespaceObject={};__webpack_require__.r(directApi_namespaceObject),__webpack_require__.d(directApi_namespaceObject,{clear:function(){return directApi_clear},click:function(){return directApi_click},copy:function(){return directApi_copy},cut:function(){return directApi_cut},dblClick:function(){return directApi_dblClick},deselectOptions:function(){return directApi_deselectOptions},hover:function(){return directApi_hover},keyboard:function(){return directApi_keyboard},paste:function(){return directApi_paste},pointer:function(){return directApi_pointer},selectOptions:function(){return directApi_selectOptions},tab:function(){return directApi_tab},tripleClick:function(){return directApi_tripleClick},type:function(){return directApi_type},unhover:function(){return directApi_unhover},upload:function(){return directApi_upload}});var clickableInputTypes,dom_esm=__webpack_require__("./node_modules/@testing-library/dom/dist/@testing-library/dom.esm.js");function isElementType(element,tag,props){return(!element.namespaceURI||"http://www.w3.org/1999/xhtml"===element.namespaceURI)&&(!!(tag=Array.isArray(tag)?tag:[tag]).includes(element.tagName.toLowerCase())&&(!props||Object.entries(props).every((([k,v])=>element[k]===v))))}function isClickableInput(element){return isElementType(element,"button")||isElementType(element,"input")&&element.type in clickableInputTypes}!function(clickableInputTypes){clickableInputTypes.button="button",clickableInputTypes.color="color",clickableInputTypes.file="file",clickableInputTypes.image="image",clickableInputTypes.reset="reset",clickableInputTypes.submit="submit",clickableInputTypes.checkbox="checkbox",clickableInputTypes.radio="radio"}(clickableInputTypes||(clickableInputTypes={}));var helpers=__webpack_require__("./node_modules/@testing-library/dom/dist/helpers.js");function getWindow(node){return(0,helpers.M2)(node)}function readBlobText(blob,FileReader){return new Promise(((res,rej)=>{const fr=new FileReader;fr.onerror=rej,fr.onabort=rej,fr.onload=()=>{res(String(fr.result))},fr.readAsText(blob)}))}function createFileList(window,files){const list={...files,length:files.length,item:index=>list[index],[Symbol.iterator]:function*nextFile(){for(let i=0;i<list.length;i++)yield list[i]}};return list.constructor=window.FileList,window.FileList&&Object.setPrototypeOf(list,window.FileList.prototype),Object.freeze(list),list}class DataTransferItemStub{getAsFile(){return this.file}getAsString(callback){"string"==typeof this.data&&callback(this.data)}webkitGetAsEntry(){throw new Error("not implemented")}constructor(dataOrFile,type){this.file=null,this.data=void 0,"string"==typeof dataOrFile?(this.kind="string",this.type=String(type),this.data=dataOrFile):(this.kind="file",this.type=dataOrFile.type,this.file=dataOrFile)}}class DataTransferItemListStub extends Array{add(...args){const item=new DataTransferItemStub(args[0],args[1]);return this.push(item),item}clear(){this.splice(0,this.length)}remove(index){this.splice(index,1)}}function getTypeMatcher(type,exact){const[group,sub]=type.split("/"),isGroup=!sub||"*"===sub;return item=>exact?item.type===(isGroup?group:type):isGroup?item.type.startsWith(`${group}/`):item.type===group}function createDataTransfer(window,files=[]){const dt=void 0===window.DataTransfer?function createDataTransferStub(window){return new class DataTransferStub{getData(format){var ref;const match=null!==(ref=this.items.find(getTypeMatcher(format,!0)))&&void 0!==ref?ref:this.items.find(getTypeMatcher(format,!1));let text="";return null==match||match.getAsString((t=>{text=t})),text}setData(format,data){const matchIndex=this.items.findIndex(getTypeMatcher(format,!0)),item=new DataTransferItemStub(data,format);matchIndex>=0?this.items.splice(matchIndex,1,item):this.items.push(item)}clearData(format){if(format){const matchIndex=this.items.findIndex(getTypeMatcher(format,!0));matchIndex>=0&&this.items.remove(matchIndex)}else this.items.clear()}get types(){const t=[];return this.files.length&&t.push("Files"),this.items.forEach((i=>t.push(i.type))),Object.freeze(t),t}setDragImage(){}constructor(){this.dropEffect="none",this.effectAllowed="uninitialized",this.items=new DataTransferItemListStub,this.files=createFileList(window,[])}}}(window):new window.DataTransfer;return Object.defineProperty(dt,"files",{get:()=>createFileList(window,files)}),dt}function getBlobFromDataTransferItem(window,item){if("file"===item.kind)return item.getAsFile();let data="";return item.getAsString((s=>{data=s})),new window.Blob([data],{type:item.type})}function createClipboardItem(window,...blobs){const dataMap=Object.fromEntries(blobs.map((b=>["string"==typeof b?"text/plain":b.type,Promise.resolve(b)])));return void 0!==window.ClipboardItem?new window.ClipboardItem(dataMap):new class ClipboardItem{get types(){return Array.from(Object.keys(this.data))}async getType(type){const value=await this.data[type];if(!value)throw new Error(`${type} is not one of the available MIME types on this item.`);return value instanceof window.Blob?value:new window.Blob([value],{type:type})}constructor(d){this.data=d}}(dataMap)}const ClipboardStubControl=Symbol("Manage ClipboardSub");function createClipboardStub(window,control){return Object.assign(new class Clipboard extends window.EventTarget{async read(){return Array.from(this.items)}async readText(){let text="";for(const item of this.items){const type=item.types.includes("text/plain")?"text/plain":item.types.find((t=>t.startsWith("text/")));type&&(text+=await item.getType(type).then((b=>readBlobText(b,window.FileReader))))}return text}async write(data){this.items=data}async writeText(text){this.items=[createClipboardItem(window,text)]}constructor(...args){super(...args),this.items=[]}},{[ClipboardStubControl]:control})}function isClipboardStub(clipboard){var ref;return!!(null===(ref=clipboard)||void 0===ref?void 0:ref[ClipboardStubControl])}async function writeDataTransferToClipboard(document,clipboardData){const window=getWindow(document),clipboard=window.navigator.clipboard,items=[];for(let i=0;i<clipboardData.items.length;i++){const blob=getBlobFromDataTransferItem(window,clipboardData.items[i]);items.push(createClipboardItem(window,blob))}if(!(clipboard&&await clipboard.write(items).then((()=>!0),(()=>!1))))throw new Error("The Clipboard API is unavailable.")}function isContentEditable(element){return element.hasAttribute("contenteditable")&&("true"==element.getAttribute("contenteditable")||""==element.getAttribute("contenteditable"))}function getContentEditable(node){const element=function getElement(node){return 1===node.nodeType?node:node.parentElement}(node);return element&&(element.closest('[contenteditable=""]')||element.closest('[contenteditable="true"]'))}function isEditable(element){return isEditableInputOrTextArea(element)&&!element.readOnly||isContentEditable(element)}var editableInputTypes,maxLengthSupportedTypes;function isEditableInputOrTextArea(element){return isElementType(element,"textarea")||isElementType(element,"input")&&element.type in editableInputTypes}"function"==typeof globalThis.afterEach&&globalThis.afterEach((()=>function resetClipboardStubOnView(window){isClipboardStub(window.navigator.clipboard)&&window.navigator.clipboard[ClipboardStubControl].resetClipboardStub()}(globalThis.window))),"function"==typeof globalThis.afterAll&&globalThis.afterAll((()=>function detachClipboardStubFromView(window){isClipboardStub(window.navigator.clipboard)&&window.navigator.clipboard[ClipboardStubControl].detachClipboardStub()}(globalThis.window))),function(editableInputTypes){editableInputTypes.text="text",editableInputTypes.date="date",editableInputTypes["datetime-local"]="datetime-local",editableInputTypes.email="email",editableInputTypes.month="month",editableInputTypes.number="number",editableInputTypes.password="password",editableInputTypes.search="search",editableInputTypes.tel="tel",editableInputTypes.time="time",editableInputTypes.url="url",editableInputTypes.week="week"}(editableInputTypes||(editableInputTypes={})),function(maxLengthSupportedTypes){maxLengthSupportedTypes.email="email",maxLengthSupportedTypes.password="password",maxLengthSupportedTypes.search="search",maxLengthSupportedTypes.telephone="telephone",maxLengthSupportedTypes.text="text",maxLengthSupportedTypes.url="url"}(maxLengthSupportedTypes||(maxLengthSupportedTypes={}));const FOCUSABLE_SELECTOR=["input:not([type=hidden]):not([disabled])","button:not([disabled])","select:not([disabled])","textarea:not([disabled])",'[contenteditable=""]','[contenteditable="true"]',"a[href]","[tabindex]:not([disabled])"].join(", ");function isFocusable(element){return element.matches(FOCUSABLE_SELECTOR)}var bracketDict,ApiLevel,PointerEventsCheckLevel;function readNextDescriptor(text,context){let pos=0;const startBracket=text[pos]in bracketDict?text[pos]:"";pos+=startBracket.length;const type=new RegExp(`^\\${startBracket}{2}`).test(text)?"":startBracket;return{type:type,...""===type?readPrintableChar(text,pos,context):readTag(text,pos,type,context)}}function readPrintableChar(text,pos,context){const descriptor=text[pos];return assertDescriptor(descriptor,text,pos,context),{consumedLength:pos+=descriptor.length,descriptor:descriptor,releasePrevious:!1,releaseSelf:!0,repeat:1}}function readTag(text,pos,startBracket,context){var ref,ref1;const releasePreviousModifier="/"===text[pos]?"/":"";pos+=releasePreviousModifier.length;const escapedDescriptor="{"===startBracket&&"\\"===text[pos];pos+=Number(escapedDescriptor);const descriptor=escapedDescriptor?text[pos]:null===(ref=text.slice(pos).match("{"===startBracket?/^\w+|^[^}>/]/:/^\w+/))||void 0===ref?void 0:ref[0];var ref2;assertDescriptor(descriptor,text,pos,context),pos+=descriptor.length;const repeatModifier=null!==(ref2=null===(ref1=text.slice(pos).match(/^>\d+/))||void 0===ref1?void 0:ref1[0])&&void 0!==ref2?ref2:"",releaseSelfModifier="/"===text[pos+=repeatModifier.length]||!repeatModifier&&">"===text[pos]?text[pos]:"";pos+=releaseSelfModifier.length;const expectedEndBracket=bracketDict[startBracket],endBracket=text[pos]===expectedEndBracket?expectedEndBracket:"";if(!endBracket)throw new Error(getErrorMessage([!repeatModifier&&"repeat modifier",!releaseSelfModifier&&"release modifier",`"${expectedEndBracket}"`].filter(Boolean).join(" or "),text[pos],text,context));return{consumedLength:pos+=endBracket.length,descriptor:descriptor,releasePrevious:!!releasePreviousModifier,repeat:repeatModifier?Math.max(Number(repeatModifier.substr(1)),1):1,releaseSelf:hasReleaseSelf(releaseSelfModifier,repeatModifier)}}function assertDescriptor(descriptor,text,pos,context){if(!descriptor)throw new Error(getErrorMessage("key descriptor",text[pos],text,context))}function hasReleaseSelf(releaseSelfModifier,repeatModifier){return releaseSelfModifier?"/"===releaseSelfModifier:!repeatModifier&&void 0}function getErrorMessage(expected,found,text,context){return`Expected ${expected} but found "${null!=found?found:""}" in "${text}"\n    See ${"pointer"===context?"https://testing-library.com/docs/user-event/pointer#pressing-a-button-or-touching-the-screen":"https://testing-library.com/docs/user-event/keyboard"}\n    for more information about how userEvent parses your input.`}function setLevelRef(instance,level){instance.levelRefs[level]={}}function getLevelRef(instance,level){return instance.levelRefs[level]}function isDisabled(element){for(let el=element;el;el=el.parentElement)if(isElementType(el,["button","input","select","textarea","optgroup","option"])){if(el.hasAttribute("disabled"))return!0}else if(isElementType(el,"fieldset")){var ref;if(el.hasAttribute("disabled")&&!(null===(ref=el.querySelector(":scope > legend"))||void 0===ref?void 0:ref.contains(element)))return!0}else if(el.tagName.includes("-")&&el.constructor.formAssociated&&el.hasAttribute("disabled"))return!0;return!1}function getActiveElement(document){const activeElement=document.activeElement;return(null==activeElement?void 0:activeElement.shadowRoot)?getActiveElement(activeElement.shadowRoot):isDisabled(activeElement)?document.ownerDocument?document.ownerDocument.body:document.body:activeElement}function getActiveElementOrBody(document){var ref;return null!==(ref=getActiveElement(document))&&void 0!==ref?ref:document.body}function hasOwnSelection(node){return isElement(node)&&isEditableInputOrTextArea(node)}function isElement(node){return 1===node.nodeType}function wrapEvent(cb,_element){return(0,dom_esm.getConfig)().eventWrapper(cb)}function focusElement(element){const target=function findClosest(element,callback){let el=element;do{if(callback(el))return el;el=el.parentElement}while(el&&el!==element.ownerDocument.body)}(element,isFocusable),activeElement=getActiveElement(element.ownerDocument);(null!=target?target:element.ownerDocument.body)!==activeElement&&(wrapEvent(target?()=>target.focus():()=>{var ref;return null===(ref=activeElement)||void 0===ref?void 0:ref.blur()}),function updateSelectionOnFocus(element){const selection=element.ownerDocument.getSelection();if((null==selection?void 0:selection.focusNode)&&hasOwnSelection(element)){const contenteditable=getContentEditable(selection.focusNode);if(contenteditable){if(!selection.isCollapsed){var ref;const focusNode=3===(null===(ref=contenteditable.firstChild)||void 0===ref?void 0:ref.nodeType)?contenteditable.firstChild:contenteditable;selection.setBaseAndExtent(focusNode,0,focusNode,0)}}else selection.setBaseAndExtent(element,0,element,0)}}(null!=target?target:element.ownerDocument.body))}!function(bracketDict){bracketDict["{"]="}",bracketDict["["]="]"}(bracketDict||(bracketDict={})),function(ApiLevel){ApiLevel[ApiLevel.Trigger=2]="Trigger",ApiLevel[ApiLevel.Call=1]="Call"}(ApiLevel||(ApiLevel={})),function(PointerEventsCheckLevel){PointerEventsCheckLevel[PointerEventsCheckLevel.EachTrigger=4]="EachTrigger",PointerEventsCheckLevel[PointerEventsCheckLevel.EachApiCall=2]="EachApiCall",PointerEventsCheckLevel[PointerEventsCheckLevel.EachTarget=1]="EachTarget",PointerEventsCheckLevel[PointerEventsCheckLevel.Never=0]="Never"}(PointerEventsCheckLevel||(PointerEventsCheckLevel={}));const behavior={};behavior.click=(event,target,instance)=>{const context=target.closest("button,input,label,select,textarea"),control=context&&isElementType(context,"label")&&context.control;return control?()=>{isFocusable(control)&&focusElement(control),instance.dispatchEvent(control,function cloneEvent(event){return new event.constructor(event.type,event)}(event))}:isElementType(target,"input",{type:"file"})?()=>{!function blurElement(element){if(!isFocusable(element))return;getActiveElement(element.ownerDocument)===element&&wrapEvent((()=>element.blur()))}(target),target.dispatchEvent(new(getWindow(target).Event)("fileDialog")),focusElement(target)}:void 0};const UIValue=Symbol("Displayed value in UI"),UISelection=Symbol("Displayed selection in UI"),InitialValue=Symbol("Initial value to compare on blur");function getUIValue(element){return void 0===element[UIValue]?element.value:String(element[UIValue])}function setUIValueClean(element){element[UIValue]=void 0}function clearInitialValue(element){element[InitialValue]=void 0}function setUISelection(element,{focusOffset:focusOffsetParam,anchorOffset:anchorOffsetParam=focusOffsetParam},mode="replace"){const valueLength=getUIValue(element).length,sanitizeOffset=o=>Math.max(0,Math.min(valueLength,o)),anchorOffset="replace"===mode||void 0===element[UISelection]?sanitizeOffset(anchorOffsetParam):element[UISelection].anchorOffset,focusOffset=sanitizeOffset(focusOffsetParam),startOffset=Math.min(anchorOffset,focusOffset),endOffset=Math.max(anchorOffset,focusOffset);if(element[UISelection]={anchorOffset:anchorOffset,focusOffset:focusOffset},element.selectionStart===startOffset&&element.selectionEnd===endOffset)return;const startObj=Object.assign(new Number(startOffset),{[UISelection]:!0});try{element.setSelectionRange(startObj,endOffset)}catch{}}function getUISelection(element){var _selectionStart,_selectionEnd,_UISelection;const sel=null!==(_UISelection=element[UISelection])&&void 0!==_UISelection?_UISelection:{anchorOffset:null!==(_selectionStart=element.selectionStart)&&void 0!==_selectionStart?_selectionStart:0,focusOffset:null!==(_selectionEnd=element.selectionEnd)&&void 0!==_selectionEnd?_selectionEnd:0};return{...sel,startOffset:Math.min(sel.anchorOffset,sel.focusOffset),endOffset:Math.max(sel.anchorOffset,sel.focusOffset)}}function setUISelectionClean(element){element[UISelection]=void 0}const timeValue_parseInt=globalThis.parseInt;function build(onlyDigitsValue,index){const hours=onlyDigitsValue.slice(0,index),validHours=Math.min(timeValue_parseInt(hours,10),23),minuteCharacters=onlyDigitsValue.slice(index),parsedMinutes=timeValue_parseInt(minuteCharacters,10),validMinutes=Math.min(parsedMinutes,59);return`${validHours.toString().padStart(2,"0")}:${validMinutes.toString().padStart(2,"0")}`}function isValidDateOrTimeValue(element,value){const clone=element.cloneNode();return clone.value=value,clone.value===value}function getNextCursorPosition(node,offset,direction,inputType){if(isTextNode(node)&&offset+direction>=0&&offset+direction<=node.nodeValue.length)return{node:node,offset:offset+direction};const nextNode=getNextCharacterContentNode(node,offset,direction);if(nextNode){if(isTextNode(nextNode))return{node:nextNode,offset:direction>0?Math.min(1,nextNode.nodeValue.length):Math.max(nextNode.nodeValue.length-1,0)};if(isElementType(nextNode,"br")){const nextPlusOne=getNextCharacterContentNode(nextNode,void 0,direction);return nextPlusOne?isTextNode(nextPlusOne)?{node:nextPlusOne,offset:direction>0?0:nextPlusOne.nodeValue.length}:direction<0&&isElementType(nextPlusOne,"br")?{node:nextNode.parentNode,offset:getOffset(nextNode)}:{node:nextPlusOne.parentNode,offset:getOffset(nextPlusOne)+(direction>0?0:1)}:direction<0&&"deleteContentBackward"===inputType?{node:nextNode.parentNode,offset:getOffset(nextNode)}:void 0}return{node:nextNode.parentNode,offset:getOffset(nextNode)+(direction>0?1:0)}}}function getNextCharacterContentNode(node,offset,direction){const nextOffset=Number(offset)+(direction<0?-1:0);return void 0!==offset&&cursor_isElement(node)&&nextOffset>=0&&nextOffset<node.children.length&&(node=node.children[nextOffset]),function walkNodes(node,direction,callback){for(;;){var ref;const sibling=node[`${direction}Sibling`];if(sibling){if(callback(node=getDescendant(sibling,"next"===direction?"first":"last")))return node}else{if(!node.parentNode||cursor_isElement(node.parentNode)&&(isContentEditable(node.parentNode)||node.parentNode===(null===(ref=node.ownerDocument)||void 0===ref?void 0:ref.body)))break;node=node.parentNode}}}(node,1===direction?"next":"previous",isTreatedAsCharacterContent)}function isTreatedAsCharacterContent(node){if(isTextNode(node))return!0;if(cursor_isElement(node)){if(isElementType(node,["input","textarea"]))return"hidden"!==node.type;if(isElementType(node,"br"))return!0}return!1}function getOffset(node){let i=0;for(;node.previousSibling;)i++,node=node.previousSibling;return i}function cursor_isElement(node){return 1===node.nodeType}function isTextNode(node){return 3===node.nodeType}function getDescendant(node,direction){for(;node.hasChildNodes();)node=node[`${direction}Child`];return node}const TrackChanges=Symbol("Track programmatic changes for React workaround");function startTrackValue(element){(function isReact17Element(element){return Object.getOwnPropertyNames(element).some((k=>k.startsWith("__react")))&&17===getWindow(element).REACT_VERSION})(element)&&(element[TrackChanges]={previousValue:String(element.value),tracked:[]})}function commitValueAfterInput(element,cursorOffset){var ref;const changes=element[TrackChanges];if(element[TrackChanges]=void 0,!(null==changes||null===(ref=changes.tracked)||void 0===ref?void 0:ref.length))return;const isJustReactStateUpdate=2===changes.tracked.length&&changes.tracked[0]===changes.previousValue&&changes.tracked[1]===element.value;isJustReactStateUpdate||setUIValueClean(element),function hasUISelection(element){return!!element[UISelection]}(element)&&setUISelection(element,{focusOffset:isJustReactStateUpdate?cursorOffset:element.value.length})}function getTargetTypeAndSelection(node){const element=function getTargetTypeAndSelection_getElement(node){return 1===node.nodeType?node:node.parentElement}(node);if(element&&hasOwnSelection(element))return{type:"input",selection:getUISelection(element)};const selection=null==element?void 0:element.ownerDocument.getSelection();return{type:getContentEditable(node)&&(null==selection?void 0:selection.anchorNode)&&getContentEditable(selection.anchorNode)?"contenteditable":"default",selection:selection}}function setSelection({focusNode:focusNode,focusOffset:focusOffset,anchorNode:anchorNode=focusNode,anchorOffset:anchorOffset=focusOffset}){var ref,ref1;if("input"===getTargetTypeAndSelection(focusNode).type)return setUISelection(focusNode,{anchorOffset:anchorOffset,focusOffset:focusOffset});null===(ref1=null===(ref=anchorNode.ownerDocument)||void 0===ref?void 0:ref.getSelection())||void 0===ref1||ref1.setBaseAndExtent(anchorNode,anchorOffset,focusNode,focusOffset)}function isDateOrTime(element){return isElementType(element,"input")&&["date","time"].includes(element.type)}function input(instance,element,data,inputType="insertText"){const inputRange=function getInputRange(focusNode){const typeAndSelection=getTargetTypeAndSelection(focusNode);return"input"===typeAndSelection.type?typeAndSelection.selection:"contenteditable"===typeAndSelection.type?null===(ref=typeAndSelection.selection)||void 0===ref?void 0:ref.getRangeAt(0):void 0;var ref}(element);if(inputRange){if(!isDateOrTime(element)){if(!instance.dispatchUIEvent(element,"beforeinput",{inputType:inputType,data:data}))return}"startContainer"in inputRange?function editContenteditable(instance,element,inputRange,data,inputType){let del=!1;if(inputRange.collapsed){if(["deleteContentBackward","deleteContentForward"].includes(inputType)){const nextPosition=getNextCursorPosition(inputRange.startContainer,inputRange.startOffset,"deleteContentBackward"===inputType?-1:1,inputType);if(nextPosition){del=!0;const delRange=inputRange.cloneRange();delRange.comparePoint(nextPosition.node,nextPosition.offset)<0?delRange.setStart(nextPosition.node,nextPosition.offset):delRange.setEnd(nextPosition.node,nextPosition.offset),delRange.deleteContents()}}}else del=!0,inputRange.deleteContents();if(data)if(3===inputRange.endContainer.nodeType){const offset=inputRange.endOffset;inputRange.endContainer.insertData(offset,data),inputRange.setStart(inputRange.endContainer,offset+data.length),inputRange.setEnd(inputRange.endContainer,offset+data.length)}else{const text=element.ownerDocument.createTextNode(data);inputRange.insertNode(text),inputRange.setStart(text,data.length),inputRange.setEnd(text,data.length)}(del||data)&&instance.dispatchUIEvent(element,"input",{inputType:inputType})}(instance,element,inputRange,data,inputType):function editInputElement(instance,element,inputRange,data,inputType){let dataToInsert=data;if(function supportsMaxLength(element){return isElementType(element,"textarea")||isElementType(element,"input")&&element.type in maxLengthSupportedTypes}(element)){const maxLength=function getMaxLength(element){var ref;const attr=null!==(ref=element.getAttribute("maxlength"))&&void 0!==ref?ref:"";return/^\d+$/.test(attr)&&Number(attr)>=0?Number(attr):void 0}(element);if(void 0!==maxLength&&data.length>0){const spaceUntilMaxLength=maxLength-element.value.length;if(!(spaceUntilMaxLength>0))return;dataToInsert=data.substring(0,spaceUntilMaxLength)}}const{newValue:newValue,newOffset:newOffset,oldValue:oldValue}=function calculateNewValue(inputData,node,{startOffset:startOffset,endOffset:endOffset},inputType){const value=getUIValue(node),prologEnd=Math.max(0,startOffset===endOffset&&"deleteContentBackward"===inputType?startOffset-1:startOffset),prolog=value.substring(0,prologEnd),epilogStart=Math.min(value.length,startOffset===endOffset&&"deleteContentForward"===inputType?startOffset+1:endOffset),epilog=value.substring(epilogStart,value.length);let newValue=`${prolog}${inputData}${epilog}`,newOffset=prologEnd+inputData.length;if(isElementType(node,"input",{type:"time"})){const builtValue=function buildTimeValue(value){const onlyDigitsValue=value.replace(/\D/g,"");if(onlyDigitsValue.length<2)return value;const firstDigit=timeValue_parseInt(onlyDigitsValue[0],10),secondDigit=timeValue_parseInt(onlyDigitsValue[1],10);if(firstDigit>=3||2===firstDigit&&secondDigit>=4){let index;return index=firstDigit>=3?1:2,build(onlyDigitsValue,index)}return 2===value.length?value:build(onlyDigitsValue,2)}(newValue);""!==builtValue&&isValidDateOrTimeValue(node,builtValue)&&(newValue=builtValue,newOffset=builtValue.length)}return{oldValue:value,newValue:newValue,newOffset:newOffset}}(dataToInsert,element,inputRange,inputType);if(newValue===oldValue&&newOffset===inputRange.startOffset&&newOffset===inputRange.endOffset)return;if(isElementType(element,"input",{type:"number"})&&!function isValidNumberInput(value){var ref,ref1;const valueParts=value.split("e",2);return!(/[^\d.\-e]/.test(value)||Number(null===(ref=value.match(/-/g))||void 0===ref?void 0:ref.length)>2||Number(null===(ref1=value.match(/\./g))||void 0===ref1?void 0:ref1.length)>1||valueParts[1]&&!/^-?\d*$/.test(valueParts[1]))}(newValue))return;(function setUIValue(element,value){void 0===element[InitialValue]&&(element[InitialValue]=element.value),element[UIValue]=value,element.value=Object.assign(new String(value),{[UIValue]:!0})})(element,newValue),setSelection({focusNode:element,anchorOffset:newOffset,focusOffset:newOffset}),isDateOrTime(element)?isValidDateOrTimeValue(element,newValue)&&(commitInput(instance,element,newOffset,{}),instance.dispatchUIEvent(element,"change"),clearInitialValue(element)):commitInput(instance,element,newOffset,{data:data,inputType:inputType})}(instance,element,inputRange,data,inputType)}}function commitInput(instance,element,newOffset,inputInit){instance.dispatchUIEvent(element,"input",inputInit),commitValueAfterInput(element,newOffset)}function isVisible(element){const window=getWindow(element);for(let el=element;null==el?void 0:el.ownerDocument;el=el.parentElement){const{display:display,visibility:visibility}=window.getComputedStyle(el);if("none"===display)return!1;if("hidden"===visibility)return!1}return!0}function moveSelection(node,direction){if(hasOwnSelection(node)){const selection=getUISelection(node);setSelection({focusNode:node,focusOffset:selection.startOffset===selection.endOffset?selection.focusOffset+direction:direction<0?selection.startOffset:selection.endOffset})}else{const selection1=node.ownerDocument.getSelection();if(!(null==selection1?void 0:selection1.focusNode))return;if(selection1.isCollapsed){const nextPosition=getNextCursorPosition(selection1.focusNode,selection1.focusOffset,direction);nextPosition&&setSelection({focusNode:nextPosition.node,focusOffset:nextPosition.offset})}else selection1[direction<0?"collapseToStart":"collapseToEnd"]()}}function selectAll(target){if(hasOwnSelection(target))return setSelection({focusNode:target,anchorOffset:0,focusOffset:getUIValue(target).length});var ref;const focusNode=null!==(ref=getContentEditable(target))&&void 0!==ref?ref:target.ownerDocument.body;setSelection({focusNode:focusNode,anchorOffset:0,focusOffset:focusNode.childNodes.length})}function setSelectionRange(element,anchorOffset,focusOffset){var ref;if(hasOwnSelection(element))return setSelection({focusNode:element,anchorOffset:anchorOffset,focusOffset:focusOffset});if(isContentEditable(element)&&3===(null===(ref=element.firstChild)||void 0===ref?void 0:ref.nodeType))return setSelection({focusNode:element.firstChild,anchorOffset:anchorOffset,focusOffset:focusOffset});throw new Error("Not implemented. The result of this interaction is unreliable.")}function walkRadio(instance,el,direction){const window=getWindow(el),group=Array.from(el.ownerDocument.querySelectorAll(el.name?`input[type="radio"][name="${window.CSS.escape(el.name)}"]`:'input[type="radio"][name=""], input[type="radio"]:not([name])'));for(let i=group.findIndex((e=>e===el))+direction;;i+=direction){if(group[i]||(i=direction>0?0:group.length-1),group[i]===el)return;isDisabled(group[i])||(focusElement(group[i]),instance.dispatchUIEvent(group[i],"click"))}}behavior.cut=(event,target,instance)=>()=>{isEditable(target)&&input(instance,target,"","deleteByCut")},behavior.keydown=(event,target,instance)=>{var ref,ref1;return null!==(ref1=null===(ref=keydownBehavior[event.key])||void 0===ref?void 0:ref.call(keydownBehavior,event,target,instance))&&void 0!==ref1?ref1:combinationBehavior(event,target,instance)};const keydownBehavior={ArrowDown:(event,target,instance)=>{if(isElementType(target,"input",{type:"radio"}))return()=>walkRadio(instance,target,-1)},ArrowLeft:(event,target,instance)=>isElementType(target,"input",{type:"radio"})?()=>walkRadio(instance,target,-1):()=>moveSelection(target,-1),ArrowRight:(event,target,instance)=>isElementType(target,"input",{type:"radio"})?()=>walkRadio(instance,target,1):()=>moveSelection(target,1),ArrowUp:(event,target,instance)=>{if(isElementType(target,"input",{type:"radio"}))return()=>walkRadio(instance,target,1)},Backspace:(event,target,instance)=>{if(isEditable(target))return()=>{input(instance,target,"","deleteContentBackward")}},Delete:(event,target,instance)=>{if(isEditable(target))return()=>{input(instance,target,"","deleteContentForward")}},End:(event,target)=>{if(isElementType(target,["input","textarea"])||isContentEditable(target))return()=>{var ref,ref1;const newPos=null!==(ref1=null===(ref=function getValueOrTextContent(element){return element?isContentEditable(element)?element.textContent:getUIValue(element):null}(target))||void 0===ref?void 0:ref.length)&&void 0!==ref1?ref1:0;setSelectionRange(target,newPos,newPos)}},Home:(event,target)=>{if(isElementType(target,["input","textarea"])||isContentEditable(target))return()=>{setSelectionRange(target,0,0)}},PageDown:(event,target)=>{if(isElementType(target,["input"]))return()=>{const newPos=getUIValue(target).length;setSelectionRange(target,newPos,newPos)}},PageUp:(event,target)=>{if(isElementType(target,["input"]))return()=>{setSelectionRange(target,0,0)}},Tab:(event,target,instance)=>()=>{const dest=function getTabDestination(activeElement,shift){const document=activeElement.ownerDocument,focusableElements=document.querySelectorAll(FOCUSABLE_SELECTOR),enabledElements=Array.from(focusableElements).filter((el=>el===activeElement||!(Number(el.getAttribute("tabindex"))<0||isDisabled(el))));Number(activeElement.getAttribute("tabindex"))>=0&&enabledElements.sort(((a,b)=>{const i=Number(a.getAttribute("tabindex")),j=Number(b.getAttribute("tabindex"));return i===j?0:0===i?1:0===j?-1:i-j}));const checkedRadio={};let prunedElements=[document.body];const activeRadioGroup=isElementType(activeElement,"input",{type:"radio"})?activeElement.name:void 0;enabledElements.forEach((currentElement=>{const el=currentElement;if(isElementType(el,"input",{type:"radio"})&&el.name){if(el===activeElement)return void prunedElements.push(el);if(el.name===activeRadioGroup)return;if(el.checked)return prunedElements=prunedElements.filter((e=>!isElementType(e,"input",{type:"radio",name:el.name}))),prunedElements.push(el),void(checkedRadio[el.name]=el);if(void 0!==checkedRadio[el.name])return}prunedElements.push(el)}));for(let index=prunedElements.findIndex((el=>el===activeElement));;)if(index+=shift?-1:1,index===prunedElements.length?index=0:-1===index&&(index=prunedElements.length-1),prunedElements[index]===activeElement||prunedElements[index]===document.body||isVisible(prunedElements[index]))return prunedElements[index]}(target,instance.system.keyboard.modifiers.Shift);focusElement(dest),hasOwnSelection(dest)&&setUISelection(dest,{anchorOffset:0,focusOffset:dest.value.length})}},combinationBehavior=(event,target,instance)=>{if("KeyA"===event.code&&instance.system.keyboard.modifiers.Control)return()=>selectAll(target)};behavior.keypress=(event,target,instance)=>{if("Enter"===event.key){if(isElementType(target,"button")||isElementType(target,"input")&&ClickInputOnEnter.includes(target.type)||isElementType(target,"a")&&Boolean(target.href))return()=>{instance.dispatchUIEvent(target,"click")};if(isElementType(target,"input")){const form=target.form,submit=null==form?void 0:form.querySelector('input[type="submit"], button:not([type]), button[type="submit"]');return submit?()=>instance.dispatchUIEvent(submit,"click"):form&&SubmitSingleInputOnEnter.includes(target.type)&&1===form.querySelectorAll("input").length?()=>instance.dispatchUIEvent(form,"submit"):void 0}}if(isEditable(target)){const inputType="Enter"===event.key?isContentEditable(target)&&!instance.system.keyboard.modifiers.Shift?"insertParagraph":"insertLineBreak":"insertText",inputData="Enter"===event.key?"\n":event.key;return()=>input(instance,target,inputData,inputType)}};const ClickInputOnEnter=["button","color","file","image","reset","submit"],SubmitSingleInputOnEnter=["email","month","password","search","tel","text","url","week"];behavior.keyup=(event,target,instance)=>{var ref;return null===(ref=keyupBehavior[event.key])||void 0===ref?void 0:ref.call(keyupBehavior,event,target,instance)};const keyupBehavior={" ":(event,target,instance)=>{if(isClickableInput(target))return()=>instance.dispatchUIEvent(target,"click")}};behavior.paste=(event,target,instance)=>{if(isEditable(target))return()=>{var ref;const insertData=null===(ref=event.clipboardData)||void 0===ref?void 0:ref.getData("text");insertData&&input(instance,target,insertData,"insertFromPaste")}};const eventMap={...__webpack_require__("./node_modules/@testing-library/dom/dist/event-map.js").Hx,click:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},auxclick:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},contextmenu:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},beforeInput:{EventType:"InputEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}}},eventMapKeys=Object.fromEntries(Object.keys(eventMap).map((k=>[k.toLowerCase(),k])));function getEventClass(type){const k=eventMapKeys[type];return k&&eventMap[k].EventType}const mouseEvents=["MouseEvent","PointerEvent"];const eventInitializer={ClipboardEvent:[function initClipboardEvent(event,{clipboardData:clipboardData}){assignProps(event,{clipboardData:clipboardData})}],InputEvent:[initUIEvent,function initInputEvent(event,{data:data,inputType:inputType,isComposing:isComposing}){assignProps(event,{data:data,isComposing:Boolean(isComposing),inputType:String(inputType)})}],MouseEvent:[initUIEvent,initUIEventModififiers,initMouseEvent],PointerEvent:[initUIEvent,initUIEventModififiers,initMouseEvent,function initPointerEvent(event,{pointerId:pointerId,width:width,height:height,pressure:pressure,tangentialPressure:tangentialPressure,tiltX:tiltX,tiltY:tiltY,twist:twist,pointerType:pointerType,isPrimary:isPrimary}){assignProps(event,{pointerId:sanitizeNumber(pointerId),width:sanitizeNumber(width),height:sanitizeNumber(height),pressure:sanitizeNumber(pressure),tangentialPressure:sanitizeNumber(tangentialPressure),tiltX:sanitizeNumber(tiltX),tiltY:sanitizeNumber(tiltY),twist:sanitizeNumber(twist),pointerType:String(pointerType),isPrimary:Boolean(isPrimary)})}],KeyboardEvent:[initUIEvent,initUIEventModififiers,function initKeyboardEvent(event,{key:key,code:code,location:location,repeat:repeat,isComposing:isComposing,charCode:charCode}){assignProps(event,{key:String(key),code:String(code),location:sanitizeNumber(location),repeat:Boolean(repeat),isComposing:Boolean(isComposing),charCode:charCode})}]};function createEvent(type,target,init){var ref;const window=getWindow(target),{EventType:EventType,defaultInit:defaultInit}=eventMap[eventMapKeys[type]],event=new(function getEventConstructors(window){var _Event;const Event=null!==(_Event=window.Event)&&void 0!==_Event?_Event:class Event{};var _AnimationEvent;const AnimationEvent=null!==(_AnimationEvent=window.AnimationEvent)&&void 0!==_AnimationEvent?_AnimationEvent:class AnimationEvent extends Event{};var _ClipboardEvent;const ClipboardEvent=null!==(_ClipboardEvent=window.ClipboardEvent)&&void 0!==_ClipboardEvent?_ClipboardEvent:class ClipboardEvent extends Event{};var _PopStateEvent;const PopStateEvent=null!==(_PopStateEvent=window.PopStateEvent)&&void 0!==_PopStateEvent?_PopStateEvent:class PopStateEvent extends Event{};var _ProgressEvent;const ProgressEvent=null!==(_ProgressEvent=window.ProgressEvent)&&void 0!==_ProgressEvent?_ProgressEvent:class ProgressEvent extends Event{};var _TransitionEvent;const TransitionEvent=null!==(_TransitionEvent=window.TransitionEvent)&&void 0!==_TransitionEvent?_TransitionEvent:class TransitionEvent extends Event{};var _UIEvent;const UIEvent=null!==(_UIEvent=window.UIEvent)&&void 0!==_UIEvent?_UIEvent:class UIEvent extends Event{};var _CompositionEvent;const CompositionEvent=null!==(_CompositionEvent=window.CompositionEvent)&&void 0!==_CompositionEvent?_CompositionEvent:class CompositionEvent extends UIEvent{};var _FocusEvent;const FocusEvent=null!==(_FocusEvent=window.FocusEvent)&&void 0!==_FocusEvent?_FocusEvent:class FocusEvent extends UIEvent{};var _InputEvent;const InputEvent=null!==(_InputEvent=window.InputEvent)&&void 0!==_InputEvent?_InputEvent:class InputEvent extends UIEvent{};var _KeyboardEvent;const KeyboardEvent=null!==(_KeyboardEvent=window.KeyboardEvent)&&void 0!==_KeyboardEvent?_KeyboardEvent:class KeyboardEvent extends UIEvent{};var _MouseEvent;const MouseEvent=null!==(_MouseEvent=window.MouseEvent)&&void 0!==_MouseEvent?_MouseEvent:class MouseEvent extends UIEvent{};var _DragEvent;const DragEvent=null!==(_DragEvent=window.DragEvent)&&void 0!==_DragEvent?_DragEvent:class DragEvent extends MouseEvent{};var _PointerEvent;const PointerEvent=null!==(_PointerEvent=window.PointerEvent)&&void 0!==_PointerEvent?_PointerEvent:class PointerEvent extends MouseEvent{};var _TouchEvent;const TouchEvent=null!==(_TouchEvent=window.TouchEvent)&&void 0!==_TouchEvent?_TouchEvent:class TouchEvent extends UIEvent{};return{Event:Event,AnimationEvent:AnimationEvent,ClipboardEvent:ClipboardEvent,PopStateEvent:PopStateEvent,ProgressEvent:ProgressEvent,TransitionEvent:TransitionEvent,UIEvent:UIEvent,CompositionEvent:CompositionEvent,FocusEvent:FocusEvent,InputEvent:InputEvent,KeyboardEvent:KeyboardEvent,MouseEvent:MouseEvent,DragEvent:DragEvent,PointerEvent:PointerEvent,TouchEvent:TouchEvent}}(window)[EventType])(type,defaultInit);return null===(ref=eventInitializer[EventType])||void 0===ref||ref.forEach((f=>f(event,null!=init?init:{}))),event}function assignProps(obj,props){for(const[key,value]of Object.entries(props))Object.defineProperty(obj,key,{get:()=>null!=value?value:null})}function sanitizeNumber(n){return Number(null!=n?n:0)}function initUIEvent(event,{view:view,detail:detail}){assignProps(event,{view:view,detail:sanitizeNumber(null!=detail?detail:0)})}function initUIEventModififiers(event,{altKey:altKey,ctrlKey:ctrlKey,metaKey:metaKey,shiftKey:shiftKey,modifierAltGraph:modifierAltGraph,modifierCapsLock:modifierCapsLock,modifierFn:modifierFn,modifierFnLock:modifierFnLock,modifierNumLock:modifierNumLock,modifierScrollLock:modifierScrollLock,modifierSymbol:modifierSymbol,modifierSymbolLock:modifierSymbolLock}){assignProps(event,{altKey:Boolean(altKey),ctrlKey:Boolean(ctrlKey),metaKey:Boolean(metaKey),shiftKey:Boolean(shiftKey),getModifierState(k){return Boolean({Alt:altKey,AltGraph:modifierAltGraph,CapsLock:modifierCapsLock,Control:ctrlKey,Fn:modifierFn,FnLock:modifierFnLock,Meta:metaKey,NumLock:modifierNumLock,ScrollLock:modifierScrollLock,Shift:shiftKey,Symbol:modifierSymbol,SymbolLock:modifierSymbolLock}[k])}})}function initMouseEvent(event,{x:x,y:y,screenX:screenX,screenY:screenY,clientX:clientX=x,clientY:clientY=y,button:button,buttons:buttons,relatedTarget:relatedTarget}){assignProps(event,{screenX:sanitizeNumber(screenX),screenY:sanitizeNumber(screenY),clientX:sanitizeNumber(clientX),x:sanitizeNumber(clientX),clientY:sanitizeNumber(clientY),y:sanitizeNumber(clientY),button:sanitizeNumber(button),buttons:sanitizeNumber(buttons),relatedTarget:relatedTarget})}function dispatchUIEvent(target,type,init,preventDefault=!1){(function isMouseEvent(type){return mouseEvents.includes(getEventClass(type))}(type)||function isKeyboardEvent(type){return"KeyboardEvent"===getEventClass(type)}(type))&&(init={...init,...this.system.getUIEventModifiers()});const event=createEvent(type,target,init);return dispatchEvent.call(this,target,event,preventDefault)}function dispatchEvent(target,event,preventDefault=!1){var ref;const type=event.type,behaviorImplementation=preventDefault?()=>{}:null===(ref=behavior[type])||void 0===ref?void 0:ref(event,target,this);if(behaviorImplementation){event.preventDefault();let defaultPrevented=!1;return Object.defineProperty(event,"defaultPrevented",{get:()=>defaultPrevented}),Object.defineProperty(event,"preventDefault",{value:()=>{defaultPrevented=event.cancelable}}),wrapEvent((()=>target.dispatchEvent(event))),defaultPrevented||behaviorImplementation(),!defaultPrevented}return wrapEvent((()=>target.dispatchEvent(event)))}const Interceptor=Symbol("Interceptor for programmatical calls");function prepareInterceptor(element,propName,interceptorImpl){const prototypeDescriptor=Object.getOwnPropertyDescriptor(element.constructor.prototype,propName),objectDescriptor=Object.getOwnPropertyDescriptor(element,propName),target=(null==prototypeDescriptor?void 0:prototypeDescriptor.set)?"set":"value";if("function"!=typeof(null==prototypeDescriptor?void 0:prototypeDescriptor[target])||prototypeDescriptor[target][Interceptor])throw new Error(`Element ${element.tagName} does not implement "${String(propName)}".`);function intercept(...args){const{applyNative:applyNative=!1,realArgs:realArgs,then:then}=interceptorImpl.call(this,...args),realFunc=(!applyNative&&objectDescriptor||prototypeDescriptor)[target];"set"===target?realFunc.call(this,realArgs):realFunc.call(this,...realArgs),null==then||then()}intercept[Interceptor]=Interceptor,Object.defineProperty(element,propName,{...null!=objectDescriptor?objectDescriptor:prototypeDescriptor,[target]:intercept})}function prepareValueInterceptor(element){prepareInterceptor(element,"value",(function interceptorImpl(v){const isUI=function isUIValue(value){return"object"==typeof value&&UIValue in value}(v);return isUI&&startTrackValue(this),{applyNative:!!isUI,realArgs:sanitizeValue(this,v),then:isUI?void 0:()=>function trackOrSetValue(element,v){var ref,ref1;null===(ref=element[TrackChanges])||void 0===ref||null===(ref1=ref.tracked)||void 0===ref1||ref1.push(v),element[TrackChanges]||(setUIValueClean(element),setUISelection(element,{focusOffset:v.length}))}(this,String(v))}}))}function sanitizeValue(element,v){return isElementType(element,"input",{type:"number"})&&""!==String(v)&&!Number.isNaN(Number(v))?String(Number(v)):String(v)}function prepareSelectionInterceptor(element){prepareInterceptor(element,"setSelectionRange",(function interceptorImpl(start,...others){const isUI=function isUISelectionStart(start){return!!start&&"object"==typeof start&&UISelection in start}(start);return{applyNative:!!isUI,realArgs:[Number(start),...others],then:()=>isUI?void 0:setUISelectionClean(element)}})),prepareInterceptor(element,"selectionStart",(function interceptorImpl(v){return{realArgs:v,then:()=>setUISelectionClean(element)}})),prepareInterceptor(element,"selectionEnd",(function interceptorImpl(v){return{realArgs:v,then:()=>setUISelectionClean(element)}})),prepareInterceptor(element,"select",(function interceptorImpl(){return{realArgs:[],then:()=>function setUISelectionRaw(element,selection){element[UISelection]=selection}(element,{anchorOffset:0,focusOffset:getUIValue(element).length})}}))}const isPrepared=Symbol("Node prepared with document state workarounds");function prepareDocument(document){document[isPrepared]||(document.addEventListener("focus",(e=>{prepareElement(e.target)}),{capture:!0,passive:!0}),document.activeElement&&prepareElement(document.activeElement),document.addEventListener("blur",(e=>{const el=e.target,initialValue=function getInitialValue(element){return element[InitialValue]}(el);void 0!==initialValue&&(el.value!==initialValue&&function dispatchDOMEvent(target,type,init){const event=createEvent(type,target,init);wrapEvent((()=>target.dispatchEvent(event)))}(el,"change"),clearInitialValue(el))}),{capture:!0,passive:!0}),document[isPrepared]=isPrepared)}function prepareElement(el){el[isPrepared]||(isElementType(el,["input","textarea"])&&(prepareValueInterceptor(el),prepareSelectionInterceptor(el),function prepareRangeTextInterceptor(element){prepareInterceptor(element,"setRangeText",(function interceptorImpl(...realArgs){return{realArgs:realArgs,then:()=>{setUIValueClean(element),setUISelectionClean(element)}}}))}(el)),el[isPrepared]=isPrepared)}function wait(config){const delay=config.delay;if("number"==typeof delay)return Promise.all([new Promise((resolve=>globalThis.setTimeout((()=>resolve()),delay))),config.advanceTimers(delay)])}var _pressed,_code,_code1,DOM_KEY_LOCATION;!function(DOM_KEY_LOCATION){DOM_KEY_LOCATION[DOM_KEY_LOCATION.STANDARD=0]="STANDARD",DOM_KEY_LOCATION[DOM_KEY_LOCATION.LEFT=1]="LEFT",DOM_KEY_LOCATION[DOM_KEY_LOCATION.RIGHT=2]="RIGHT",DOM_KEY_LOCATION[DOM_KEY_LOCATION.NUMPAD=3]="NUMPAD"}(DOM_KEY_LOCATION||(DOM_KEY_LOCATION={}));const modifierKeys=["Alt","AltGraph","Control","Fn","Meta","Shift","Symbol"];function isModifierKey(key){return modifierKeys.includes(key)}const modifierLocks=["CapsLock","FnLock","NumLock","ScrollLock","SymbolLock"];function isModifierLock(key){return modifierLocks.includes(key)}class KeyboardHost{isKeyPressed(keyDef){return!!this.pressed[String(keyDef.code)]}getPressedKeys(){return Object.values(this.pressed).map((p=>p.keyDef))}async keydown(instance,keyDef){const key=String(keyDef.key),code=String(keyDef.code),target=getActiveElementOrBody(instance.config.document);var ref;this.setKeydownTarget(target),null!==(ref=(_pressed=this.pressed)[_code=code])&&void 0!==ref||(_pressed[_code]={keyDef:keyDef,unpreventedDefault:!1}),isModifierKey(key)&&(this.modifiers[key]=!0);const unprevented=instance.dispatchUIEvent(target,"keydown",{key:key,code:code});isModifierLock(key)&&!this.modifiers[key]&&(this.modifiers[key]=!0,this.modifierLockStart[key]=!0),(_code1=this.pressed[code]).unpreventedDefault||(_code1.unpreventedDefault=unprevented),unprevented&&this.hasKeyPress(key)&&instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document),"keypress",{key:key,code:code,charCode:"Enter"===keyDef.key?13:String(keyDef.key).charCodeAt(0)})}async keyup(instance,keyDef){const key=String(keyDef.key),code=String(keyDef.code),unprevented=this.pressed[code].unpreventedDefault;delete this.pressed[code],isModifierKey(key)&&!Object.values(this.pressed).find((p=>p.keyDef.key===key))&&(this.modifiers[key]=!1),instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document),"keyup",{key:key,code:code},!unprevented),isModifierLock(key)&&this.modifiers[key]&&(this.modifierLockStart[key]?this.modifierLockStart[key]=!1:this.modifiers[key]=!1)}setKeydownTarget(target){target!==this.lastKeydownTarget&&(this.carryChar=""),this.lastKeydownTarget=target}hasKeyPress(key){return!(1!==key.length&&"Enter"!==key||this.modifiers.Control||this.modifiers.Alt)}constructor(system){this.modifiers={Alt:!1,AltGraph:!1,CapsLock:!1,Control:!1,Fn:!1,FnLock:!1,Meta:!1,NumLock:!1,ScrollLock:!1,Shift:!1,Symbol:!1,SymbolLock:!1},this.pressed={},this.carryChar="",this.lastKeydownTarget=void 0,this.modifierLockStart={},this.system=system}}const defaultKeyMap=[..."0123456789".split("").map((c=>({code:`Digit${c}`,key:c}))),...")!@#$%^&*(".split("").map(((c,i)=>({code:`Digit${i}`,key:c,shiftKey:!0}))),..."abcdefghijklmnopqrstuvwxyz".split("").map((c=>({code:`Key${c.toUpperCase()}`,key:c}))),..."ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").map((c=>({code:`Key${c}`,key:c,shiftKey:!0}))),{code:"Space",key:" "},{code:"AltLeft",key:"Alt",location:DOM_KEY_LOCATION.LEFT},{code:"AltRight",key:"Alt",location:DOM_KEY_LOCATION.RIGHT},{code:"ShiftLeft",key:"Shift",location:DOM_KEY_LOCATION.LEFT},{code:"ShiftRight",key:"Shift",location:DOM_KEY_LOCATION.RIGHT},{code:"ControlLeft",key:"Control",location:DOM_KEY_LOCATION.LEFT},{code:"ControlRight",key:"Control",location:DOM_KEY_LOCATION.RIGHT},{code:"MetaLeft",key:"Meta",location:DOM_KEY_LOCATION.LEFT},{code:"MetaRight",key:"Meta",location:DOM_KEY_LOCATION.RIGHT},{code:"OSLeft",key:"OS",location:DOM_KEY_LOCATION.LEFT},{code:"OSRight",key:"OS",location:DOM_KEY_LOCATION.RIGHT},{code:"Tab",key:"Tab"},{code:"CapsLock",key:"CapsLock"},{code:"Backspace",key:"Backspace"},{code:"Enter",key:"Enter"},{code:"Escape",key:"Escape"},{code:"ArrowUp",key:"ArrowUp"},{code:"ArrowDown",key:"ArrowDown"},{code:"ArrowLeft",key:"ArrowLeft"},{code:"ArrowRight",key:"ArrowRight"},{code:"Home",key:"Home"},{code:"End",key:"End"},{code:"Delete",key:"Delete"},{code:"PageUp",key:"PageUp"},{code:"PageDown",key:"PageDown"},{code:"Fn",key:"Fn"},{code:"Symbol",key:"Symbol"},{code:"AltRight",key:"AltGraph"}];class Buttons{getButtons(){let v=0;for(const button of Object.keys(this.pressed))v|=2**Number(button);return v}down(keyDef){const button=getMouseButtonId(keyDef.button);if(!(button in this.pressed))return this.pressed[button]=[keyDef],button;this.pressed[button].push(keyDef)}up(keyDef){const button=getMouseButtonId(keyDef.button);if(button in this.pressed&&(this.pressed[button]=this.pressed[button].filter((k=>k.name!==keyDef.name)),0===this.pressed[button].length))return delete this.pressed[button],button}constructor(){this.pressed={}}}const MouseButton={primary:0,secondary:1,auxiliary:2,back:3,X1:3,forward:4,X2:4};function getMouseButtonId(button=0){return button in MouseButton?MouseButton[button]:Number(button)}const MouseButtonFlip={1:2,2:1};function getMouseEventButton(button){return(button=getMouseButtonId(button))in MouseButtonFlip?MouseButtonFlip[button]:button}class Device{get countPressed(){return this.pressedKeys.size}isPressed(keyDef){return this.pressedKeys.has(keyDef.name)}addPressed(keyDef){return this.pressedKeys.add(keyDef.name)}removePressed(keyDef){return this.pressedKeys.delete(keyDef.name)}constructor(){this.pressedKeys=new Set}}function getTreeDiff(a,b){const treeA=[];for(let el=a;el;el=el.parentElement)treeA.push(el);const treeB=[];for(let el1=b;el1;el1=el1.parentElement)treeB.push(el1);let i=0;for(;!(i>=treeA.length||i>=treeB.length||treeA[treeA.length-1-i]!==treeB[treeB.length-1-i]);i++);return[treeA.slice(0,treeA.length-i),treeB.slice(0,treeB.length-i),treeB.slice(treeB.length-i)]}function resolveCaretPosition({target:target,node:node,offset:offset}){return hasOwnSelection(target)?{node:target,offset:null!=offset?offset:getUIValue(target).length}:node?{node:node,offset:null!=offset?offset:3===node.nodeType?node.nodeValue.length:node.childNodes.length}:findNodeAtTextOffset(target,offset)}function findNodeAtTextOffset(node,offset,isRoot=!0){let i=void 0===offset?node.childNodes.length-1:0;const step=void 0===offset?-1:1;for(;void 0===offset?i>=(isRoot?Math.max(node.childNodes.length-1,0):0):i<=node.childNodes.length;){if(offset&&i===node.childNodes.length)throw new Error("The given offset is out of bounds.");const c=node.childNodes.item(i),text=String(c.textContent);if(text.length)if(void 0!==offset&&text.length<offset)offset-=text.length;else{if(1===c.nodeType)return findNodeAtTextOffset(c,offset,!1);if(3===c.nodeType)return{node:c,offset:null!=offset?offset:c.nodeValue.length}}i+=step}return{node:node,offset:node.childNodes.length}}function setSelectionPerMouseDown({document:document,target:target,clickCount:clickCount,node:node,offset:offset}){if(function hasNoSelection(node){return isElement(node)&&isClickableInput(node)}(target))return;const targetHasOwnSelection=hasOwnSelection(target),text=String(targetHasOwnSelection?getUIValue(target):target.textContent),[start,end]=node?[offset,offset]:function getTextRange(text,pos,clickCount){if(clickCount%3==1||0===text.length)return[pos,pos];const textPos=null!=pos?pos:text.length;if(clickCount%3==2)return[textPos-text.substr(0,pos).match(/(\w+|\s+|\W)?$/)[0].length,void 0===pos?pos:pos+text.substr(pos).match(/^(\w+|\s+|\W)?/)[0].length];return[textPos-text.substr(0,pos).match(/[^\r\n]*$/)[0].length,void 0===pos?pos:pos+text.substr(pos).match(/^[^\r\n]*/)[0].length]}(text,offset,clickCount);if(targetHasOwnSelection)return setUISelection(target,{anchorOffset:null!=start?start:text.length,focusOffset:null!=end?end:text.length}),{node:target,start:null!=start?start:0,end:null!=end?end:text.length};{const{node:startNode,offset:startOffset}=resolveCaretPosition({target:target,node:node,offset:start}),{node:endNode,offset:endOffset}=resolveCaretPosition({target:target,node:node,offset:end}),range=target.ownerDocument.createRange();try{range.setStart(startNode,startOffset),range.setEnd(endNode,endOffset)}catch(e){throw new Error("The given offset is out of bounds.")}const selection=document.getSelection();return null==selection||selection.removeAllRanges(),null==selection||selection.addRange(range.cloneRange()),range}}function isDifferentPointerPosition(positionA,positionB){var ref,ref1,ref2,ref3,ref4,ref5,ref6,ref7;return positionA.target!==positionB.target||(null===(ref=positionA.coords)||void 0===ref?void 0:ref.x)!==(null===(ref1=positionB.coords)||void 0===ref1?void 0:ref1.y)||(null===(ref2=positionA.coords)||void 0===ref2?void 0:ref2.y)!==(null===(ref3=positionB.coords)||void 0===ref3?void 0:ref3.y)||(null===(ref4=positionA.caret)||void 0===ref4?void 0:ref4.node)!==(null===(ref5=positionB.caret)||void 0===ref5?void 0:ref5.node)||(null===(ref6=positionA.caret)||void 0===ref6?void 0:ref6.offset)!==(null===(ref7=positionB.caret)||void 0===ref7?void 0:ref7.offset)}class Mouse{move(instance,position){const prevPosition=this.position,prevTarget=this.getTarget(instance);if(this.position=position,!isDifferentPointerPosition(prevPosition,position))return;const nextTarget=this.getTarget(instance),init=this.getEventInit("mousemove"),[leave,enter]=getTreeDiff(prevTarget,nextTarget);return{leave:()=>{prevTarget!==nextTarget&&(instance.dispatchUIEvent(prevTarget,"mouseout",init),leave.forEach((el=>instance.dispatchUIEvent(el,"mouseleave",init))))},enter:()=>{prevTarget!==nextTarget&&(instance.dispatchUIEvent(nextTarget,"mouseover",init),enter.forEach((el=>instance.dispatchUIEvent(el,"mouseenter",init))))},move:()=>{instance.dispatchUIEvent(nextTarget,"mousemove",init),this.modifySelecting(instance)}}}down(instance,keyDef,pointer){const button=this.buttons.down(keyDef);if(void 0===button)return;const target=this.getTarget(instance);this.buttonDownTarget[button]=target;const disabled=isDisabled(target),init=this.getEventInit("mousedown",keyDef.button);(disabled||instance.dispatchUIEvent(target,"mousedown",init))&&(this.startSelecting(instance,init.detail),focusElement(target)),disabled||2!==getMouseEventButton(keyDef.button)||instance.dispatchUIEvent(target,"contextmenu",this.getEventInit("contextmenu",keyDef.button,pointer))}up(instance,keyDef,pointer){const button=this.buttons.up(keyDef);if(void 0===button)return;const target=this.getTarget(instance);if(!isDisabled(target)){instance.dispatchUIEvent(target,"mouseup",this.getEventInit("mouseup",keyDef.button)),this.endSelecting();const clickTarget=getTreeDiff(this.buttonDownTarget[button],target)[2][0];if(clickTarget){const init=this.getEventInit("click",keyDef.button,pointer);init.detail&&(instance.dispatchUIEvent(clickTarget,0===init.button?"click":"auxclick",init),0===init.button&&2===init.detail&&instance.dispatchUIEvent(clickTarget,"dblclick",{...this.getEventInit("dblclick",keyDef.button),detail:init.detail}))}}}resetClickCount(){this.clickCount.reset()}getEventInit(type,button,pointer){const init={...this.position.coords};return pointer&&(init.pointerId=pointer.pointerId,init.pointerType=pointer.pointerType,init.isPrimary=pointer.isPrimary),init.button=getMouseEventButton(button),init.buttons=this.buttons.getButtons(),"mousedown"===type?init.detail=this.clickCount.getOnDown(init.button):"mouseup"===type?init.detail=this.clickCount.getOnUp(init.button):"click"!==type&&"auxclick"!==type||(init.detail=this.clickCount.incOnClick(init.button)),init}getTarget(instance){var _target;return null!==(_target=this.position.target)&&void 0!==_target?_target:instance.config.document.body}startSelecting(instance,clickCount){var ref,ref1;this.selecting=setSelectionPerMouseDown({document:instance.config.document,target:this.getTarget(instance),node:null===(ref=this.position.caret)||void 0===ref?void 0:ref.node,offset:null===(ref1=this.position.caret)||void 0===ref1?void 0:ref1.offset,clickCount:clickCount})}modifySelecting(instance){var ref,ref1;this.selecting&&function modifySelectionPerMouseMove(selectionRange,{document:document,target:target,node:node,offset:offset}){const selectionFocus=resolveCaretPosition({target:target,node:node,offset:offset});if("node"in selectionRange){if(selectionFocus.node===selectionRange.node){const anchorOffset=selectionFocus.offset<selectionRange.start?selectionRange.end:selectionRange.start,focusOffset=selectionFocus.offset>selectionRange.end||selectionFocus.offset<selectionRange.start?selectionFocus.offset:selectionRange.end;setUISelection(selectionRange.node,{anchorOffset:anchorOffset,focusOffset:focusOffset})}}else{const range=selectionRange.cloneRange(),cmp=range.comparePoint(selectionFocus.node,selectionFocus.offset);cmp<0?range.setStart(selectionFocus.node,selectionFocus.offset):cmp>0&&range.setEnd(selectionFocus.node,selectionFocus.offset);const selection=document.getSelection();null==selection||selection.removeAllRanges(),null==selection||selection.addRange(range.cloneRange())}}(this.selecting,{document:instance.config.document,target:this.getTarget(instance),node:null===(ref=this.position.caret)||void 0===ref?void 0:ref.node,offset:null===(ref1=this.position.caret)||void 0===ref1?void 0:ref1.offset})}endSelecting(){this.selecting=void 0}constructor(){this.position={},this.buttons=new Buttons,this.buttonDownTarget={},this.clickCount=new class{incOnClick(button){const current=void 0===this.down[button]?void 0:Number(this.down[button])+1;return this.count=void 0===this.count[button]?{}:{[button]:Number(this.count[button])+1},current}getOnDown(button){var _button,_button1;return this.down={[button]:null!==(_button=this.count[button])&&void 0!==_button?_button:0},this.count={[button]:null!==(_button1=this.count[button])&&void 0!==_button1?_button1:0},Number(this.count[button])+1}getOnUp(button){return void 0===this.down[button]?void 0:Number(this.down[button])+1}reset(){this.count={}}constructor(){this.down={},this.count={}}}}}function hasPointerEvents(instance,element){var ref;return"none"!==(null===(ref=checkPointerEvents(instance,element))||void 0===ref?void 0:ref.pointerEvents)}const PointerEventsCheck=Symbol("Last check for pointer-events");function checkPointerEvents(instance,element){const lastCheck=element[PointerEventsCheck];if(!(instance.config.pointerEventsCheck!==PointerEventsCheckLevel.Never&&(!lastCheck||hasBitFlag(instance.config.pointerEventsCheck,PointerEventsCheckLevel.EachApiCall)&&lastCheck[ApiLevel.Call]!==getLevelRef(instance,ApiLevel.Call)||hasBitFlag(instance.config.pointerEventsCheck,PointerEventsCheckLevel.EachTrigger)&&lastCheck[ApiLevel.Trigger]!==getLevelRef(instance,ApiLevel.Trigger))))return null==lastCheck?void 0:lastCheck.result;const declaration=function closestPointerEventsDeclaration(element){const window=getWindow(element);for(let el=element,tree=[];null==el?void 0:el.ownerDocument;el=el.parentElement){tree.push(el);const pointerEvents=window.getComputedStyle(el).pointerEvents;if(pointerEvents&&!["inherit","unset"].includes(pointerEvents))return{pointerEvents:pointerEvents,tree:tree}}}(element);return element[PointerEventsCheck]={[ApiLevel.Call]:getLevelRef(instance,ApiLevel.Call),[ApiLevel.Trigger]:getLevelRef(instance,ApiLevel.Trigger),result:declaration},declaration}function assertPointerEvents(instance,element){const declaration=checkPointerEvents(instance,element);if("none"===(null==declaration?void 0:declaration.pointerEvents))throw new Error([`Unable to perform pointer interaction as the element ${declaration.tree.length>1?"inherits":"has"} \`pointer-events: none\`:`,"",(tree=declaration.tree,tree.reverse().map(((el,i)=>["".padEnd(i),el.tagName,el.id&&`#${el.id}`,el.hasAttribute("data-testid")&&`(testId=${el.getAttribute("data-testid")})`,getLabelDescr(el),tree.length>1&&0===i&&"  <-- This element declared `pointer-events: none`",tree.length>1&&i===tree.length-1&&"  <-- Asserted pointer events here"].filter(Boolean).join(""))).join("\n"))].join("\n"));var tree}function getLabelDescr(element){var ref;let label;if(element.hasAttribute("aria-label"))label=element.getAttribute("aria-label");else if(element.hasAttribute("aria-labelledby")){var ref1,ref2;label=null===(ref1=element.ownerDocument.getElementById(element.getAttribute("aria-labelledby")))||void 0===ref1||null===(ref2=ref1.textContent)||void 0===ref2?void 0:ref2.trim()}else if(isElementType(element,["button","input","meter","output","progress","select","textarea"])&&(null===(ref=element.labels)||void 0===ref?void 0:ref.length))label=Array.from(element.labels).map((el=>{var ref;return null===(ref=el.textContent)||void 0===ref?void 0:ref.trim()})).join("|");else if(isElementType(element,"button")){var ref3;label=null===(ref3=element.textContent)||void 0===ref3?void 0:ref3.trim()}return label=null==label?void 0:label.replace(/\n/g,"  "),Number(null==label?void 0:label.length)>30&&(label=`${null==label?void 0:label.substring(0,29)}…`),label?`(label=${label})`:""}function hasBitFlag(conf,flag){return(conf&flag)>0}class Pointer{init(instance,position){this.position=position;const target=this.getTarget(instance),[,enter]=getTreeDiff(null,target),init=this.getEventInit();return assertPointerEvents(instance,target),instance.dispatchUIEvent(target,"pointerover",init),enter.forEach((el=>instance.dispatchUIEvent(el,"pointerenter",init))),this}move(instance,position){const prevPosition=this.position,prevTarget=this.getTarget(instance);if(this.position=position,!isDifferentPointerPosition(prevPosition,position))return;const nextTarget=this.getTarget(instance),init=this.getEventInit(),[leave,enter]=getTreeDiff(prevTarget,nextTarget);return{leave:()=>{hasPointerEvents(instance,prevTarget)&&prevTarget!==nextTarget&&(instance.dispatchUIEvent(prevTarget,"pointerout",init),leave.forEach((el=>instance.dispatchUIEvent(el,"pointerleave",init))))},enter:()=>{assertPointerEvents(instance,nextTarget),prevTarget!==nextTarget&&(instance.dispatchUIEvent(nextTarget,"pointerover",init),enter.forEach((el=>instance.dispatchUIEvent(el,"pointerenter",init))))},move:()=>{instance.dispatchUIEvent(nextTarget,"pointermove",init)}}}down(instance,_keyDef){if(this.isDown)return;const target=this.getTarget(instance);assertPointerEvents(instance,target),this.isDown=!0,this.isPrevented=!instance.dispatchUIEvent(target,"pointerdown",this.getEventInit())}up(instance,_keyDef){if(!this.isDown)return;const target=this.getTarget(instance);assertPointerEvents(instance,target),this.isDown=!1,instance.dispatchUIEvent(target,"pointerup",this.getEventInit())}release(instance){const target=this.getTarget(instance),[leave]=getTreeDiff(target,null),init=this.getEventInit();hasPointerEvents(instance,target)&&(instance.dispatchUIEvent(target,"pointerout",init),leave.forEach((el=>instance.dispatchUIEvent(el,"pointerleave",init)))),this.isCancelled=!0}getTarget(instance){var _target;return null!==(_target=this.position.target)&&void 0!==_target?_target:instance.config.document.body}getEventInit(){return{...this.position.coords,pointerId:this.pointerId,pointerType:this.pointerType,isPrimary:this.isPrimary}}constructor({pointerId:pointerId,pointerType:pointerType,isPrimary:isPrimary}){this.isMultitouch=!1,this.isCancelled=!1,this.isDown=!1,this.isPrevented=!1,this.position={},this.pointerId=pointerId,this.pointerType=pointerType,this.isPrimary=isPrimary,this.isMultitouch=!isPrimary}}var _registry,_k;class PointerHost{isKeyPressed(keyDef){return this.devices.get(keyDef.pointerType).isPressed(keyDef)}async press(instance,keyDef,position){const pointerName=this.getPointerName(keyDef),pointer="touch"===keyDef.pointerType?this.pointers.new(pointerName,keyDef).init(instance,position):this.pointers.get(pointerName);pointer.position=position,"touch"!==pointer.pointerType&&(this.mouse.position=position),this.devices.get(keyDef.pointerType).addPressed(keyDef),this.buttons.down(keyDef),pointer.down(instance,keyDef),"touch"===pointer.pointerType||pointer.isPrevented||this.mouse.down(instance,keyDef,pointer)}async move(instance,pointerName,position){const pointer=this.pointers.get(pointerName),pointermove=pointer.move(instance,position),mousemove="touch"===pointer.pointerType||pointer.isPrevented&&pointer.isDown?void 0:this.mouse.move(instance,position);null==pointermove||pointermove.leave(),null==mousemove||mousemove.leave(),null==pointermove||pointermove.enter(),null==mousemove||mousemove.enter(),null==pointermove||pointermove.move(),null==mousemove||mousemove.move()}async release(instance,keyDef,position){const device=this.devices.get(keyDef.pointerType);device.removePressed(keyDef),this.buttons.up(keyDef);const pointer=this.pointers.get(this.getPointerName(keyDef));if(pointer.position=position,"touch"!==pointer.pointerType&&(this.mouse.position=position),0===device.countPressed&&pointer.up(instance,keyDef),"touch"===pointer.pointerType&&pointer.release(instance),!pointer.isPrevented){if("touch"===pointer.pointerType&&!pointer.isMultitouch){const mousemove=this.mouse.move(instance,pointer.position);null==mousemove||mousemove.leave(),null==mousemove||mousemove.enter(),null==mousemove||mousemove.move(),this.mouse.down(instance,keyDef,pointer)}if(!pointer.isMultitouch){const mousemove1=this.mouse.move(instance,pointer.position);null==mousemove1||mousemove1.leave(),null==mousemove1||mousemove1.enter(),null==mousemove1||mousemove1.move(),this.mouse.up(instance,keyDef,pointer)}}}getPointerName(keyDef){return"touch"===keyDef.pointerType?keyDef.name:keyDef.pointerType}getPreviousPosition(pointerName){return this.pointers.has(pointerName)?this.pointers.get(pointerName).position:void 0}resetClickCount(){this.mouse.resetClickCount()}getMouseTarget(instance){var _target;return null!==(_target=this.mouse.position.target)&&void 0!==_target?_target:instance.config.document.body}setMousePosition(position){this.mouse.position=position,this.pointers.get("mouse").position=position}constructor(system){this.devices=new class{get(k){var ref;return null!==(ref=(_registry=this.registry)[_k=k])&&void 0!==ref||(_registry[_k]=new Device),this.registry[k]}constructor(){this.registry={}}},this.pointers=new class{new(pointerName,keyDef){const isPrimary="touch"!==keyDef.pointerType||!Object.values(this.registry).some((p=>"touch"===p.pointerType&&!p.isCancelled));return isPrimary||Object.values(this.registry).forEach((p=>{p.pointerType!==keyDef.pointerType||p.isCancelled||(p.isMultitouch=!0)})),this.registry[pointerName]=new Pointer({pointerId:this.nextId++,pointerType:keyDef.pointerType,isPrimary:isPrimary}),this.registry[pointerName]}get(pointerName){if(!this.has(pointerName))throw new Error(`Trying to access pointer "${pointerName}" which does not exist.`);return this.registry[pointerName]}has(pointerName){return pointerName in this.registry}constructor(){this.registry={mouse:new Pointer({pointerId:1,pointerType:"mouse",isPrimary:!0})},this.nextId=2}},this.system=system,this.buttons=new Buttons,this.mouse=new Mouse}}class System{getUIEventModifiers(){return{altKey:this.keyboard.modifiers.Alt,ctrlKey:this.keyboard.modifiers.Control,metaKey:this.keyboard.modifiers.Meta,shiftKey:this.keyboard.modifiers.Shift,modifierAltGraph:this.keyboard.modifiers.AltGraph,modifierCapsLock:this.keyboard.modifiers.CapsLock,modifierFn:this.keyboard.modifiers.Fn,modifierFnLock:this.keyboard.modifiers.FnLock,modifierNumLock:this.keyboard.modifiers.NumLock,modifierScrollLock:this.keyboard.modifiers.ScrollLock,modifierSymbol:this.keyboard.modifiers.Symbol,modifierSymbolLock:this.keyboard.modifiers.SymbolLock}}constructor(){this.keyboard=new KeyboardHost(this),this.pointer=new PointerHost(this)}}async function click(element){const pointerIn=[];return this.config.skipHover||pointerIn.push({target:element}),pointerIn.push({keys:"[MouseLeft]",target:element}),this.pointer(pointerIn)}async function dblClick(element){return this.pointer([{target:element},"[MouseLeft][MouseLeft]"])}async function tripleClick(element){return this.pointer([{target:element},"[MouseLeft][MouseLeft][MouseLeft]"])}async function hover(element){return this.pointer({target:element})}async function unhover(element){return assertPointerEvents(this,this.system.pointer.getMouseTarget(this)),this.pointer({target:element.ownerDocument.body})}async function tab({shift:shift}={}){return this.keyboard(!0===shift?"{Shift>}{Tab}{/Shift}":!1===shift?"[/ShiftLeft][/ShiftRight]{Tab}":"{Tab}")}async function keyboard(text){const actions=function parseKeyDef(keyboardMap,text){const defs=[];do{const{type:type,descriptor:descriptor,consumedLength:consumedLength,releasePrevious:releasePrevious,releaseSelf:releaseSelf=!0,repeat:repeat}=readNextDescriptor(text,"keyboard");var ref;const keyDef=null!==(ref=keyboardMap.find((def=>{var ref,ref1;return"["===type?(null===(ref=def.code)||void 0===ref?void 0:ref.toLowerCase())===descriptor.toLowerCase():"{"===type?(null===(ref1=def.key)||void 0===ref1?void 0:ref1.toLowerCase())===descriptor.toLowerCase():def.key===descriptor})))&&void 0!==ref?ref:{key:"Unknown",code:"Unknown",["["===type?"code":"key"]:descriptor};defs.push({keyDef:keyDef,releasePrevious:releasePrevious,releaseSelf:releaseSelf,repeat:repeat}),text=text.slice(consumedLength)}while(text);return defs}(this.config.keyboardMap,text);for(let i=0;i<actions.length;i++)await wait(this.config),await keyboardAction(this,actions[i])}async function keyboardAction(instance,{keyDef:keyDef,releasePrevious:releasePrevious,releaseSelf:releaseSelf,repeat:repeat}){const{system:system}=instance;if(system.keyboard.isKeyPressed(keyDef)&&await system.keyboard.keyup(instance,keyDef),!releasePrevious){for(let i=1;i<=repeat;i++)await system.keyboard.keydown(instance,keyDef),i<repeat&&await wait(instance.config);releaseSelf&&await system.keyboard.keyup(instance,keyDef)}}function copySelection(target){const data=hasOwnSelection(target)?{"text/plain":readSelectedValueFromInput(target)}:{"text/plain":String(target.ownerDocument.getSelection())},dt=createDataTransfer(getWindow(target));for(const type in data)data[type]&&dt.setData(type,data[type]);return dt}function readSelectedValueFromInput(target){const sel=getUISelection(target);return getUIValue(target).substring(sel.startOffset,sel.endOffset)}async function copy(){const doc=this.config.document;var _activeElement;const target=null!==(_activeElement=doc.activeElement)&&void 0!==_activeElement?_activeElement:doc.body,clipboardData=copySelection(target);if(0!==clipboardData.items.length)return this.dispatchUIEvent(target,"copy",{clipboardData:clipboardData})&&this.config.writeToClipboard&&await writeDataTransferToClipboard(doc,clipboardData),clipboardData}async function cut(){const doc=this.config.document;var _activeElement;const target=null!==(_activeElement=doc.activeElement)&&void 0!==_activeElement?_activeElement:doc.body,clipboardData=copySelection(target);if(0!==clipboardData.items.length)return this.dispatchUIEvent(target,"cut",{clipboardData:clipboardData})&&this.config.writeToClipboard&&await writeDataTransferToClipboard(target.ownerDocument,clipboardData),clipboardData}async function paste(clipboardData){const doc=this.config.document;var _activeElement;const target=null!==(_activeElement=doc.activeElement)&&void 0!==_activeElement?_activeElement:doc.body;var ref;const dataTransfer=null!==(ref="string"==typeof clipboardData?function getClipboardDataFromString(doc,text){const dt=createDataTransfer(getWindow(doc));return dt.setData("text",text),dt}(doc,clipboardData):clipboardData)&&void 0!==ref?ref:await async function readDataTransferFromClipboard(document){const window=document.defaultView,clipboard=null==window?void 0:window.navigator.clipboard,items=clipboard&&await clipboard.read();if(!items)throw new Error("The Clipboard API is unavailable.");const dt=createDataTransfer(window);for(const item of items)for(const type of item.types)dt.setData(type,await item.getType(type).then((b=>readBlobText(b,window.FileReader))));return dt}(doc).catch((()=>{throw new Error("`userEvent.paste()` without `clipboardData` requires the `ClipboardAPI` to be available.")}));this.dispatchUIEvent(target,"paste",{clipboardData:dataTransfer})}function parseKeyDef_parseKeyDef(pointerMap,keys){const defs=[];do{const{descriptor:descriptor,consumedLength:consumedLength,releasePrevious:releasePrevious,releaseSelf:releaseSelf=!0}=readNextDescriptor(keys,"pointer"),keyDef=pointerMap.find((p=>p.name===descriptor));keyDef&&defs.push({keyDef:keyDef,releasePrevious:releasePrevious,releaseSelf:releaseSelf}),keys=keys.slice(consumedLength)}while(keys);return defs}async function pointer(input){const{pointerMap:pointerMap}=this.config,actions=[];(Array.isArray(input)?input:[input]).forEach((actionInput=>{"string"==typeof actionInput?actions.push(...parseKeyDef_parseKeyDef(pointerMap,actionInput)):"keys"in actionInput?actions.push(...parseKeyDef_parseKeyDef(pointerMap,actionInput.keys).map((i=>({...actionInput,...i})))):actions.push(actionInput)}));for(let i=0;i<actions.length;i++)await wait(this.config),await pointerAction(this,actions[i]);this.system.pointer.resetClickCount()}async function pointerAction(instance,action){var ref,ref1;const pointerName="pointerName"in action&&action.pointerName?action.pointerName:"keyDef"in action?instance.system.pointer.getPointerName(action.keyDef):"mouse",previousPosition=instance.system.pointer.getPreviousPosition(pointerName);var _target,_coords,_node,_offset;const position={target:null!==(_target=action.target)&&void 0!==_target?_target:getPrevTarget(instance,previousPosition),coords:null!==(_coords=action.coords)&&void 0!==_coords?_coords:null==previousPosition?void 0:previousPosition.coords,caret:{node:null!==(_node=action.node)&&void 0!==_node?_node:hasCaretPosition(action)||null==previousPosition||null===(ref=previousPosition.caret)||void 0===ref?void 0:ref.node,offset:null!==(_offset=action.offset)&&void 0!==_offset?_offset:hasCaretPosition(action)||null==previousPosition||null===(ref1=previousPosition.caret)||void 0===ref1?void 0:ref1.offset}};"keyDef"in action?(instance.system.pointer.isKeyPressed(action.keyDef)&&(setLevelRef(instance,ApiLevel.Trigger),await instance.system.pointer.release(instance,action.keyDef,position)),action.releasePrevious||(setLevelRef(instance,ApiLevel.Trigger),await instance.system.pointer.press(instance,action.keyDef,position),action.releaseSelf&&(setLevelRef(instance,ApiLevel.Trigger),await instance.system.pointer.release(instance,action.keyDef,position)))):(setLevelRef(instance,ApiLevel.Trigger),await instance.system.pointer.move(instance,pointerName,position))}function hasCaretPosition(action){var _target,ref;return!!(null!==(ref=null!==(_target=action.target)&&void 0!==_target?_target:action.node)&&void 0!==ref?ref:void 0!==action.offset)}function getPrevTarget(instance,position){if(!position)throw new Error("This pointer has no previous position. Provide a target property!");var _target;return null!==(_target=position.target)&&void 0!==_target?_target:instance.config.document.body}async function clear(element){if(!isEditable(element)||isDisabled(element))throw new Error("clear()` is only supported on editable elements.");if(focusElement(element),element.ownerDocument.activeElement!==element)throw new Error("The element to be cleared could not be focused.");if(selectAll(element),!function isAllSelected(target){if(hasOwnSelection(target))return 0===getUISelection(target).startOffset&&getUISelection(target).endOffset===getUIValue(target).length;var ref;const focusNode=null!==(ref=getContentEditable(target))&&void 0!==ref?ref:target.ownerDocument.body,selection=target.ownerDocument.getSelection();return(null==selection?void 0:selection.anchorNode)===focusNode&&selection.focusNode===focusNode&&0===selection.anchorOffset&&selection.focusOffset===focusNode.childNodes.length}(element))throw new Error("The element content to be cleared could not be selected.");input(this,element,"","deleteContentBackward")}async function selectOptions(select,values){return selectOptionsBase.call(this,!0,select,values)}async function deselectOptions(select,values){return selectOptionsBase.call(this,!1,select,values)}async function selectOptionsBase(newValue,select,values){if(!newValue&&!select.multiple)throw(0,dom_esm.getConfig)().getElementError("Unable to deselect an option in a non-multiple select. Use selectOptions to change the selection instead.",select);const valArray=Array.isArray(values)?values:[values],allOptions=Array.from(select.querySelectorAll('option, [role="option"]')),selectedOptions=valArray.map((val=>{if("string"!=typeof val&&allOptions.includes(val))return val;{const matchingOption=allOptions.find((o=>o.value===val||o.innerHTML===val));if(matchingOption)return matchingOption;throw(0,dom_esm.getConfig)().getElementError(`Value "${String(val)}" not found in options`,select)}})).filter((option=>!isDisabled(option)));if(isDisabled(select)||!selectedOptions.length)return;const selectOption=option=>{option.selected=newValue,this.dispatchUIEvent(select,"input",{bubbles:!0,cancelable:!1,composed:!0}),this.dispatchUIEvent(select,"change")};if(isElementType(select,"select"))if(select.multiple)for(const option of selectedOptions){const withPointerEvents=0===this.config.pointerEventsCheck||hasPointerEvents(this,option);withPointerEvents&&(this.dispatchUIEvent(option,"pointerover"),this.dispatchUIEvent(select,"pointerenter"),this.dispatchUIEvent(option,"mouseover"),this.dispatchUIEvent(select,"mouseenter"),this.dispatchUIEvent(option,"pointermove"),this.dispatchUIEvent(option,"mousemove"),this.dispatchUIEvent(option,"pointerdown"),this.dispatchUIEvent(option,"mousedown")),focusElement(select),withPointerEvents&&(this.dispatchUIEvent(option,"pointerup"),this.dispatchUIEvent(option,"mouseup")),selectOption(option),withPointerEvents&&this.dispatchUIEvent(option,"click"),await wait(this.config)}else{if(1!==selectedOptions.length)throw(0,dom_esm.getConfig)().getElementError("Cannot select multiple options on a non-multiple select",select);{const withPointerEvents1=0===this.config.pointerEventsCheck||hasPointerEvents(this,select);withPointerEvents1?await this.click(select):focusElement(select),selectOption(selectedOptions[0]),withPointerEvents1&&(this.dispatchUIEvent(select,"pointerover"),this.dispatchUIEvent(select,"pointerenter"),this.dispatchUIEvent(select,"mouseover"),this.dispatchUIEvent(select,"mouseenter"),this.dispatchUIEvent(select,"pointerup"),this.dispatchUIEvent(select,"mouseup"),this.dispatchUIEvent(select,"click")),await wait(this.config)}}else{if("listbox"!==select.getAttribute("role"))throw(0,dom_esm.getConfig)().getElementError("Cannot select options on elements that are neither select nor listbox elements",select);for(const option1 of selectedOptions)await this.click(option1),await this.unhover(option1)}}async function type(element,text,{skipClick:skipClick=this.config.skipClick,skipAutoClose:skipAutoClose=this.config.skipAutoClose,initialSelectionStart:initialSelectionStart,initialSelectionEnd:initialSelectionEnd}={}){element.disabled||(skipClick||await this.click(element),void 0!==initialSelectionStart&&setSelectionRange(element,initialSelectionStart,null!=initialSelectionEnd?initialSelectionEnd:initialSelectionStart),await this.keyboard(text),skipAutoClose||await async function releaseAllKeys(instance){for(const k of instance.system.keyboard.getPressedKeys())await instance.system.keyboard.keyup(instance,k)}(this))}const fakeFiles=Symbol("files and value properties are mocked");function restoreProperty(obj,prop,descriptor){descriptor?Object.defineProperty(obj,prop,descriptor):delete obj[prop]}async function upload(element,fileOrFiles){const input=isElementType(element,"label")?element.control:element;if(!input||!isElementType(input,"input",{type:"file"}))throw new TypeError(`The ${input===element?"given":"associated"} ${null==input?void 0:input.tagName} element does not accept file uploads`);if(isDisabled(element))return;const files=(Array.isArray(fileOrFiles)?fileOrFiles:[fileOrFiles]).filter((file=>!this.config.applyAccept||function isAcceptableFile(file,accept){if(!accept)return!0;const wildcards=["audio/*","image/*","video/*"];return accept.split(",").some((acceptToken=>acceptToken.startsWith(".")?file.name.endsWith(acceptToken):wildcards.includes(acceptToken)?file.type.startsWith(acceptToken.substr(0,acceptToken.length-1)):file.type===acceptToken))}(file,input.accept))).slice(0,input.multiple?void 0:1),fileDialog=()=>{var ref;files.length===(null===(ref=input.files)||void 0===ref?void 0:ref.length)&&files.every(((f,i)=>{var ref;return f===(null===(ref=input.files)||void 0===ref?void 0:ref.item(i))}))||(!function setFiles(el,files){var ref;null===(ref=el[fakeFiles])||void 0===ref||ref.restore();const typeDescr=Object.getOwnPropertyDescriptor(el,"type"),valueDescr=Object.getOwnPropertyDescriptor(el,"value"),filesDescr=Object.getOwnPropertyDescriptor(el,"files");function restore(){restoreProperty(el,"type",typeDescr),restoreProperty(el,"value",valueDescr),restoreProperty(el,"files",filesDescr)}el[fakeFiles]={restore:restore},Object.defineProperties(el,{files:{configurable:!0,get:()=>files},value:{configurable:!0,get:()=>files.length?`C:\\fakepath\\${files[0].name}`:"",set(v){var ref;""===v?restore():null==valueDescr||null===(ref=valueDescr.set)||void 0===ref||ref.call(el,v)}},type:{configurable:!0,get:()=>"file",set(v){"file"!==v&&(restore(),el.type=v)}}})}(input,createFileList(getWindow(element),files)),this.dispatchUIEvent(input,"input"),this.dispatchUIEvent(input,"change"))};input.addEventListener("fileDialog",fileDialog),await this.click(element),input.removeEventListener("fileDialog",fileDialog)}const defaultOptionsDirect={applyAccept:!0,autoModify:!0,delay:0,document:globalThis.document,keyboardMap:defaultKeyMap,pointerMap:[{name:"MouseLeft",pointerType:"mouse",button:"primary"},{name:"MouseRight",pointerType:"mouse",button:"secondary"},{name:"MouseMiddle",pointerType:"mouse",button:"auxiliary"},{name:"TouchA",pointerType:"touch"},{name:"TouchB",pointerType:"touch"},{name:"TouchC",pointerType:"touch"}],pointerEventsCheck:PointerEventsCheckLevel.EachApiCall,skipAutoClose:!1,skipClick:!1,skipHover:!1,writeToClipboard:!1,advanceTimers:()=>Promise.resolve()},defaultOptionsSetup={...defaultOptionsDirect,writeToClipboard:!0};function createConfig(options={},defaults=defaultOptionsSetup,node){const document=function getDocument(options,node,defaults){var _document,ref;return null!==(ref=null!==(_document=options.document)&&void 0!==_document?_document:node&&function getDocumentFromNode(el){return function isDocument(node){return 9===node.nodeType}(el)?el:el.ownerDocument}(node))&&void 0!==ref?ref:defaults.document}(options,node,defaults);return{...defaults,...options,document:document}}function setupDirect({keyboardState:keyboardState,pointerState:pointerState,...options}={},node){const config=createConfig(options,defaultOptionsDirect,node);var ref;prepareDocument(config.document);const system=null!==(ref=null!=pointerState?pointerState:keyboardState)&&void 0!==ref?ref:new System;return{api:createInstance(config,system).api,system:system}}function setupSub(options){return createInstance({...this.config,...options},this.system).api}function wrapAndBindImpl(instance,impl){function method(...args){return setLevelRef(instance,ApiLevel.Call),function wrapAsync(implementation){return(0,dom_esm.getConfig)().asyncWrapper(implementation)}((()=>impl.apply(instance,args).then((async ret=>(await wait(instance.config),ret)))))}return Object.defineProperty(method,"name",{get:()=>impl.name}),method}function createInstance(config,system=new System){const instance={};return Object.assign(instance,{config:config,dispatchEvent:dispatchEvent.bind(instance),dispatchUIEvent:dispatchUIEvent.bind(instance),system:system,levelRefs:{},...api_namespaceObject}),{instance:instance,api:{...Object.fromEntries(Object.entries(api_namespaceObject).map((([name,api])=>[name,wrapAndBindImpl(instance,api)]))),setup:setupSub.bind(instance)}}}function directApi_clear(element){return setupDirect().api.clear(element)}function directApi_click(element,options={}){return setupDirect(options,element).api.click(element)}function directApi_copy(options={}){return setupDirect(options).api.copy()}function directApi_cut(options={}){return setupDirect(options).api.cut()}function directApi_dblClick(element,options={}){return setupDirect(options).api.dblClick(element)}function directApi_deselectOptions(select,values,options={}){return setupDirect(options).api.deselectOptions(select,values)}function directApi_hover(element,options={}){return setupDirect(options).api.hover(element)}async function directApi_keyboard(text,options={}){const{api:api,system:system}=setupDirect(options);return api.keyboard(text).then((()=>system))}async function directApi_pointer(input,options={}){const{api:api,system:system}=setupDirect(options);return api.pointer(input).then((()=>system))}function directApi_paste(clipboardData,options){return setupDirect(options).api.paste(clipboardData)}function directApi_selectOptions(select,values,options={}){return setupDirect(options).api.selectOptions(select,values)}function directApi_tripleClick(element,options={}){return setupDirect(options).api.tripleClick(element)}function directApi_type(element,text,options={}){return setupDirect(options,element).api.type(element,text,options)}function directApi_unhover(element,options={}){const{api:api,system:system}=setupDirect(options);return system.pointer.setMousePosition({target:element}),api.unhover(element)}function directApi_upload(element,fileOrFiles,options={}){return setupDirect(options).api.upload(element,fileOrFiles)}function directApi_tab(options={}){return setupDirect().api.tab(options)}const userEvent={...directApi_namespaceObject,setup:function setupMain(options={}){const config=createConfig(options);var _defaultView;return prepareDocument(config.document),function attachClipboardStubToView(window){if(isClipboardStub(window.navigator.clipboard))return window.navigator.clipboard[ClipboardStubControl];const realClipboard=Object.getOwnPropertyDescriptor(window.navigator,"clipboard");let stub;const control={resetClipboardStub:()=>{stub=createClipboardStub(window,control)},detachClipboardStub:()=>{realClipboard?Object.defineProperty(window.navigator,"clipboard",realClipboard):Object.defineProperty(window.navigator,"clipboard",{value:void 0,configurable:!0})}};return stub=createClipboardStub(window,control),Object.defineProperty(window.navigator,"clipboard",{get:()=>stub,configurable:!0}),stub[ClipboardStubControl]}(null!==(_defaultView=config.document.defaultView)&&void 0!==_defaultView?_defaultView:globalThis.window),createInstance(config).api}};var esm=__webpack_require__("./node_modules/ts-dedent/esm/index.js"),scope=(()=>{let win;return win=typeof window<"u"?window:typeof globalThis<"u"?globalThis:typeof __webpack_require__.g<"u"?__webpack_require__.g:typeof self<"u"?self:{},win})(),{LOGLEVEL:LOGLEVEL}=scope,levels={trace:1,debug:2,info:3,warn:4,error:5,silent:10},currentLogLevelNumber=levels[LOGLEVEL]||levels.info,logger={trace:(message,...rest)=>{currentLogLevelNumber<=levels.trace&&console.trace(message,...rest)},debug:(message,...rest)=>{currentLogLevelNumber<=levels.debug&&console.debug(message,...rest)},info:(message,...rest)=>{currentLogLevelNumber<=levels.info&&console.info(message,...rest)},warn:(message,...rest)=>{currentLogLevelNumber<=levels.warn&&console.warn(message,...rest)},error:(message,...rest)=>{currentLogLevelNumber<=levels.error&&console.error(message,...rest)},log:(message,...rest)=>{currentLogLevelNumber<levels.silent&&console.log(message,...rest)}},logged=new Set,once=type=>(message,...rest)=>{if(!logged.has(message))return logged.add(message),logger[type](message,...rest)};once.clear=()=>logged.clear(),once.trace=once("trace"),once.debug=once("debug"),once.info=once("info"),once.warn=once("warn"),once.error=once("error"),once.log=once("log");once("warn");var pretty=type=>(...args)=>{let argArray=[];if(args.length){let reResultArray,startTagRe=/<span\s+style=(['"])([^'"]*)\1\s*>/gi,endTagRe=/<\/span>/gi;for(argArray.push(args[0].replace(startTagRe,"%c").replace(endTagRe,"%c"));reResultArray=startTagRe.exec(args[0]);)argArray.push(reResultArray[2]),argArray.push("");for(let j=1;j<args.length;j++)argArray.push(args[j])}logger[type].apply(logger,argArray)};pretty.trace=pretty("trace"),pretty.debug=pretty("debug"),pretty.info=pretty("info"),pretty.warn=pretty("warn"),pretty.error=pretty("error");var events2,Channel=class{constructor({transport:transport,async:async=!1}={}){this.sender=Math.random().toString(16).slice(2),this.events={},this.data={},this.transport=void 0,this.isAsync=async,transport&&(this.transport=transport,this.transport.setHandler((event=>this.handleEvent(event))))}get hasTransport(){return!!this.transport}addListener(eventName,listener){this.events[eventName]=this.events[eventName]||[],this.events[eventName].push(listener)}emit(eventName,...args){let event={type:eventName,args:args,from:this.sender},options={};args.length>=1&&args[0]&&args[0].options&&(options=args[0].options);let handler=()=>{this.transport&&this.transport.send(event,options),this.handleEvent(event)};this.isAsync?setImmediate(handler):handler()}last(eventName){return this.data[eventName]}eventNames(){return Object.keys(this.events)}listenerCount(eventName){let listeners=this.listeners(eventName);return listeners?listeners.length:0}listeners(eventName){return this.events[eventName]||void 0}once(eventName,listener){let onceListener=this.onceListener(eventName,listener);this.addListener(eventName,onceListener)}removeAllListeners(eventName){eventName?this.events[eventName]&&delete this.events[eventName]:this.events={}}removeListener(eventName,listener){let listeners=this.listeners(eventName);listeners&&(this.events[eventName]=listeners.filter((l=>l!==listener)))}on(eventName,listener){this.addListener(eventName,listener)}off(eventName,listener){this.removeListener(eventName,listener)}handleEvent(event){let listeners=this.listeners(event.type);listeners&&listeners.length&&listeners.forEach((fn=>{fn.apply(event,event.args)})),this.data[event.type]=event.args}onceListener(eventName,listener){let onceListener=(...args)=>(this.removeListener(eventName,onceListener),listener(...args));return onceListener}},events=((events2=events||{}).CHANNEL_CREATED="channelCreated",events2.CONFIG_ERROR="configError",events2.STORY_INDEX_INVALIDATED="storyIndexInvalidated",events2.STORY_SPECIFIED="storySpecified",events2.SET_CONFIG="setConfig",events2.SET_STORIES="setStories",events2.SET_INDEX="setIndex",events2.SET_CURRENT_STORY="setCurrentStory",events2.CURRENT_STORY_WAS_SET="currentStoryWasSet",events2.FORCE_RE_RENDER="forceReRender",events2.FORCE_REMOUNT="forceRemount",events2.PRELOAD_ENTRIES="preloadStories",events2.STORY_PREPARED="storyPrepared",events2.DOCS_PREPARED="docsPrepared",events2.STORY_CHANGED="storyChanged",events2.STORY_UNCHANGED="storyUnchanged",events2.STORY_RENDERED="storyRendered",events2.STORY_MISSING="storyMissing",events2.STORY_ERRORED="storyErrored",events2.STORY_THREW_EXCEPTION="storyThrewException",events2.STORY_RENDER_PHASE_CHANGED="storyRenderPhaseChanged",events2.PLAY_FUNCTION_THREW_EXCEPTION="playFunctionThrewException",events2.UPDATE_STORY_ARGS="updateStoryArgs",events2.STORY_ARGS_UPDATED="storyArgsUpdated",events2.RESET_STORY_ARGS="resetStoryArgs",events2.SET_GLOBALS="setGlobals",events2.UPDATE_GLOBALS="updateGlobals",events2.GLOBALS_UPDATED="globalsUpdated",events2.REGISTER_SUBSCRIPTION="registerSubscription",events2.PREVIEW_KEYDOWN="previewKeydown",events2.PREVIEW_BUILDER_PROGRESS="preview_builder_progress",events2.SELECT_STORY="selectStory",events2.STORIES_COLLAPSE_ALL="storiesCollapseAll",events2.STORIES_EXPAND_ALL="storiesExpandAll",events2.DOCS_RENDERED="docsRendered",events2.SHARED_STATE_CHANGED="sharedStateChanged",events2.SHARED_STATE_SET="sharedStateSet",events2.NAVIGATE_URL="navigateUrl",events2.UPDATE_QUERY_PARAMS="updateQueryParams",events2),{CHANNEL_CREATED:CHANNEL_CREATED,CONFIG_ERROR:CONFIG_ERROR,CURRENT_STORY_WAS_SET:CURRENT_STORY_WAS_SET,DOCS_PREPARED:DOCS_PREPARED,DOCS_RENDERED:DOCS_RENDERED,FORCE_RE_RENDER:FORCE_RE_RENDER,FORCE_REMOUNT:FORCE_REMOUNT,GLOBALS_UPDATED:GLOBALS_UPDATED,NAVIGATE_URL:NAVIGATE_URL,PLAY_FUNCTION_THREW_EXCEPTION:PLAY_FUNCTION_THREW_EXCEPTION,PRELOAD_ENTRIES:PRELOAD_ENTRIES,PREVIEW_BUILDER_PROGRESS:PREVIEW_BUILDER_PROGRESS,PREVIEW_KEYDOWN:PREVIEW_KEYDOWN,REGISTER_SUBSCRIPTION:REGISTER_SUBSCRIPTION,RESET_STORY_ARGS:RESET_STORY_ARGS,SELECT_STORY:SELECT_STORY,SET_CONFIG:SET_CONFIG,SET_CURRENT_STORY:SET_CURRENT_STORY,SET_GLOBALS:SET_GLOBALS,SET_INDEX:SET_INDEX,SET_STORIES:SET_STORIES,SHARED_STATE_CHANGED:SHARED_STATE_CHANGED,SHARED_STATE_SET:SHARED_STATE_SET,STORIES_COLLAPSE_ALL:STORIES_COLLAPSE_ALL,STORIES_EXPAND_ALL:STORIES_EXPAND_ALL,STORY_ARGS_UPDATED:STORY_ARGS_UPDATED,STORY_CHANGED:STORY_CHANGED,STORY_ERRORED:STORY_ERRORED,STORY_INDEX_INVALIDATED:STORY_INDEX_INVALIDATED,STORY_MISSING:STORY_MISSING,STORY_PREPARED:STORY_PREPARED,STORY_RENDER_PHASE_CHANGED:STORY_RENDER_PHASE_CHANGED,STORY_RENDERED:STORY_RENDERED,STORY_SPECIFIED:STORY_SPECIFIED,STORY_THREW_EXCEPTION:STORY_THREW_EXCEPTION,STORY_UNCHANGED:STORY_UNCHANGED,UPDATE_GLOBALS:UPDATE_GLOBALS,UPDATE_QUERY_PARAMS:UPDATE_QUERY_PARAMS,UPDATE_STORY_ARGS:UPDATE_STORY_ARGS}=events,IGNORED_EXCEPTION=new Error("ignoredException");var AddonStore=class{constructor(){this.getChannel=()=>{if(!this.channel){let channel=function mockChannel(){return new Channel({transport:{setHandler:()=>{},send:()=>{}}})}();return this.setChannel(channel),channel}return this.channel},this.getServerChannel=()=>{if(!this.serverChannel)throw new Error("Accessing non-existent serverChannel");return this.serverChannel},this.ready=()=>this.promise,this.hasChannel=()=>!!this.channel,this.hasServerChannel=()=>!!this.serverChannel,this.setChannel=channel=>{this.channel=channel,this.resolve()},this.setServerChannel=channel=>{this.serverChannel=channel},this.promise=new Promise((res=>{this.resolve=()=>res(this.getChannel())}))}},KEY="__STORYBOOK_ADDONS_PREVIEW";var CallStates2,addons=function getAddonsStore(){return scope[KEY]||(scope[KEY]=new AddonStore),scope[KEY]}(),CallStates=((CallStates2=CallStates||{}).DONE="done",CallStates2.ERROR="error",CallStates2.ACTIVE="active",CallStates2.WAITING="waiting",CallStates2),EVENTS_CALL="storybook/instrumenter/call",EVENTS_SYNC="storybook/instrumenter/sync",EVENTS_START="storybook/instrumenter/start",EVENTS_BACK="storybook/instrumenter/back",EVENTS_GOTO="storybook/instrumenter/goto",EVENTS_NEXT="storybook/instrumenter/next",EVENTS_END="storybook/instrumenter/end",controlsDisabled={start:!1,back:!1,goto:!1,next:!1,end:!1},alreadyCompletedException=new Error("This function ran after the play function completed. Did you forget to `await` it?"),isObject=o=>"[object Object]"===Object.prototype.toString.call(o),isInstrumentable=o=>{if(!isObject(o)&&!(o=>"[object Module]"===Object.prototype.toString.call(o))(o))return!1;if(void 0===o.constructor)return!0;let proto=o.constructor.prototype;return!(!isObject(proto)||!1===Object.prototype.hasOwnProperty.call(proto,"isPrototypeOf"))},getInitialState=()=>({renderPhase:void 0,isDebugging:!1,isPlaying:!1,isLocked:!1,cursor:0,calls:[],shadowCalls:[],callRefsByResult:new Map,chainedCallIds:new Set,ancestors:[],playUntil:void 0,resolvers:{},syncTimeout:void 0}),getRetainedState=(state,isDebugging=!1)=>{let calls=(isDebugging?state.shadowCalls:state.calls).filter((call=>call.retain));if(!calls.length)return;let callRefsByResult=new Map(Array.from(state.callRefsByResult.entries()).filter((([,ref])=>ref.retain)));return{cursor:calls.length,calls:calls,callRefsByResult:callRefsByResult}},Instrumenter=class{constructor(){this.initialized=!1,this.channel=addons.getChannel(),this.state=scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__||{};let resetState=({storyId:storyId,isPlaying:isPlaying=!0,isDebugging:isDebugging=!1})=>{let state=this.getState(storyId);this.setState(storyId,{...getInitialState(),...getRetainedState(state,isDebugging),shadowCalls:isDebugging?state.shadowCalls:[],chainedCallIds:isDebugging?state.chainedCallIds:new Set,playUntil:isDebugging?state.playUntil:void 0,isPlaying:isPlaying,isDebugging:isDebugging}),this.sync(storyId)};this.channel.on(FORCE_REMOUNT,resetState),this.channel.on(STORY_RENDER_PHASE_CHANGED,(({storyId:storyId,newPhase:newPhase})=>{let{isDebugging:isDebugging}=this.getState(storyId);this.setState(storyId,{renderPhase:newPhase}),"preparing"===newPhase&&isDebugging&&resetState({storyId:storyId}),"playing"===newPhase&&resetState({storyId:storyId,isDebugging:isDebugging}),"played"===newPhase&&this.setState(storyId,{isLocked:!1,isPlaying:!1,isDebugging:!1}),"errored"===newPhase&&this.setState(storyId,{isLocked:!1,isPlaying:!1})})),this.channel.on(SET_CURRENT_STORY,(()=>{this.initialized?this.cleanup():this.initialized=!0}));let start=({storyId:storyId,playUntil:playUntil})=>{this.getState(storyId).isDebugging||this.setState(storyId,(({calls:calls})=>({calls:[],shadowCalls:calls.map((call=>({...call,status:"waiting"}))),isDebugging:!0})));let log=this.getLog(storyId);this.setState(storyId,(({shadowCalls:shadowCalls})=>{if(playUntil||!log.length)return{playUntil:playUntil};let firstRowIndex=shadowCalls.findIndex((call=>call.id===log[0].callId));return{playUntil:shadowCalls.slice(0,firstRowIndex).filter((call=>call.interceptable&&!call.ancestors.length)).slice(-1)[0]?.id}})),this.channel.emit(FORCE_REMOUNT,{storyId:storyId,isDebugging:!0})},end=({storyId:storyId})=>{this.setState(storyId,{playUntil:void 0,isDebugging:!1}),Object.values(this.getState(storyId).resolvers).forEach((resolve=>resolve()))};this.channel.on(EVENTS_START,start),this.channel.on(EVENTS_BACK,(({storyId:storyId})=>{let log=this.getLog(storyId).filter((call=>!call.ancestors.length)),last=log.reduceRight(((res,item,index)=>res>=0||"waiting"===item.status?res:index),-1);start({storyId:storyId,playUntil:log[last-1]?.callId})})),this.channel.on(EVENTS_GOTO,(({storyId:storyId,callId:callId})=>{let{calls:calls,shadowCalls:shadowCalls,resolvers:resolvers}=this.getState(storyId),call=calls.find((({id:id})=>id===callId)),shadowCall=shadowCalls.find((({id:id})=>id===callId));if(!call&&shadowCall&&Object.values(resolvers).length>0){let nextId=this.getLog(storyId).find((c=>"waiting"===c.status))?.callId;shadowCall.id!==nextId&&this.setState(storyId,{playUntil:shadowCall.id}),Object.values(resolvers).forEach((resolve=>resolve()))}else start({storyId:storyId,playUntil:callId})})),this.channel.on(EVENTS_NEXT,(({storyId:storyId})=>{let{resolvers:resolvers}=this.getState(storyId);if(Object.values(resolvers).length>0)Object.values(resolvers).forEach((resolve=>resolve()));else{let nextId=this.getLog(storyId).find((c=>"waiting"===c.status))?.callId;nextId?start({storyId:storyId,playUntil:nextId}):end({storyId:storyId})}})),this.channel.on(EVENTS_END,end)}getState(storyId){return this.state[storyId]||getInitialState()}setState(storyId,update){let state=this.getState(storyId),patch="function"==typeof update?update(state):update;this.state={...this.state,[storyId]:{...state,...patch}},scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__=this.state}cleanup(){this.state=Object.entries(this.state).reduce(((acc,[storyId,state])=>{let retainedState=getRetainedState(state);return retainedState&&(acc[storyId]=Object.assign(getInitialState(),retainedState)),acc}),{});let payload={controlStates:controlsDisabled,logItems:[]};this.channel.emit(EVENTS_SYNC,payload),scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__=this.state}getLog(storyId){let{calls:calls,shadowCalls:shadowCalls}=this.getState(storyId),merged=[...shadowCalls];calls.forEach(((call,index)=>{merged[index]=call}));let seen=new Set;return merged.reduceRight(((acc,call)=>(call.args.forEach((arg=>{arg?.__callId__&&seen.add(arg.__callId__)})),call.path.forEach((node=>{node.__callId__&&seen.add(node.__callId__)})),(call.interceptable||call.exception)&&!seen.has(call.id)&&(acc.unshift({callId:call.id,status:call.status,ancestors:call.ancestors}),seen.add(call.id)),acc)),[])}instrument(obj,options){if(!isInstrumentable(obj))return obj;let{mutate:mutate=!1,path:path=[]}=options;return Object.keys(obj).reduce(((acc,key)=>{let value=obj[key];return"function"!=typeof value?(acc[key]=this.instrument(value,{...options,path:path.concat(key)}),acc):"function"==typeof value.__originalFn__?(acc[key]=value,acc):(acc[key]=(...args)=>this.track(key,value,args,options),acc[key].__originalFn__=value,Object.defineProperty(acc[key],"name",{value:key,writable:!1}),Object.keys(value).length>0&&Object.assign(acc[key],this.instrument({...value},{...options,path:path.concat(key)})),acc)}),mutate?obj:(obj=>{try{return new obj.constructor}catch{return{}}})(obj))}track(method,fn,args,options){let storyId=args?.[0]?.__storyId__||scope.__STORYBOOK_PREVIEW__?.selectionStore?.selection?.storyId,{cursor:cursor,ancestors:ancestors}=this.getState(storyId);this.setState(storyId,{cursor:cursor+1});let id=`${ancestors.slice(-1)[0]||storyId} [${cursor}] ${method}`,{path:path=[],intercept:intercept=!1,retain:retain=!1}=options,interceptable="function"==typeof intercept?intercept(method,path):intercept,call={id:id,cursor:cursor,storyId:storyId,ancestors:ancestors,path:path,method:method,args:args,interceptable:interceptable,retain:retain},result=(interceptable&&!ancestors.length?this.intercept:this.invoke).call(this,fn,call,options);return this.instrument(result,{...options,mutate:!0,path:[{__callId__:call.id}]})}intercept(fn,call,options){let{chainedCallIds:chainedCallIds,isDebugging:isDebugging,playUntil:playUntil}=this.getState(call.storyId),isChainedUpon=chainedCallIds.has(call.id);return!isDebugging||isChainedUpon||playUntil?(playUntil===call.id&&this.setState(call.storyId,{playUntil:void 0}),this.invoke(fn,call,options)):new Promise((resolve=>{this.setState(call.storyId,(({resolvers:resolvers})=>({isLocked:!1,resolvers:{...resolvers,[call.id]:resolve}})))})).then((()=>(this.setState(call.storyId,(state=>{let{[call.id]:_,...resolvers}=state.resolvers;return{isLocked:!0,resolvers:resolvers}})),this.invoke(fn,call,options))))}invoke(fn,call,options){let{callRefsByResult:callRefsByResult,renderPhase:renderPhase}=this.getState(call.storyId),serializeValues=value=>{if(callRefsByResult.has(value))return callRefsByResult.get(value);if(value instanceof Array)return value.map(serializeValues);if(value instanceof Date)return{__date__:{value:value.toISOString()}};if(value instanceof Error){let{name:name,message:message,stack:stack}=value;return{__error__:{name:name,message:message,stack:stack}}}if(value instanceof RegExp){let{flags:flags,source:source}=value;return{__regexp__:{flags:flags,source:source}}}if(value instanceof scope.window.HTMLElement){let{prefix:prefix,localName:localName,id:id,classList:classList,innerText:innerText}=value;return{__element__:{prefix:prefix,localName:localName,id:id,classNames:Array.from(classList),innerText:innerText}}}return"function"==typeof value?{__function__:{name:value.name}}:"symbol"==typeof value?{__symbol__:{description:value.description}}:"object"==typeof value&&value?.constructor?.name&&"Object"!==value?.constructor?.name?{__class__:{name:value.constructor.name}}:"[object Object]"===Object.prototype.toString.call(value)?Object.fromEntries(Object.entries(value).map((([key,val])=>[key,serializeValues(val)]))):value},info={...call,args:call.args.map(serializeValues)};call.path.forEach((ref=>{ref?.__callId__&&this.setState(call.storyId,(({chainedCallIds:chainedCallIds})=>({chainedCallIds:new Set(Array.from(chainedCallIds).concat(ref.__callId__))})))}));let handleException=e=>{if(e instanceof Error){let{name:name,message:message,stack:stack,callId:callId=call.id}=e,exception={name:name,message:message,stack:stack,callId:callId};if(this.update({...info,status:"error",exception:exception}),this.setState(call.storyId,(state=>({callRefsByResult:new Map([...Array.from(state.callRefsByResult.entries()),[e,{__callId__:call.id,retain:call.retain}]])}))),call.ancestors.length)throw Object.prototype.hasOwnProperty.call(e,"callId")||Object.defineProperty(e,"callId",{value:call.id}),e;if(e!==alreadyCompletedException)throw logger.warn(e),IGNORED_EXCEPTION}throw e};try{if("played"===renderPhase&&!call.retain)throw alreadyCompletedException;let result=fn(...(options.getArgs?options.getArgs(call,this.getState(call.storyId)):call.args).map((arg=>"function"!=typeof arg||Object.keys(arg).length?arg:(...args)=>{let{cursor:cursor,ancestors:ancestors}=this.getState(call.storyId);this.setState(call.storyId,{cursor:0,ancestors:[...ancestors,call.id]});let restore=()=>this.setState(call.storyId,{cursor:cursor,ancestors:ancestors}),willRestore=!1;try{let res=arg(...args);return res instanceof Promise?(willRestore=!0,res.finally(restore)):res}finally{willRestore||restore()}})));return result&&["object","function","symbol"].includes(typeof result)&&this.setState(call.storyId,(state=>({callRefsByResult:new Map([...Array.from(state.callRefsByResult.entries()),[result,{__callId__:call.id,retain:call.retain}]])}))),this.update({...info,status:result instanceof Promise?"active":"done"}),result instanceof Promise?result.then((value=>(this.update({...info,status:"done"}),value)),handleException):result}catch(e){return handleException(e)}}update(call){this.channel.emit(EVENTS_CALL,call),this.setState(call.storyId,(({calls:calls})=>{let callsById=calls.concat(call).reduce(((a,c)=>Object.assign(a,{[c.id]:c})),{});return{calls:Object.values(callsById).sort(((a,b)=>a.id.localeCompare(b.id,void 0,{numeric:!0})))}})),this.sync(call.storyId)}sync(storyId){let synchronize=()=>{let{isLocked:isLocked,isPlaying:isPlaying}=this.getState(storyId),logItems=this.getLog(storyId),pausedAt=logItems.filter((({ancestors:ancestors})=>!ancestors.length)).find((item=>"waiting"===item.status))?.callId,hasActive=logItems.some((item=>"active"===item.status));if(isLocked||hasActive||0===logItems.length){let payload2={controlStates:controlsDisabled,logItems:logItems};return void this.channel.emit(EVENTS_SYNC,payload2)}let hasPrevious=logItems.some((item=>["done","error"].includes(item.status))),payload={controlStates:{start:hasPrevious,back:hasPrevious,goto:!0,next:isPlaying,end:isPlaying},logItems:logItems,pausedAt:pausedAt};this.channel.emit(EVENTS_SYNC,payload)};this.setState(storyId,(({syncTimeout:syncTimeout})=>(clearTimeout(syncTimeout),{syncTimeout:setTimeout(synchronize,0)})))}};function instrument(obj,options={}){try{let forceInstrument=!1,skipInstrument=!1;return scope.window.location?.search?.includes("instrument=true")?forceInstrument=!0:scope.window.location?.search?.includes("instrument=false")&&(skipInstrument=!0),scope.window.parent===scope.window&&!forceInstrument||skipInstrument?obj:(scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__||(scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__=new Instrumenter),scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__.instrument(obj,options))}catch(e){return once.warn(e),obj}}var _userEvent=userEvent.default||userEvent,testingLibrary=instrument({...dom_esm},{intercept:(method,path)=>"fireEvent"===path[0]||method.startsWith("findBy")||method.startsWith("waitFor")});testingLibrary.screen=Object.entries(testingLibrary.screen).reduce(((acc,[key,val])=>Object.defineProperty(acc,key,{get(){return once.warn(esm.C`
          You are using Testing Library's \`screen\` object. Use \`within(canvasElement)\` instead.
          More info: https://storybook.js.org/docs/react/essentials/interactions
        `),val}})),{...testingLibrary.screen});var{buildQueries:buildQueries,configure:configure,createEvent:dist_createEvent,findAllByAltText:findAllByAltText,findAllByDisplayValue:findAllByDisplayValue,findAllByLabelText:findAllByLabelText,findAllByPlaceholderText:findAllByPlaceholderText,findAllByRole:findAllByRole,findAllByTestId:findAllByTestId,findAllByText:findAllByText,findAllByTitle:findAllByTitle,findByAltText:findByAltText,findByDisplayValue:findByDisplayValue,findByLabelText:findByLabelText,findByPlaceholderText:findByPlaceholderText,findByRole:findByRole,findByTestId:findByTestId,findByText:findByText,findByTitle:findByTitle,fireEvent:fireEvent,getAllByAltText:getAllByAltText,getAllByDisplayValue:getAllByDisplayValue,getAllByLabelText:getAllByLabelText,getAllByPlaceholderText:getAllByPlaceholderText,getAllByRole:getAllByRole,getAllByTestId:getAllByTestId,getAllByText:getAllByText,getAllByTitle:getAllByTitle,getByAltText:getByAltText,getByDisplayValue:getByDisplayValue,getByLabelText:getByLabelText,getByPlaceholderText:getByPlaceholderText,getByRole:getByRole,getByTestId:getByTestId,getByText:getByText,getByTitle:getByTitle,getConfig:getConfig,getDefaultNormalizer:getDefaultNormalizer,getElementError:getElementError,getNodeText:getNodeText,getQueriesForElement:getQueriesForElement,getRoles:getRoles,getSuggestedQuery:getSuggestedQuery,isInaccessible:isInaccessible,logDOM:logDOM,logRoles:logRoles,prettyDOM:prettyDOM,queries:queries,queryAllByAltText:queryAllByAltText,queryAllByAttribute:queryAllByAttribute,queryAllByDisplayValue:queryAllByDisplayValue,queryAllByLabelText:queryAllByLabelText,queryAllByPlaceholderText:queryAllByPlaceholderText,queryAllByRole:queryAllByRole,queryAllByTestId:queryAllByTestId,queryAllByText:queryAllByText,queryAllByTitle:queryAllByTitle,queryByAltText:queryByAltText,queryByAttribute:queryByAttribute,queryByDisplayValue:queryByDisplayValue,queryByLabelText:queryByLabelText,queryByPlaceholderText:queryByPlaceholderText,queryByRole:queryByRole,queryByTestId:queryByTestId,queryByText:queryByText,queryByTitle:queryByTitle,queryHelpers:queryHelpers,screen:screen,waitFor:waitFor,waitForElementToBeRemoved:waitForElementToBeRemoved,within:within,prettyFormat:prettyFormat}=testingLibrary,dist_userEvent=instrument({userEvent:_userEvent},{intercept:!0}).userEvent},"./node_modules/@testing-library/dom/dist/@testing-library/dom.esm.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{buildQueries:function(){return buildQueries},configure:function(){return configure},createEvent:function(){return createEvent},findAllByAltText:function(){return findAllByAltText},findAllByDisplayValue:function(){return findAllByDisplayValue},findAllByLabelText:function(){return findAllByLabelText},findAllByPlaceholderText:function(){return findAllByPlaceholderText},findAllByRole:function(){return findAllByRole},findAllByTestId:function(){return findAllByTestId},findAllByText:function(){return findAllByText},findAllByTitle:function(){return findAllByTitle},findByAltText:function(){return findByAltText},findByDisplayValue:function(){return findByDisplayValue},findByLabelText:function(){return findByLabelText},findByPlaceholderText:function(){return findByPlaceholderText},findByRole:function(){return findByRole},findByTestId:function(){return findByTestId},findByText:function(){return findByText},findByTitle:function(){return findByTitle},fireEvent:function(){return fireEvent},getAllByAltText:function(){return getAllByAltText},getAllByDisplayValue:function(){return getAllByDisplayValue},getAllByLabelText:function(){return getAllByLabelTextWithSuggestions},getAllByPlaceholderText:function(){return getAllByPlaceholderText},getAllByRole:function(){return getAllByRole},getAllByTestId:function(){return getAllByTestId},getAllByText:function(){return getAllByText},getAllByTitle:function(){return getAllByTitle},getByAltText:function(){return getByAltText},getByDisplayValue:function(){return getByDisplayValue},getByLabelText:function(){return getByLabelTextWithSuggestions},getByPlaceholderText:function(){return getByPlaceholderText},getByRole:function(){return getByRole},getByTestId:function(){return getByTestId},getByText:function(){return getByText},getByTitle:function(){return getByTitle},getConfig:function(){return getConfig},getDefaultNormalizer:function(){return getDefaultNormalizer},getElementError:function(){return getElementError},getMultipleElementsFoundError:function(){return getMultipleElementsFoundError},getNodeText:function(){return getNodeText},getQueriesForElement:function(){return getQueriesForElement},getRoles:function(){return getRoles},getSuggestedQuery:function(){return getSuggestedQuery},isInaccessible:function(){return isInaccessible},logDOM:function(){return logDOM},logRoles:function(){return logRoles},makeFindQuery:function(){return makeFindQuery},makeGetAllQuery:function(){return makeGetAllQuery},makeSingleQuery:function(){return makeSingleQuery},prettyDOM:function(){return prettyDOM},prettyFormat:function(){return pretty_format__WEBPACK_IMPORTED_MODULE_0__},queries:function(){return queries},queryAllByAltText:function(){return queryAllByAltTextWithSuggestions},queryAllByAttribute:function(){return queryAllByAttribute},queryAllByDisplayValue:function(){return queryAllByDisplayValueWithSuggestions},queryAllByLabelText:function(){return queryAllByLabelTextWithSuggestions},queryAllByPlaceholderText:function(){return queryAllByPlaceholderTextWithSuggestions},queryAllByRole:function(){return queryAllByRoleWithSuggestions},queryAllByTestId:function(){return queryAllByTestIdWithSuggestions},queryAllByText:function(){return queryAllByTextWithSuggestions},queryAllByTitle:function(){return queryAllByTitleWithSuggestions},queryByAltText:function(){return queryByAltText},queryByAttribute:function(){return queryByAttribute},queryByDisplayValue:function(){return queryByDisplayValue},queryByLabelText:function(){return queryByLabelText},queryByPlaceholderText:function(){return queryByPlaceholderText},queryByRole:function(){return queryByRole},queryByTestId:function(){return queryByTestId},queryByText:function(){return queryByText},queryByTitle:function(){return queryByTitle},queryHelpers:function(){return queryHelpers},screen:function(){return screen},waitFor:function(){return waitForWrapper},waitForElementToBeRemoved:function(){return waitForElementToBeRemoved},within:function(){return getQueriesForElement},wrapAllByQueryWithSuggestion:function(){return wrapAllByQueryWithSuggestion},wrapSingleQueryWithSuggestion:function(){return wrapSingleQueryWithSuggestion}});var pretty_format__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/pretty-format/build/index.js"),dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/dom-accessibility-api/dist/index.mjs"),aria_query__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/index.js"),lz_string__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/lz-string/libs/lz-string.js"),lz_string__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(lz_string__WEBPACK_IMPORTED_MODULE_3__);module=__webpack_require__.hmd(module);var process=__webpack_require__("./node_modules/process/browser.js");function escapeHTML(str){return str.replace(/</g,"&lt;").replace(/>/g,"&gt;")}const printProps=(keys,props,config,indentation,depth,refs,printer)=>{const indentationNext=indentation+config.indent,colors=config.colors;return keys.map((key=>{const value=props[key];let printed=printer(value,config,indentationNext,depth,refs);return"string"!=typeof value&&(-1!==printed.indexOf("\n")&&(printed=config.spacingOuter+indentationNext+printed+config.spacingOuter+indentation),printed="{"+printed+"}"),config.spacingInner+indentation+colors.prop.open+key+colors.prop.close+"="+colors.value.open+printed+colors.value.close})).join("")},printChildren=(children,config,indentation,depth,refs,printer)=>children.map((child=>{const printedChild="string"==typeof child?printText(child,config):printer(child,config,indentation,depth,refs);return""===printedChild&&"object"==typeof child&&null!==child&&3!==child.nodeType?"":config.spacingOuter+indentation+printedChild})).join(""),printText=(text,config)=>{const contentColor=config.colors.content;return contentColor.open+escapeHTML(text)+contentColor.close},printComment=(comment,config)=>{const commentColor=config.colors.comment;return commentColor.open+"\x3c!--"+escapeHTML(comment)+"--\x3e"+commentColor.close},printElement=(type,printedProps,printedChildren,config,indentation)=>{const tagColor=config.colors.tag;return tagColor.open+"<"+type+(printedProps&&tagColor.close+printedProps+config.spacingOuter+indentation+tagColor.open)+(printedChildren?">"+tagColor.close+printedChildren+config.spacingOuter+indentation+tagColor.open+"</"+type:(printedProps&&!config.min?"":" ")+"/")+">"+tagColor.close},printElementAsLeaf=(type,config)=>{const tagColor=config.colors.tag;return tagColor.open+"<"+type+tagColor.close+" …"+tagColor.open+" />"+tagColor.close},TEXT_NODE$1=3,COMMENT_NODE$1=8,FRAGMENT_NODE=11,ELEMENT_REGEXP=/^((HTML|SVG)\w*)?Element$/,testNode=val=>{const constructorName=val.constructor.name,{nodeType:nodeType,tagName:tagName}=val,isCustomElement="string"==typeof tagName&&tagName.includes("-")||"function"==typeof val.hasAttribute&&val.hasAttribute("is");return 1===nodeType&&(ELEMENT_REGEXP.test(constructorName)||isCustomElement)||nodeType===TEXT_NODE$1&&"Text"===constructorName||nodeType===COMMENT_NODE$1&&"Comment"===constructorName||nodeType===FRAGMENT_NODE&&"DocumentFragment"===constructorName};function nodeIsFragment(node){return node.nodeType===FRAGMENT_NODE}function createDOMElementFilter(filterNode){return{test:val=>{var _val$constructor2;return(null==val||null==(_val$constructor2=val.constructor)?void 0:_val$constructor2.name)&&testNode(val)},serialize:(node,config,indentation,depth,refs,printer)=>{if(function nodeIsText(node){return node.nodeType===TEXT_NODE$1}(node))return printText(node.data,config);if(function nodeIsComment(node){return node.nodeType===COMMENT_NODE$1}(node))return printComment(node.data,config);const type=nodeIsFragment(node)?"DocumentFragment":node.tagName.toLowerCase();return++depth>config.maxDepth?printElementAsLeaf(type,config):printElement(type,printProps(nodeIsFragment(node)?[]:Array.from(node.attributes).map((attr=>attr.name)).sort(),nodeIsFragment(node)?{}:Array.from(node.attributes).reduce(((props,attribute)=>(props[attribute.name]=attribute.value,props)),{}),config,indentation+config.indent,depth,refs,printer),printChildren(Array.prototype.slice.call(node.childNodes||node.children).filter(filterNode),config,indentation+config.indent,depth,refs,printer),config,indentation)}}}let chalk=null,readFileSync=null,codeFrameColumns=null;try{const nodeRequire=module&&module.require;readFileSync=nodeRequire.call(module,"fs").readFileSync,codeFrameColumns=nodeRequire.call(module,"@babel/code-frame").codeFrameColumns,chalk=nodeRequire.call(module,"chalk")}catch{}function getUserCodeFrame(){if(!readFileSync||!codeFrameColumns)return"";return function getCodeFrame(frame){const locationStart=frame.indexOf("(")+1,locationEnd=frame.indexOf(")"),frameLocation=frame.slice(locationStart,locationEnd),frameLocationElements=frameLocation.split(":"),[filename,line,column]=[frameLocationElements[0],parseInt(frameLocationElements[1],10),parseInt(frameLocationElements[2],10)];let rawFileContents="";try{rawFileContents=readFileSync(filename,"utf-8")}catch{return""}const codeFrame=codeFrameColumns(rawFileContents,{start:{line:line,column:column}},{highlightCode:!0,linesBelow:0});return chalk.dim(frameLocation)+"\n"+codeFrame+"\n"}((new Error).stack.split("\n").slice(1).find((frame=>!frame.includes("node_modules/"))))}const TEXT_NODE=3;function jestFakeTimersAreEnabled(){return"undefined"!=typeof jest&&null!==jest&&(!0===setTimeout._isMockFunction||Object.prototype.hasOwnProperty.call(setTimeout,"clock"))}function getDocument(){if("undefined"==typeof window)throw new Error("Could not find default container");return window.document}function getWindowFromNode(node){if(node.defaultView)return node.defaultView;if(node.ownerDocument&&node.ownerDocument.defaultView)return node.ownerDocument.defaultView;if(node.window)return node.window;throw node.ownerDocument&&null===node.ownerDocument.defaultView?new Error("It looks like the window object is not available for the provided node."):node.then instanceof Function?new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?"):Array.isArray(node)?new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?"):"function"==typeof node.debug&&"function"==typeof node.logTestingPlaygroundURL?new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?"):new Error("The given node is not an Element, the node type is: "+typeof node+".")}function checkContainerType(container){if(!container||"function"!=typeof container.querySelector||"function"!=typeof container.querySelectorAll)throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got "+function getTypeName(object){if("object"==typeof object)return null===object?"null":object.constructor.name;return typeof object}(container)+".")}const shouldHighlight=()=>{let colors;try{var _process,_process$env;colors=JSON.parse(null==(_process=process)||null==(_process$env=_process.env)?void 0:_process$env.COLORS)}catch(e){}return"boolean"==typeof colors?colors:void 0!==process&&void 0!==process.versions&&void 0!==process.versions.node},{DOMCollection:DOMCollection}=pretty_format__WEBPACK_IMPORTED_MODULE_0__.plugins,ELEMENT_NODE=1,COMMENT_NODE=8;function filterCommentsAndDefaultIgnoreTagsTags(value){return value.nodeType!==COMMENT_NODE&&(value.nodeType!==ELEMENT_NODE||!value.matches(getConfig().defaultIgnore))}function prettyDOM(dom,maxLength,options){if(void 0===options&&(options={}),dom||(dom=getDocument().body),"number"!=typeof maxLength&&(maxLength=void 0!==process&&process.env.DEBUG_PRINT_LIMIT||7e3),0===maxLength)return"";dom.documentElement&&(dom=dom.documentElement);let domTypeName=typeof dom;if("object"===domTypeName?domTypeName=dom.constructor.name:dom={},!("outerHTML"in dom))throw new TypeError("Expected an element or document but got "+domTypeName);const{filterNode:filterNode=filterCommentsAndDefaultIgnoreTagsTags,...prettyFormatOptions}=options,debugContent=pretty_format__WEBPACK_IMPORTED_MODULE_0__.format(dom,{plugins:[createDOMElementFilter(filterNode),DOMCollection],printFunctionName:!1,highlight:shouldHighlight(),...prettyFormatOptions});return void 0!==maxLength&&dom.outerHTML.length>maxLength?debugContent.slice(0,maxLength)+"...":debugContent}const logDOM=function(){const userCodeFrame=getUserCodeFrame();userCodeFrame?console.log(prettyDOM(...arguments)+"\n\n"+userCodeFrame):console.log(prettyDOM(...arguments))};let config={testIdAttribute:"data-testid",asyncUtilTimeout:1e3,asyncWrapper:cb=>cb(),unstable_advanceTimersWrapper:cb=>cb(),eventWrapper:cb=>cb(),defaultHidden:!1,defaultIgnore:"script, style",showOriginalStackTrace:!1,throwSuggestions:!1,getElementError(message,container){const prettifiedDOM=prettyDOM(container),error=new Error([message,"Ignored nodes: comments, "+config.defaultIgnore+"\n"+prettifiedDOM].filter(Boolean).join("\n\n"));return error.name="TestingLibraryElementError",error},_disableExpensiveErrorDiagnostics:!1,computedStyleSupportsPseudoElements:!1};function configure(newConfig){"function"==typeof newConfig&&(newConfig=newConfig(config)),config={...config,...newConfig}}function getConfig(){return config}const labelledNodeNames=["button","meter","output","progress","select","textarea","input"];function getTextContent(node){return labelledNodeNames.includes(node.nodeName.toLowerCase())?"":node.nodeType===TEXT_NODE?node.textContent:Array.from(node.childNodes).map((childNode=>getTextContent(childNode))).join("")}function getLabelContent(element){let textContent;return textContent="label"===element.tagName.toLowerCase()?getTextContent(element):element.value||element.textContent,textContent}function getRealLabels(element){var _labels;if(void 0!==element.labels)return null!=(_labels=element.labels)?_labels:[];if(!function isLabelable(element){return/BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName)||"INPUT"===element.tagName&&"hidden"!==element.getAttribute("type")}(element))return[];const labels=element.ownerDocument.querySelectorAll("label");return Array.from(labels).filter((label=>label.control===element))}function getLabels(container,element,_temp){let{selector:selector="*"}=void 0===_temp?{}:_temp;const ariaLabelledBy=element.getAttribute("aria-labelledby"),labelsId=ariaLabelledBy?ariaLabelledBy.split(" "):[];return labelsId.length?labelsId.map((labelId=>{const labellingElement=container.querySelector('[id="'+labelId+'"]');return labellingElement?{content:getLabelContent(labellingElement),formControl:null}:{content:"",formControl:null}})):Array.from(getRealLabels(element)).map((label=>({content:getLabelContent(label),formControl:Array.from(label.querySelectorAll("button, input, meter, output, progress, select, textarea")).filter((formControlElement=>formControlElement.matches(selector)))[0]})))}function assertNotNullOrUndefined(matcher){if(null==matcher)throw new Error("It looks like "+matcher+" was passed instead of a matcher. Did you do something like getByText("+matcher+")?")}function fuzzyMatches(textToMatch,node,matcher,normalizer){if("string"!=typeof textToMatch)return!1;assertNotNullOrUndefined(matcher);const normalizedText=normalizer(textToMatch);return"string"==typeof matcher||"number"==typeof matcher?normalizedText.toLowerCase().includes(matcher.toString().toLowerCase()):"function"==typeof matcher?matcher(normalizedText,node):matchRegExp(matcher,normalizedText)}function matches(textToMatch,node,matcher,normalizer){if("string"!=typeof textToMatch)return!1;assertNotNullOrUndefined(matcher);const normalizedText=normalizer(textToMatch);return matcher instanceof Function?matcher(normalizedText,node):matcher instanceof RegExp?matchRegExp(matcher,normalizedText):normalizedText===String(matcher)}function getDefaultNormalizer(_temp){let{trim:trim=!0,collapseWhitespace:collapseWhitespace=!0}=void 0===_temp?{}:_temp;return text=>{let normalizedText=text;return normalizedText=trim?normalizedText.trim():normalizedText,normalizedText=collapseWhitespace?normalizedText.replace(/\s+/g," "):normalizedText,normalizedText}}function makeNormalizer(_ref){let{trim:trim,collapseWhitespace:collapseWhitespace,normalizer:normalizer}=_ref;if(!normalizer)return getDefaultNormalizer({trim:trim,collapseWhitespace:collapseWhitespace});if(void 0!==trim||void 0!==collapseWhitespace)throw new Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');return normalizer}function matchRegExp(matcher,text){const match=matcher.test(text);return matcher.global&&0!==matcher.lastIndex&&(console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp."),matcher.lastIndex=0),match}function getNodeText(node){return node.matches("input[type=submit], input[type=button], input[type=reset]")?node.value:Array.from(node.childNodes).filter((child=>child.nodeType===TEXT_NODE&&Boolean(child.textContent))).map((c=>c.textContent)).join("")}const elementRoleList=function buildElementRoleList(elementRolesMap){function getSelectorSpecificity(_ref3){let{attributes:attributes=[]}=_ref3;return attributes.length}function match(element){let{attributes:attributes=[]}=element;const typeTextIndex=attributes.findIndex((attribute=>attribute.value&&"type"===attribute.name&&"text"===attribute.value));typeTextIndex>=0&&(attributes=[...attributes.slice(0,typeTextIndex),...attributes.slice(typeTextIndex+1)]);const selector=function makeElementSelector(_ref){let{name:name,attributes:attributes}=_ref;return""+name+attributes.map((_ref2=>{let{name:attributeName,value:value,constraints:constraints=[]}=_ref2;return-1!==constraints.indexOf("undefined")?":not(["+attributeName+"])":value?"["+attributeName+'="'+value+'"]':"["+attributeName+"]"})).join("")}({...element,attributes:attributes});return node=>!(typeTextIndex>=0&&"text"!==node.type)&&node.matches(selector)}let result=[];for(const[element,roles]of elementRolesMap.entries())result=[...result,{match:match(element),roles:Array.from(roles),specificity:getSelectorSpecificity(element)}];return result.sort((function bySelectorSpecificity(_ref4,_ref5){let{specificity:leftSpecificity}=_ref4,{specificity:rightSpecificity}=_ref5;return rightSpecificity-leftSpecificity}))}(aria_query__WEBPACK_IMPORTED_MODULE_2__.Qv);function isSubtreeInaccessible(element){if(!0===element.hidden)return!0;if("true"===element.getAttribute("aria-hidden"))return!0;return"none"===element.ownerDocument.defaultView.getComputedStyle(element).display}function isInaccessible(element,options){void 0===options&&(options={});const{isSubtreeInaccessible:isSubtreeInaccessibleImpl=isSubtreeInaccessible}=options;if("hidden"===element.ownerDocument.defaultView.getComputedStyle(element).visibility)return!0;let currentElement=element;for(;currentElement;){if(isSubtreeInaccessibleImpl(currentElement))return!0;currentElement=currentElement.parentElement}return!1}function getImplicitAriaRoles(currentNode){for(const{match:match,roles:roles}of elementRoleList)if(match(currentNode))return[...roles];return[]}function getRoles(container,_temp){let{hidden:hidden=!1}=void 0===_temp?{}:_temp;return function flattenDOM(node){return[node,...Array.from(node.children).reduce(((acc,child)=>[...acc,...flattenDOM(child)]),[])]}(container).filter((element=>!1!==hidden||!1===isInaccessible(element))).reduce(((acc,node)=>{let roles=[];return roles=node.hasAttribute("role")?node.getAttribute("role").split(" ").slice(0,1):getImplicitAriaRoles(node),roles.reduce(((rolesAcc,role)=>Array.isArray(rolesAcc[role])?{...rolesAcc,[role]:[...rolesAcc[role],node]}:{...rolesAcc,[role]:[node]}),acc)}),{})}function prettyRoles(dom,_ref6){let{hidden:hidden,includeDescription:includeDescription}=_ref6;const roles=getRoles(dom,{hidden:hidden});return Object.entries(roles).filter((_ref7=>{let[role]=_ref7;return"generic"!==role})).map((_ref8=>{let[role,elements]=_ref8;const delimiterBar="-".repeat(50);return role+":\n\n"+elements.map((el=>{const nameString='Name "'+(0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__.AB)(el,{computedStyleSupportsPseudoElements:getConfig().computedStyleSupportsPseudoElements})+'":\n',domString=prettyDOM(el.cloneNode(!1));if(includeDescription){return""+nameString+('Description "'+(0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__.b)(el,{computedStyleSupportsPseudoElements:getConfig().computedStyleSupportsPseudoElements})+'":\n')+domString}return""+nameString+domString})).join("\n\n")+"\n\n"+delimiterBar})).join("\n")}const logRoles=function(dom,_temp2){let{hidden:hidden=!1}=void 0===_temp2?{}:_temp2;return console.log(prettyRoles(dom,{hidden:hidden}))};function checkBooleanAttribute(element,attribute){const attributeValue=element.getAttribute(attribute);return"true"===attributeValue||"false"!==attributeValue&&void 0}const normalize=getDefaultNormalizer();function getRegExpMatcher(string){return new RegExp(function escapeRegExp(string){return string.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")}(string.toLowerCase()),"i")}function makeSuggestion(queryName,element,content,_ref){let{variant:variant,name:name}=_ref,warning="";const queryOptions={},queryArgs=[["Role","TestId"].includes(queryName)?content:getRegExpMatcher(content)];name&&(queryOptions.name=getRegExpMatcher(name)),"Role"===queryName&&isInaccessible(element)&&(queryOptions.hidden=!0,warning="Element is inaccessible. This means that the element and all its children are invisible to screen readers.\n    If you are using the aria-hidden prop, make sure this is the right choice for your case.\n    "),Object.keys(queryOptions).length>0&&queryArgs.push(queryOptions);const queryMethod=variant+"By"+queryName;return{queryName:queryName,queryMethod:queryMethod,queryArgs:queryArgs,variant:variant,warning:warning,toString(){warning&&console.warn(warning);let[text,options]=queryArgs;return text="string"==typeof text?"'"+text+"'":text,options=options?", { "+Object.entries(options).map((_ref2=>{let[k,v]=_ref2;return k+": "+v})).join(", ")+" }":"",queryMethod+"("+text+options+")"}}}function canSuggest(currentMethod,requestedMethod,data){return data&&(!requestedMethod||requestedMethod.toLowerCase()===currentMethod.toLowerCase())}function getSuggestedQuery(element,variant,method){var _element$getAttribute,_getImplicitAriaRoles;if(void 0===variant&&(variant="get"),element.matches(getConfig().defaultIgnore))return;const role=null!=(_element$getAttribute=element.getAttribute("role"))?_element$getAttribute:null==(_getImplicitAriaRoles=getImplicitAriaRoles(element))?void 0:_getImplicitAriaRoles[0];if("generic"!==role&&canSuggest("Role",method,role))return makeSuggestion("Role",element,role,{variant:variant,name:(0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__.AB)(element,{computedStyleSupportsPseudoElements:getConfig().computedStyleSupportsPseudoElements})});const labelText=getLabels(document,element).map((label=>label.content)).join(" ");if(canSuggest("LabelText",method,labelText))return makeSuggestion("LabelText",element,labelText,{variant:variant});const placeholderText=element.getAttribute("placeholder");if(canSuggest("PlaceholderText",method,placeholderText))return makeSuggestion("PlaceholderText",element,placeholderText,{variant:variant});const textContent=normalize(getNodeText(element));if(canSuggest("Text",method,textContent))return makeSuggestion("Text",element,textContent,{variant:variant});if(canSuggest("DisplayValue",method,element.value))return makeSuggestion("DisplayValue",element,normalize(element.value),{variant:variant});const alt=element.getAttribute("alt");if(canSuggest("AltText",method,alt))return makeSuggestion("AltText",element,alt,{variant:variant});const title=element.getAttribute("title");if(canSuggest("Title",method,title))return makeSuggestion("Title",element,title,{variant:variant});const testId=element.getAttribute(getConfig().testIdAttribute);return canSuggest("TestId",method,testId)?makeSuggestion("TestId",element,testId,{variant:variant}):void 0}function copyStackTrace(target,source){target.stack=source.stack.replace(source.message,target.message)}function waitFor(callback,_ref){let{container:container=getDocument(),timeout:timeout=getConfig().asyncUtilTimeout,showOriginalStackTrace:showOriginalStackTrace=getConfig().showOriginalStackTrace,stackTraceError:stackTraceError,interval:interval=50,onTimeout:onTimeout=(error=>(error.message=getConfig().getElementError(error.message,container).message,error)),mutationObserverOptions:mutationObserverOptions={subtree:!0,childList:!0,attributes:!0,characterData:!0}}=_ref;if("function"!=typeof callback)throw new TypeError("Received `callback` arg must be a function");return new Promise((async(resolve,reject)=>{let lastError,intervalId,observer,finished=!1,promiseStatus="idle";const overallTimeoutTimer=setTimeout((function handleTimeout(){let error;lastError?(error=lastError,showOriginalStackTrace||"TestingLibraryElementError"!==error.name||copyStackTrace(error,stackTraceError)):(error=new Error("Timed out in waitFor."),showOriginalStackTrace||copyStackTrace(error,stackTraceError));onDone(onTimeout(error),null)}),timeout),usingJestFakeTimers=jestFakeTimersAreEnabled();if(usingJestFakeTimers){const{unstable_advanceTimersWrapper:advanceTimersWrapper}=getConfig();for(checkCallback();!finished;){if(!jestFakeTimersAreEnabled()){const error=new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");return showOriginalStackTrace||copyStackTrace(error,stackTraceError),void reject(error)}if(await advanceTimersWrapper((async()=>{jest.advanceTimersByTime(interval)})),checkCallback(),finished)break}}else{try{checkContainerType(container)}catch(e){return void reject(e)}intervalId=setInterval(checkRealTimersCallback,interval);const{MutationObserver:MutationObserver}=getWindowFromNode(container);observer=new MutationObserver(checkRealTimersCallback),observer.observe(container,mutationObserverOptions),checkCallback()}function onDone(error,result){finished=!0,clearTimeout(overallTimeoutTimer),usingJestFakeTimers||(clearInterval(intervalId),observer.disconnect()),error?reject(error):resolve(result)}function checkRealTimersCallback(){if(jestFakeTimersAreEnabled()){const error=new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");return showOriginalStackTrace||copyStackTrace(error,stackTraceError),reject(error)}return checkCallback()}function checkCallback(){if("pending"!==promiseStatus)try{const result=function runWithExpensiveErrorDiagnosticsDisabled(callback){try{return config._disableExpensiveErrorDiagnostics=!0,callback()}finally{config._disableExpensiveErrorDiagnostics=!1}}(callback);"function"==typeof(null==result?void 0:result.then)?(promiseStatus="pending",result.then((resolvedValue=>{promiseStatus="resolved",onDone(null,resolvedValue)}),(rejectedValue=>{promiseStatus="rejected",lastError=rejectedValue}))):onDone(null,result)}catch(error){lastError=error}}}))}function waitForWrapper(callback,options){const stackTraceError=new Error("STACK_TRACE_MESSAGE");return getConfig().asyncWrapper((()=>waitFor(callback,{stackTraceError:stackTraceError,...options})))}function getElementError(message,container){return getConfig().getElementError(message,container)}function getMultipleElementsFoundError(message,container){return getElementError(message+"\n\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).",container)}function queryAllByAttribute(attribute,container,text,_temp){let{exact:exact=!0,collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer}=void 0===_temp?{}:_temp;const matcher=exact?matches:fuzzyMatches,matchNormalizer=makeNormalizer({collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer});return Array.from(container.querySelectorAll("["+attribute+"]")).filter((node=>matcher(node.getAttribute(attribute),node,text,matchNormalizer)))}function queryByAttribute(attribute,container,text,options){const els=queryAllByAttribute(attribute,container,text,options);if(els.length>1)throw getMultipleElementsFoundError("Found multiple elements by ["+attribute+"="+text+"]",container);return els[0]||null}function makeSingleQuery(allQuery,getMultipleError){return function(container){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];const els=allQuery(container,...args);if(els.length>1){const elementStrings=els.map((element=>getElementError(null,element).message)).join("\n\n");throw getMultipleElementsFoundError(getMultipleError(container,...args)+"\n\nHere are the matching elements:\n\n"+elementStrings,container)}return els[0]||null}}function getSuggestionError(suggestion,container){return getConfig().getElementError("A better query is available, try this:\n"+suggestion.toString()+"\n",container)}function makeGetAllQuery(allQuery,getMissingError){return function(container){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];const els=allQuery(container,...args);if(!els.length)throw getConfig().getElementError(getMissingError(container,...args),container);return els}}function makeFindQuery(getter){return(container,text,options,waitForOptions)=>waitForWrapper((()=>getter(container,text,options)),{container:container,...waitForOptions})}const wrapSingleQueryWithSuggestion=(query,queryAllByName,variant)=>function(container){for(var _len3=arguments.length,args=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++)args[_key3-1]=arguments[_key3];const element=query(container,...args),[{suggest:suggest=getConfig().throwSuggestions}={}]=args.slice(-1);if(element&&suggest){const suggestion=getSuggestedQuery(element,variant);if(suggestion&&!queryAllByName.endsWith(suggestion.queryName))throw getSuggestionError(suggestion.toString(),container)}return element},wrapAllByQueryWithSuggestion=(query,queryAllByName,variant)=>function(container){for(var _len4=arguments.length,args=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++)args[_key4-1]=arguments[_key4];const els=query(container,...args),[{suggest:suggest=getConfig().throwSuggestions}={}]=args.slice(-1);if(els.length&&suggest){const uniqueSuggestionMessages=[...new Set(els.map((element=>{var _getSuggestedQuery;return null==(_getSuggestedQuery=getSuggestedQuery(element,variant))?void 0:_getSuggestedQuery.toString()})))];if(1===uniqueSuggestionMessages.length&&!queryAllByName.endsWith(getSuggestedQuery(els[0],variant).queryName))throw getSuggestionError(uniqueSuggestionMessages[0],container)}return els};function buildQueries(queryAllBy,getMultipleError,getMissingError){const queryBy=wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy,getMultipleError),queryAllBy.name,"query"),getAllBy=makeGetAllQuery(queryAllBy,getMissingError),getBy=makeSingleQuery(getAllBy,getMultipleError),getByWithSuggestions=wrapSingleQueryWithSuggestion(getBy,queryAllBy.name,"get");return[queryBy,wrapAllByQueryWithSuggestion(getAllBy,queryAllBy.name.replace("query","get"),"getAll"),getByWithSuggestions,makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy,queryAllBy.name,"findAll")),makeFindQuery(wrapSingleQueryWithSuggestion(getBy,queryAllBy.name,"find"))]}var queryHelpers=Object.freeze({__proto__:null,getElementError:getElementError,wrapAllByQueryWithSuggestion:wrapAllByQueryWithSuggestion,wrapSingleQueryWithSuggestion:wrapSingleQueryWithSuggestion,getMultipleElementsFoundError:getMultipleElementsFoundError,queryAllByAttribute:queryAllByAttribute,queryByAttribute:queryByAttribute,makeSingleQuery:makeSingleQuery,makeGetAllQuery:makeGetAllQuery,makeFindQuery:makeFindQuery,buildQueries:buildQueries});const queryAllLabelsByText=function(container,text,_temp){let{exact:exact=!0,trim:trim,collapseWhitespace:collapseWhitespace,normalizer:normalizer}=void 0===_temp?{}:_temp;const matcher=exact?matches:fuzzyMatches,matchNormalizer=makeNormalizer({collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer}),textToMatchByLabels=function queryAllLabels(container){return Array.from(container.querySelectorAll("label,input")).map((node=>({node:node,textToMatch:getLabelContent(node)}))).filter((_ref=>{let{textToMatch:textToMatch}=_ref;return null!==textToMatch}))}(container);return textToMatchByLabels.filter((_ref2=>{let{node:node,textToMatch:textToMatch}=_ref2;return matcher(textToMatch,node,text,matchNormalizer)})).map((_ref3=>{let{node:node}=_ref3;return node}))},queryAllByLabelText=function(container,text,_temp2){let{selector:selector="*",exact:exact=!0,collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer}=void 0===_temp2?{}:_temp2;checkContainerType(container);const matcher=exact?matches:fuzzyMatches,matchNormalizer=makeNormalizer({collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer}),matchingLabelledElements=Array.from(container.querySelectorAll("*")).filter((element=>getRealLabels(element).length||element.hasAttribute("aria-labelledby"))).reduce(((labelledElements,labelledElement)=>{const labelList=getLabels(container,labelledElement,{selector:selector});labelList.filter((label=>Boolean(label.formControl))).forEach((label=>{matcher(label.content,label.formControl,text,matchNormalizer)&&label.formControl&&labelledElements.push(label.formControl)}));const labelsValue=labelList.filter((label=>Boolean(label.content))).map((label=>label.content));return matcher(labelsValue.join(" "),labelledElement,text,matchNormalizer)&&labelledElements.push(labelledElement),labelsValue.length>1&&labelsValue.forEach(((labelValue,index)=>{matcher(labelValue,labelledElement,text,matchNormalizer)&&labelledElements.push(labelledElement);const labelsFiltered=[...labelsValue];labelsFiltered.splice(index,1),labelsFiltered.length>1&&matcher(labelsFiltered.join(" "),labelledElement,text,matchNormalizer)&&labelledElements.push(labelledElement)})),labelledElements}),[]).concat(queryAllByAttribute("aria-label",container,text,{exact:exact,normalizer:matchNormalizer}));return Array.from(new Set(matchingLabelledElements)).filter((element=>element.matches(selector)))},getAllByLabelText=function(container,text){for(var _len=arguments.length,rest=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)rest[_key-2]=arguments[_key];const els=queryAllByLabelText(container,text,...rest);if(!els.length){const labels=queryAllLabelsByText(container,text,...rest);if(labels.length){const tagNames=labels.map((label=>function getTagNameOfElementAssociatedWithLabelViaFor(container,label){const htmlFor=label.getAttribute("for");if(!htmlFor)return null;const element=container.querySelector('[id="'+htmlFor+'"]');return element?element.tagName.toLowerCase():null}(container,label))).filter((tagName=>!!tagName));throw tagNames.length?getConfig().getElementError(tagNames.map((tagName=>"Found a label with the text of: "+text+", however the element associated with this label (<"+tagName+" />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <"+tagName+" />, you can use aria-label or aria-labelledby instead.")).join("\n\n"),container):getConfig().getElementError("Found a label with the text of: "+text+', however no form control was found associated to that label. Make sure you\'re using the "for" attribute or "aria-labelledby" attribute correctly.',container)}throw getConfig().getElementError("Unable to find a label with the text of: "+text,container)}return els};const getMultipleError$7=(c,text)=>"Found multiple elements with the text of: "+text,queryByLabelText=wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllByLabelText,getMultipleError$7),queryAllByLabelText.name,"query"),getByLabelText=makeSingleQuery(getAllByLabelText,getMultipleError$7),findAllByLabelText=makeFindQuery(wrapAllByQueryWithSuggestion(getAllByLabelText,getAllByLabelText.name,"findAll")),findByLabelText=makeFindQuery(wrapSingleQueryWithSuggestion(getByLabelText,getAllByLabelText.name,"find")),getAllByLabelTextWithSuggestions=wrapAllByQueryWithSuggestion(getAllByLabelText,getAllByLabelText.name,"getAll"),getByLabelTextWithSuggestions=wrapSingleQueryWithSuggestion(getByLabelText,getAllByLabelText.name,"get"),queryAllByLabelTextWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByLabelText,queryAllByLabelText.name,"queryAll"),queryAllByPlaceholderText=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return checkContainerType(args[0]),queryAllByAttribute("placeholder",...args)},queryAllByPlaceholderTextWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByPlaceholderText,queryAllByPlaceholderText.name,"queryAll"),[queryByPlaceholderText,getAllByPlaceholderText,getByPlaceholderText,findAllByPlaceholderText,findByPlaceholderText]=buildQueries(queryAllByPlaceholderText,((c,text)=>"Found multiple elements with the placeholder text of: "+text),((c,text)=>"Unable to find an element with the placeholder text of: "+text)),queryAllByText=function(container,text,_temp){let{selector:selector="*",exact:exact=!0,collapseWhitespace:collapseWhitespace,trim:trim,ignore:ignore=getConfig().defaultIgnore,normalizer:normalizer}=void 0===_temp?{}:_temp;checkContainerType(container);const matcher=exact?matches:fuzzyMatches,matchNormalizer=makeNormalizer({collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer});let baseArray=[];return"function"==typeof container.matches&&container.matches(selector)&&(baseArray=[container]),[...baseArray,...Array.from(container.querySelectorAll(selector))].filter((node=>!ignore||!node.matches(ignore))).filter((node=>matcher(getNodeText(node),node,text,matchNormalizer)))},queryAllByTextWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByText,queryAllByText.name,"queryAll"),[queryByText,getAllByText,getByText,findAllByText,findByText]=buildQueries(queryAllByText,((c,text)=>"Found multiple elements with the text: "+text),(function(c,text,options){void 0===options&&(options={});const{collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer,selector:selector}=options,normalizedText=makeNormalizer({collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer})(text.toString());return"Unable to find an element with the text: "+(normalizedText!==text.toString()?normalizedText+" (normalized from '"+text+"')":text)+("*"!==(null!=selector?selector:"*")?", which matches selector '"+selector+"'":"")+". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible."})),queryAllByDisplayValue=function(container,value,_temp){let{exact:exact=!0,collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer}=void 0===_temp?{}:_temp;checkContainerType(container);const matcher=exact?matches:fuzzyMatches,matchNormalizer=makeNormalizer({collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer});return Array.from(container.querySelectorAll("input,textarea,select")).filter((node=>{if("SELECT"===node.tagName){return Array.from(node.options).filter((option=>option.selected)).some((optionNode=>matcher(getNodeText(optionNode),optionNode,value,matchNormalizer)))}return matcher(node.value,node,value,matchNormalizer)}))},queryAllByDisplayValueWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByDisplayValue,queryAllByDisplayValue.name,"queryAll"),[queryByDisplayValue,getAllByDisplayValue,getByDisplayValue,findAllByDisplayValue,findByDisplayValue]=buildQueries(queryAllByDisplayValue,((c,value)=>"Found multiple elements with the display value: "+value+"."),((c,value)=>"Unable to find an element with the display value: "+value+".")),VALID_TAG_REGEXP=/^(img|input|area|.+-.+)$/i,queryAllByAltText=function(container,alt,options){return void 0===options&&(options={}),checkContainerType(container),queryAllByAttribute("alt",container,alt,options).filter((node=>VALID_TAG_REGEXP.test(node.tagName)))},queryAllByAltTextWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByAltText,queryAllByAltText.name,"queryAll"),[queryByAltText,getAllByAltText,getByAltText,findAllByAltText,findByAltText]=buildQueries(queryAllByAltText,((c,alt)=>"Found multiple elements with the alt text: "+alt),((c,alt)=>"Unable to find an element with the alt text: "+alt)),queryAllByTitle=function(container,text,_temp){let{exact:exact=!0,collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer}=void 0===_temp?{}:_temp;checkContainerType(container);const matcher=exact?matches:fuzzyMatches,matchNormalizer=makeNormalizer({collapseWhitespace:collapseWhitespace,trim:trim,normalizer:normalizer});return Array.from(container.querySelectorAll("[title], svg > title")).filter((node=>matcher(node.getAttribute("title"),node,text,matchNormalizer)||(node=>{var _node$parentElement;return"title"===node.tagName.toLowerCase()&&"svg"===(null==(_node$parentElement=node.parentElement)?void 0:_node$parentElement.tagName.toLowerCase())})(node)&&matcher(getNodeText(node),node,text,matchNormalizer)))},queryAllByTitleWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByTitle,queryAllByTitle.name,"queryAll"),[queryByTitle,getAllByTitle,getByTitle,findAllByTitle,findByTitle]=buildQueries(queryAllByTitle,((c,title)=>"Found multiple elements with the title: "+title+"."),((c,title)=>"Unable to find an element with the title: "+title+".")),queryAllByRole=function(container,role,_temp){let{hidden:hidden=getConfig().defaultHidden,name:name,description:description,queryFallbacks:queryFallbacks=!1,selected:selected,busy:busy,checked:checked,pressed:pressed,current:current,level:level,expanded:expanded,value:{now:valueNow,min:valueMin,max:valueMax,text:valueText}={}}=void 0===_temp?{}:_temp;var _allRoles$get,_allRoles$get2,_allRoles$get3,_allRoles$get4,_allRoles$get5,_allRoles$get6,_allRoles$get7,_allRoles$get8,_allRoles$get9,_allRoles$get10;if((checkContainerType(container),void 0!==selected)&&void 0===(null==(_allRoles$get=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get.props["aria-selected"]))throw new Error('"aria-selected" is not supported on role "'+role+'".');if(void 0!==busy&&void 0===(null==(_allRoles$get2=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get2.props["aria-busy"]))throw new Error('"aria-busy" is not supported on role "'+role+'".');if(void 0!==checked&&void 0===(null==(_allRoles$get3=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get3.props["aria-checked"]))throw new Error('"aria-checked" is not supported on role "'+role+'".');if(void 0!==pressed&&void 0===(null==(_allRoles$get4=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get4.props["aria-pressed"]))throw new Error('"aria-pressed" is not supported on role "'+role+'".');if(void 0!==current&&void 0===(null==(_allRoles$get5=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get5.props["aria-current"]))throw new Error('"aria-current" is not supported on role "'+role+'".');if(void 0!==level&&"heading"!==role)throw new Error('Role "'+role+'" cannot have "level" property.');if(void 0!==valueNow&&void 0===(null==(_allRoles$get6=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get6.props["aria-valuenow"]))throw new Error('"aria-valuenow" is not supported on role "'+role+'".');if(void 0!==valueMax&&void 0===(null==(_allRoles$get7=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get7.props["aria-valuemax"]))throw new Error('"aria-valuemax" is not supported on role "'+role+'".');if(void 0!==valueMin&&void 0===(null==(_allRoles$get8=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get8.props["aria-valuemin"]))throw new Error('"aria-valuemin" is not supported on role "'+role+'".');if(void 0!==valueText&&void 0===(null==(_allRoles$get9=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get9.props["aria-valuetext"]))throw new Error('"aria-valuetext" is not supported on role "'+role+'".');if(void 0!==expanded&&void 0===(null==(_allRoles$get10=aria_query__WEBPACK_IMPORTED_MODULE_2__.uJ.get(role))?void 0:_allRoles$get10.props["aria-expanded"]))throw new Error('"aria-expanded" is not supported on role "'+role+'".');const subtreeIsInaccessibleCache=new WeakMap;function cachedIsSubtreeInaccessible(element){return subtreeIsInaccessibleCache.has(element)||subtreeIsInaccessibleCache.set(element,isSubtreeInaccessible(element)),subtreeIsInaccessibleCache.get(element)}return Array.from(container.querySelectorAll(function makeRoleSelector(role){var _roleElements$get;const explicitRoleSelector='*[role~="'+role+'"]',roleRelations=null!=(_roleElements$get=aria_query__WEBPACK_IMPORTED_MODULE_2__.UN.get(role))?_roleElements$get:new Set,implicitRoleSelectors=new Set(Array.from(roleRelations).map((_ref=>{let{name:name}=_ref;return name})));return[explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(",")}(role))).filter((node=>{if(node.hasAttribute("role")){const roleValue=node.getAttribute("role");if(queryFallbacks)return roleValue.split(" ").filter(Boolean).some((roleAttributeToken=>roleAttributeToken===role));const[firstRoleAttributeToken]=roleValue.split(" ");return firstRoleAttributeToken===role}return getImplicitAriaRoles(node).some((implicitRole=>implicitRole===role))})).filter((element=>{if(void 0!==selected)return selected===function computeAriaSelected(element){return"OPTION"===element.tagName?element.selected:checkBooleanAttribute(element,"aria-selected")}(element);if(void 0!==busy)return busy===function computeAriaBusy(element){return"true"===element.getAttribute("aria-busy")}(element);if(void 0!==checked)return checked===function computeAriaChecked(element){if(!("indeterminate"in element)||!element.indeterminate)return"checked"in element?element.checked:checkBooleanAttribute(element,"aria-checked")}(element);if(void 0!==pressed)return pressed===function computeAriaPressed(element){return checkBooleanAttribute(element,"aria-pressed")}(element);if(void 0!==current)return current===function computeAriaCurrent(element){var _ref9,_checkBooleanAttribut;return null!=(_ref9=null!=(_checkBooleanAttribut=checkBooleanAttribute(element,"aria-current"))?_checkBooleanAttribut:element.getAttribute("aria-current"))&&_ref9}(element);if(void 0!==expanded)return expanded===function computeAriaExpanded(element){return checkBooleanAttribute(element,"aria-expanded")}(element);if(void 0!==level)return level===function computeHeadingLevel(element){return element.getAttribute("aria-level")&&Number(element.getAttribute("aria-level"))||{H1:1,H2:2,H3:3,H4:4,H5:5,H6:6}[element.tagName]}(element);if(void 0!==valueNow||void 0!==valueMax||void 0!==valueMin||void 0!==valueText){let valueMatches=!0;var _computeAriaValueText;if(void 0!==valueNow&&valueMatches&&(valueMatches=valueNow===function computeAriaValueNow(element){const valueNow=element.getAttribute("aria-valuenow");return null===valueNow?void 0:+valueNow}(element)),void 0!==valueMax&&valueMatches&&(valueMatches=valueMax===function computeAriaValueMax(element){const valueMax=element.getAttribute("aria-valuemax");return null===valueMax?void 0:+valueMax}(element)),void 0!==valueMin&&valueMatches&&(valueMatches=valueMin===function computeAriaValueMin(element){const valueMin=element.getAttribute("aria-valuemin");return null===valueMin?void 0:+valueMin}(element)),void 0!==valueText)valueMatches&&(valueMatches=matches(null!=(_computeAriaValueText=function computeAriaValueText(element){const valueText=element.getAttribute("aria-valuetext");return null===valueText?void 0:valueText}(element))?_computeAriaValueText:null,element,valueText,(text=>text)));return valueMatches}return!0})).filter((element=>void 0===name||matches((0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__.AB)(element,{computedStyleSupportsPseudoElements:getConfig().computedStyleSupportsPseudoElements}),element,name,(text=>text)))).filter((element=>void 0===description||matches((0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__.b)(element,{computedStyleSupportsPseudoElements:getConfig().computedStyleSupportsPseudoElements}),element,description,(text=>text)))).filter((element=>!1!==hidden||!1===isInaccessible(element,{isSubtreeInaccessible:cachedIsSubtreeInaccessible})))};const getNameHint=name=>{let nameHint="";return nameHint=void 0===name?"":"string"==typeof name?' and name "'+name+'"':" and name `"+name+"`",nameHint},queryAllByRoleWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByRole,queryAllByRole.name,"queryAll"),[queryByRole,getAllByRole,getByRole,findAllByRole,findByRole]=buildQueries(queryAllByRole,(function(c,role,_temp2){let{name:name}=void 0===_temp2?{}:_temp2;return'Found multiple elements with the role "'+role+'"'+getNameHint(name)}),(function(container,role,_temp3){let{hidden:hidden=getConfig().defaultHidden,name:name,description:description}=void 0===_temp3?{}:_temp3;if(getConfig()._disableExpensiveErrorDiagnostics)return'Unable to find role="'+role+'"'+getNameHint(name);let roleMessage,roles="";Array.from(container.children).forEach((childElement=>{roles+=prettyRoles(childElement,{hidden:hidden,includeDescription:void 0!==description})})),roleMessage=0===roles.length?!1===hidden?"There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole":"There are no available roles.":("\nHere are the "+(!1===hidden?"accessible":"available")+" roles:\n\n  "+roles.replace(/\n/g,"\n  ").replace(/\n\s\s\n/g,"\n\n")+"\n").trim();let nameHint="";nameHint=void 0===name?"":"string"==typeof name?' and name "'+name+'"':" and name `"+name+"`";let descriptionHint="";return descriptionHint=void 0===description?"":"string"==typeof description?' and description "'+description+'"':" and description `"+description+"`",("\nUnable to find an "+(!1===hidden?"accessible ":"")+'element with the role "'+role+'"'+nameHint+descriptionHint+"\n\n"+roleMessage).trim()})),getTestIdAttribute=()=>getConfig().testIdAttribute,queryAllByTestId=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return checkContainerType(args[0]),queryAllByAttribute(getTestIdAttribute(),...args)},queryAllByTestIdWithSuggestions=wrapAllByQueryWithSuggestion(queryAllByTestId,queryAllByTestId.name,"queryAll"),[queryByTestId,getAllByTestId,getByTestId,findAllByTestId,findByTestId]=buildQueries(queryAllByTestId,((c,id)=>"Found multiple elements by: ["+getTestIdAttribute()+'="'+id+'"]'),((c,id)=>"Unable to find an element by: ["+getTestIdAttribute()+'="'+id+'"]'));var queries=Object.freeze({__proto__:null,queryAllByLabelText:queryAllByLabelTextWithSuggestions,queryByLabelText:queryByLabelText,getAllByLabelText:getAllByLabelTextWithSuggestions,getByLabelText:getByLabelTextWithSuggestions,findAllByLabelText:findAllByLabelText,findByLabelText:findByLabelText,queryByPlaceholderText:queryByPlaceholderText,queryAllByPlaceholderText:queryAllByPlaceholderTextWithSuggestions,getByPlaceholderText:getByPlaceholderText,getAllByPlaceholderText:getAllByPlaceholderText,findAllByPlaceholderText:findAllByPlaceholderText,findByPlaceholderText:findByPlaceholderText,queryByText:queryByText,queryAllByText:queryAllByTextWithSuggestions,getByText:getByText,getAllByText:getAllByText,findAllByText:findAllByText,findByText:findByText,queryByDisplayValue:queryByDisplayValue,queryAllByDisplayValue:queryAllByDisplayValueWithSuggestions,getByDisplayValue:getByDisplayValue,getAllByDisplayValue:getAllByDisplayValue,findAllByDisplayValue:findAllByDisplayValue,findByDisplayValue:findByDisplayValue,queryByAltText:queryByAltText,queryAllByAltText:queryAllByAltTextWithSuggestions,getByAltText:getByAltText,getAllByAltText:getAllByAltText,findAllByAltText:findAllByAltText,findByAltText:findByAltText,queryByTitle:queryByTitle,queryAllByTitle:queryAllByTitleWithSuggestions,getByTitle:getByTitle,getAllByTitle:getAllByTitle,findAllByTitle:findAllByTitle,findByTitle:findByTitle,queryByRole:queryByRole,queryAllByRole:queryAllByRoleWithSuggestions,getAllByRole:getAllByRole,getByRole:getByRole,findAllByRole:findAllByRole,findByRole:findByRole,queryByTestId:queryByTestId,queryAllByTestId:queryAllByTestIdWithSuggestions,getByTestId:getByTestId,getAllByTestId:getAllByTestId,findAllByTestId:findAllByTestId,findByTestId:findByTestId});function getQueriesForElement(element,queries$1,initialValue){return void 0===queries$1&&(queries$1=queries),void 0===initialValue&&(initialValue={}),Object.keys(queries$1).reduce(((helpers,key)=>{const fn=queries$1[key];return helpers[key]=fn.bind(null,element),helpers}),initialValue)}const isRemoved=result=>!result||Array.isArray(result)&&!result.length;function initialCheck(elements){if(isRemoved(elements))throw new Error("The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.")}async function waitForElementToBeRemoved(callback,options){const timeoutError=new Error("Timed out in waitForElementToBeRemoved.");if("function"!=typeof callback){initialCheck(callback);const getRemainingElements=(Array.isArray(callback)?callback:[callback]).map((element=>{let parent=element.parentElement;if(null===parent)return()=>null;for(;parent.parentElement;)parent=parent.parentElement;return()=>parent.contains(element)?element:null}));callback=()=>getRemainingElements.map((c=>c())).filter(Boolean)}return initialCheck(callback()),waitForWrapper((()=>{let result;try{result=callback()}catch(error){if("TestingLibraryElementError"===error.name)return;throw error}if(!isRemoved(result))throw timeoutError}),options)}const eventMap={copy:{EventType:"ClipboardEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},cut:{EventType:"ClipboardEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},paste:{EventType:"ClipboardEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},compositionEnd:{EventType:"CompositionEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},compositionStart:{EventType:"CompositionEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},compositionUpdate:{EventType:"CompositionEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},keyDown:{EventType:"KeyboardEvent",defaultInit:{bubbles:!0,cancelable:!0,charCode:0,composed:!0}},keyPress:{EventType:"KeyboardEvent",defaultInit:{bubbles:!0,cancelable:!0,charCode:0,composed:!0}},keyUp:{EventType:"KeyboardEvent",defaultInit:{bubbles:!0,cancelable:!0,charCode:0,composed:!0}},focus:{EventType:"FocusEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},blur:{EventType:"FocusEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},focusIn:{EventType:"FocusEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},focusOut:{EventType:"FocusEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},change:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!1}},input:{EventType:"InputEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},invalid:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!0}},submit:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!0}},reset:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!0}},click:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,button:0,composed:!0}},contextMenu:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dblClick:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},drag:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dragEnd:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},dragEnter:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dragExit:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},dragLeave:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},dragOver:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dragStart:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},drop:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseDown:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseEnter:{EventType:"MouseEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},mouseLeave:{EventType:"MouseEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},mouseMove:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseOut:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseOver:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseUp:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},select:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!1}},touchCancel:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},touchEnd:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},touchMove:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},touchStart:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},resize:{EventType:"UIEvent",defaultInit:{bubbles:!1,cancelable:!1}},scroll:{EventType:"UIEvent",defaultInit:{bubbles:!1,cancelable:!1}},wheel:{EventType:"WheelEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},abort:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},canPlay:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},canPlayThrough:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},durationChange:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},emptied:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},encrypted:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},ended:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},loadedData:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},loadedMetadata:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},loadStart:{EventType:"ProgressEvent",defaultInit:{bubbles:!1,cancelable:!1}},pause:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},play:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},playing:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},progress:{EventType:"ProgressEvent",defaultInit:{bubbles:!1,cancelable:!1}},rateChange:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},seeked:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},seeking:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},stalled:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},suspend:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},timeUpdate:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},volumeChange:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},waiting:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},load:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},error:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},animationStart:{EventType:"AnimationEvent",defaultInit:{bubbles:!0,cancelable:!1}},animationEnd:{EventType:"AnimationEvent",defaultInit:{bubbles:!0,cancelable:!1}},animationIteration:{EventType:"AnimationEvent",defaultInit:{bubbles:!0,cancelable:!1}},transitionCancel:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!1}},transitionEnd:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!0}},transitionRun:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!1}},transitionStart:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!1}},pointerOver:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerEnter:{EventType:"PointerEvent",defaultInit:{bubbles:!1,cancelable:!1}},pointerDown:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerMove:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerUp:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerCancel:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},pointerOut:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerLeave:{EventType:"PointerEvent",defaultInit:{bubbles:!1,cancelable:!1}},gotPointerCapture:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},lostPointerCapture:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},popState:{EventType:"PopStateEvent",defaultInit:{bubbles:!0,cancelable:!1}},offline:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},online:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}}},eventAliasMap={doubleClick:"dblClick"};function fireEvent(element,event){return getConfig().eventWrapper((()=>{if(!event)throw new Error("Unable to fire an event - please provide an event object.");if(!element)throw new Error('Unable to fire a "'+event.type+'" event - please provide a DOM element.');return element.dispatchEvent(event)}))}function createEvent(eventName,node,init,_temp){let{EventType:EventType="Event",defaultInit:defaultInit={}}=void 0===_temp?{}:_temp;if(!node)throw new Error('Unable to fire a "'+eventName+'" event - please provide a DOM element.');const eventInit={...defaultInit,...init},{target:{value:value,files:files,...targetProperties}={}}=eventInit;void 0!==value&&function setNativeValue(element,value){const{set:valueSetter}=Object.getOwnPropertyDescriptor(element,"value")||{},prototype=Object.getPrototypeOf(element),{set:prototypeValueSetter}=Object.getOwnPropertyDescriptor(prototype,"value")||{};if(prototypeValueSetter&&valueSetter!==prototypeValueSetter)prototypeValueSetter.call(element,value);else{if(!valueSetter)throw new Error("The given element does not have a value setter");valueSetter.call(element,value)}}(node,value),void 0!==files&&Object.defineProperty(node,"files",{configurable:!0,enumerable:!0,writable:!0,value:files}),Object.assign(node,targetProperties);const window=getWindowFromNode(node),EventConstructor=window[EventType]||window.Event;let event;if("function"==typeof EventConstructor)event=new EventConstructor(eventName,eventInit);else{event=window.document.createEvent(EventType);const{bubbles:bubbles,cancelable:cancelable,detail:detail,...otherInit}=eventInit;event.initEvent(eventName,bubbles,cancelable,detail),Object.keys(otherInit).forEach((eventKey=>{event[eventKey]=otherInit[eventKey]}))}return["dataTransfer","clipboardData"].forEach((dataTransferKey=>{const dataTransferValue=eventInit[dataTransferKey];"object"==typeof dataTransferValue&&("function"==typeof window.DataTransfer?Object.defineProperty(event,dataTransferKey,{value:Object.getOwnPropertyNames(dataTransferValue).reduce(((acc,propName)=>(Object.defineProperty(acc,propName,{value:dataTransferValue[propName]}),acc)),new window.DataTransfer)}):Object.defineProperty(event,dataTransferKey,{value:dataTransferValue}))})),event}function getPlaygroundUrl(markup){return"https://testing-playground.com/#markup="+function encode(value){return lz_string__WEBPACK_IMPORTED_MODULE_3___default().compressToEncodedURIComponent(function unindent(string){return string.replace(/[ \t]*[\n][ \t]*/g,"\n")}(value))}(markup)}Object.keys(eventMap).forEach((key=>{const{EventType:EventType,defaultInit:defaultInit}=eventMap[key],eventName=key.toLowerCase();createEvent[key]=(node,init)=>createEvent(eventName,node,init,{EventType:EventType,defaultInit:defaultInit}),fireEvent[key]=(node,init)=>fireEvent(node,createEvent[key](node,init))})),Object.keys(eventAliasMap).forEach((aliasKey=>{const key=eventAliasMap[aliasKey];fireEvent[aliasKey]=function(){return fireEvent[key](...arguments)}}));const initialValue={debug:(element,maxLength,options)=>Array.isArray(element)?element.forEach((el=>logDOM(el,maxLength,options))):logDOM(element,maxLength,options),logTestingPlaygroundURL:function(element){if(void 0===element&&(element=getDocument().body),!element||!("innerHTML"in element))return void console.log("The element you're providing isn't a valid DOM element.");if(!element.innerHTML)return void console.log("The provided element doesn't have any children.");const playgroundUrl=getPlaygroundUrl(element.innerHTML);return console.log("Open this URL in your browser\n\n"+playgroundUrl),playgroundUrl}},screen="undefined"!=typeof document&&document.body?getQueriesForElement(document.body,queries,initialValue):Object.keys(queries).reduce(((helpers,key)=>(helpers[key]=()=>{throw new TypeError("For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error")},helpers)),initialValue)},"./node_modules/@testing-library/dom/dist/event-map.js":function(__unused_webpack_module,exports){"use strict";exports.Hx=void 0;exports.Hx={copy:{EventType:"ClipboardEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},cut:{EventType:"ClipboardEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},paste:{EventType:"ClipboardEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},compositionEnd:{EventType:"CompositionEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},compositionStart:{EventType:"CompositionEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},compositionUpdate:{EventType:"CompositionEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},keyDown:{EventType:"KeyboardEvent",defaultInit:{bubbles:!0,cancelable:!0,charCode:0,composed:!0}},keyPress:{EventType:"KeyboardEvent",defaultInit:{bubbles:!0,cancelable:!0,charCode:0,composed:!0}},keyUp:{EventType:"KeyboardEvent",defaultInit:{bubbles:!0,cancelable:!0,charCode:0,composed:!0}},focus:{EventType:"FocusEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},blur:{EventType:"FocusEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},focusIn:{EventType:"FocusEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},focusOut:{EventType:"FocusEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},change:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!1}},input:{EventType:"InputEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},invalid:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!0}},submit:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!0}},reset:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!0}},click:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,button:0,composed:!0}},contextMenu:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dblClick:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},drag:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dragEnd:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},dragEnter:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dragExit:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},dragLeave:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},dragOver:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},dragStart:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},drop:{EventType:"DragEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseDown:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseEnter:{EventType:"MouseEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},mouseLeave:{EventType:"MouseEvent",defaultInit:{bubbles:!1,cancelable:!1,composed:!0}},mouseMove:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseOut:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseOver:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},mouseUp:{EventType:"MouseEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},select:{EventType:"Event",defaultInit:{bubbles:!0,cancelable:!1}},touchCancel:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},touchEnd:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},touchMove:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},touchStart:{EventType:"TouchEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},resize:{EventType:"UIEvent",defaultInit:{bubbles:!1,cancelable:!1}},scroll:{EventType:"UIEvent",defaultInit:{bubbles:!1,cancelable:!1}},wheel:{EventType:"WheelEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},abort:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},canPlay:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},canPlayThrough:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},durationChange:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},emptied:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},encrypted:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},ended:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},loadedData:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},loadedMetadata:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},loadStart:{EventType:"ProgressEvent",defaultInit:{bubbles:!1,cancelable:!1}},pause:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},play:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},playing:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},progress:{EventType:"ProgressEvent",defaultInit:{bubbles:!1,cancelable:!1}},rateChange:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},seeked:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},seeking:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},stalled:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},suspend:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},timeUpdate:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},volumeChange:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},waiting:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},load:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},error:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},animationStart:{EventType:"AnimationEvent",defaultInit:{bubbles:!0,cancelable:!1}},animationEnd:{EventType:"AnimationEvent",defaultInit:{bubbles:!0,cancelable:!1}},animationIteration:{EventType:"AnimationEvent",defaultInit:{bubbles:!0,cancelable:!1}},transitionCancel:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!1}},transitionEnd:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!0}},transitionRun:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!1}},transitionStart:{EventType:"TransitionEvent",defaultInit:{bubbles:!0,cancelable:!1}},pointerOver:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerEnter:{EventType:"PointerEvent",defaultInit:{bubbles:!1,cancelable:!1}},pointerDown:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerMove:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerUp:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerCancel:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},pointerOut:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!0,composed:!0}},pointerLeave:{EventType:"PointerEvent",defaultInit:{bubbles:!1,cancelable:!1}},gotPointerCapture:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},lostPointerCapture:{EventType:"PointerEvent",defaultInit:{bubbles:!0,cancelable:!1,composed:!0}},popState:{EventType:"PopStateEvent",defaultInit:{bubbles:!0,cancelable:!1}},offline:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}},online:{EventType:"Event",defaultInit:{bubbles:!1,cancelable:!1}}}},"./node_modules/@testing-library/dom/dist/helpers.js":function(__unused_webpack_module,exports){"use strict";exports.M2=function getWindowFromNode(node){if(node.defaultView)return node.defaultView;if(node.ownerDocument&&node.ownerDocument.defaultView)return node.ownerDocument.defaultView;if(node.window)return node.window;throw node.ownerDocument&&null===node.ownerDocument.defaultView?new Error("It looks like the window object is not available for the provided node."):node.then instanceof Function?new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?"):Array.isArray(node)?new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?"):"function"==typeof node.debug&&"function"==typeof node.logTestingPlaygroundURL?new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?"):new Error(`The given node is not an Element, the node type is: ${typeof node}.`)}},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/ariaPropsMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _iterationDecorator=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iterationDecorator.js"));function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var properties=[["aria-activedescendant",{type:"id"}],["aria-atomic",{type:"boolean"}],["aria-autocomplete",{type:"token",values:["inline","list","both","none"]}],["aria-busy",{type:"boolean"}],["aria-checked",{type:"tristate"}],["aria-colcount",{type:"integer"}],["aria-colindex",{type:"integer"}],["aria-colspan",{type:"integer"}],["aria-controls",{type:"idlist"}],["aria-current",{type:"token",values:["page","step","location","date","time",!0,!1]}],["aria-describedby",{type:"idlist"}],["aria-details",{type:"id"}],["aria-disabled",{type:"boolean"}],["aria-dropeffect",{type:"tokenlist",values:["copy","execute","link","move","none","popup"]}],["aria-errormessage",{type:"id"}],["aria-expanded",{type:"boolean",allowundefined:!0}],["aria-flowto",{type:"idlist"}],["aria-grabbed",{type:"boolean",allowundefined:!0}],["aria-haspopup",{type:"token",values:[!1,!0,"menu","listbox","tree","grid","dialog"]}],["aria-hidden",{type:"boolean",allowundefined:!0}],["aria-invalid",{type:"token",values:["grammar",!1,"spelling",!0]}],["aria-keyshortcuts",{type:"string"}],["aria-label",{type:"string"}],["aria-labelledby",{type:"idlist"}],["aria-level",{type:"integer"}],["aria-live",{type:"token",values:["assertive","off","polite"]}],["aria-modal",{type:"boolean"}],["aria-multiline",{type:"boolean"}],["aria-multiselectable",{type:"boolean"}],["aria-orientation",{type:"token",values:["vertical","undefined","horizontal"]}],["aria-owns",{type:"idlist"}],["aria-placeholder",{type:"string"}],["aria-posinset",{type:"integer"}],["aria-pressed",{type:"tristate"}],["aria-readonly",{type:"boolean"}],["aria-relevant",{type:"tokenlist",values:["additions","all","removals","text"]}],["aria-required",{type:"boolean"}],["aria-roledescription",{type:"string"}],["aria-rowcount",{type:"integer"}],["aria-rowindex",{type:"integer"}],["aria-rowspan",{type:"integer"}],["aria-selected",{type:"boolean",allowundefined:!0}],["aria-setsize",{type:"integer"}],["aria-sort",{type:"token",values:["ascending","descending","none","other"]}],["aria-valuemax",{type:"number"}],["aria-valuemin",{type:"number"}],["aria-valuenow",{type:"number"}],["aria-valuetext",{type:"string"}]],ariaPropsMap={entries:function entries(){return properties},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(properties);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,key,properties)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=properties.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!ariaPropsMap.get(key)},keys:function keys(){return properties.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return properties.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(ariaPropsMap,ariaPropsMap.entries());exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/domMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _iterationDecorator=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iterationDecorator.js"));function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var dom=[["a",{reserved:!1}],["abbr",{reserved:!1}],["acronym",{reserved:!1}],["address",{reserved:!1}],["applet",{reserved:!1}],["area",{reserved:!1}],["article",{reserved:!1}],["aside",{reserved:!1}],["audio",{reserved:!1}],["b",{reserved:!1}],["base",{reserved:!0}],["bdi",{reserved:!1}],["bdo",{reserved:!1}],["big",{reserved:!1}],["blink",{reserved:!1}],["blockquote",{reserved:!1}],["body",{reserved:!1}],["br",{reserved:!1}],["button",{reserved:!1}],["canvas",{reserved:!1}],["caption",{reserved:!1}],["center",{reserved:!1}],["cite",{reserved:!1}],["code",{reserved:!1}],["col",{reserved:!0}],["colgroup",{reserved:!0}],["content",{reserved:!1}],["data",{reserved:!1}],["datalist",{reserved:!1}],["dd",{reserved:!1}],["del",{reserved:!1}],["details",{reserved:!1}],["dfn",{reserved:!1}],["dialog",{reserved:!1}],["dir",{reserved:!1}],["div",{reserved:!1}],["dl",{reserved:!1}],["dt",{reserved:!1}],["em",{reserved:!1}],["embed",{reserved:!1}],["fieldset",{reserved:!1}],["figcaption",{reserved:!1}],["figure",{reserved:!1}],["font",{reserved:!1}],["footer",{reserved:!1}],["form",{reserved:!1}],["frame",{reserved:!1}],["frameset",{reserved:!1}],["h1",{reserved:!1}],["h2",{reserved:!1}],["h3",{reserved:!1}],["h4",{reserved:!1}],["h5",{reserved:!1}],["h6",{reserved:!1}],["head",{reserved:!0}],["header",{reserved:!1}],["hgroup",{reserved:!1}],["hr",{reserved:!1}],["html",{reserved:!0}],["i",{reserved:!1}],["iframe",{reserved:!1}],["img",{reserved:!1}],["input",{reserved:!1}],["ins",{reserved:!1}],["kbd",{reserved:!1}],["keygen",{reserved:!1}],["label",{reserved:!1}],["legend",{reserved:!1}],["li",{reserved:!1}],["link",{reserved:!0}],["main",{reserved:!1}],["map",{reserved:!1}],["mark",{reserved:!1}],["marquee",{reserved:!1}],["menu",{reserved:!1}],["menuitem",{reserved:!1}],["meta",{reserved:!0}],["meter",{reserved:!1}],["nav",{reserved:!1}],["noembed",{reserved:!0}],["noscript",{reserved:!0}],["object",{reserved:!1}],["ol",{reserved:!1}],["optgroup",{reserved:!1}],["option",{reserved:!1}],["output",{reserved:!1}],["p",{reserved:!1}],["param",{reserved:!0}],["picture",{reserved:!0}],["pre",{reserved:!1}],["progress",{reserved:!1}],["q",{reserved:!1}],["rp",{reserved:!1}],["rt",{reserved:!1}],["rtc",{reserved:!1}],["ruby",{reserved:!1}],["s",{reserved:!1}],["samp",{reserved:!1}],["script",{reserved:!0}],["section",{reserved:!1}],["select",{reserved:!1}],["small",{reserved:!1}],["source",{reserved:!0}],["spacer",{reserved:!1}],["span",{reserved:!1}],["strike",{reserved:!1}],["strong",{reserved:!1}],["style",{reserved:!0}],["sub",{reserved:!1}],["summary",{reserved:!1}],["sup",{reserved:!1}],["table",{reserved:!1}],["tbody",{reserved:!1}],["td",{reserved:!1}],["textarea",{reserved:!1}],["tfoot",{reserved:!1}],["th",{reserved:!1}],["thead",{reserved:!1}],["time",{reserved:!1}],["title",{reserved:!0}],["tr",{reserved:!1}],["track",{reserved:!0}],["tt",{reserved:!1}],["u",{reserved:!1}],["ul",{reserved:!1}],["var",{reserved:!1}],["video",{reserved:!1}],["wbr",{reserved:!1}],["xmp",{reserved:!1}]],domMap={entries:function entries(){return dom},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(dom);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,key,dom)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=dom.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!domMap.get(key)},keys:function keys(){return dom.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return dom.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(domMap,domMap.entries());exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/elementRoleMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _deepEqual=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/deep-equal/index.js")),_iterationDecorator=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iterationDecorator.js")),_rolesMap=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/rolesMap.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}for(var elementRoles=[],keys=_rolesMap.default.keys(),i=0;i<keys.length;i++){var key=keys[i],role=_rolesMap.default.get(key);if(role)for(var concepts=[].concat(role.baseConcepts,role.relatedConcepts),k=0;k<concepts.length;k++){var relation=concepts[k];if("HTML"===relation.module){var concept=relation.concept;concept&&function(){var conceptStr=JSON.stringify(concept),elementRoleRelation=elementRoles.find((function(relation){return JSON.stringify(relation[0])===conceptStr})),roles=void 0;roles=elementRoleRelation?elementRoleRelation[1]:[];for(var isUnique=!0,_i=0;_i<roles.length;_i++)if(roles[_i]===key){isUnique=!1;break}isUnique&&roles.push(key),elementRoles.push([concept,roles])}()}}}var elementRoleMap={entries:function entries(){return elementRoles},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(elementRoles);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),_key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,_key,elementRoles)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=elementRoles.find((function(tuple){return(0,_deepEqual.default)(key,tuple[0])}));return item&&item[1]},has:function has(key){return!!elementRoleMap.get(key)},keys:function keys(){return elementRoles.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return elementRoles.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(elementRoleMap,elementRoleMap.entries());exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/commandRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"menuitem"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-disabled":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/inputRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null},relatedConcepts:[{concept:{name:"input"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-valuemax":null,"aria-valuemin":null,"aria-valuenow":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{"aria-atomic":null,"aria-busy":null,"aria-controls":null,"aria-current":null,"aria-describedby":null,"aria-details":null,"aria-dropeffect":null,"aria-flowto":null,"aria-grabbed":null,"aria-hidden":null,"aria-keyshortcuts":null,"aria-label":null,"aria-labelledby":null,"aria-live":null,"aria-owns":null,"aria-relevant":null,"aria-roledescription":null},relatedConcepts:[{concept:{name:"rel"},module:"HTML"},{concept:{name:"role"},module:"XHTML"},{concept:{name:"type"},module:"Dublin Core"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"frontmatter"},module:"DTB"},{concept:{name:"level"},module:"DTB"},{concept:{name:"level"},module:"SMIL"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/selectRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","composite"],["roletype","structure","section","group"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/structureRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/windowRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-modal":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _commandRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/commandRole.js")),_compositeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js")),_inputRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/inputRole.js")),_landmarkRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js")),_rangeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js")),_roletypeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js")),_sectionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js")),_sectionheadRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js")),_selectRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/selectRole.js")),_structureRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/structureRole.js")),_widgetRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js")),_windowRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/abstract/windowRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["command",_commandRole.default],["composite",_compositeRole.default],["input",_inputRole.default],["landmark",_landmarkRole.default],["range",_rangeRole.default],["roletype",_roletypeRole.default],["section",_sectionRole.default],["sectionhead",_sectionheadRole.default],["select",_selectRole.default],["structure",_structureRole.default],["widget",_widgetRole.default],["window",_windowRole.default]];exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _docAbstractRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js")),_docAcknowledgmentsRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js")),_docAfterwordRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js")),_docAppendixRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js")),_docBacklinkRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js")),_docBiblioentryRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js")),_docBibliographyRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js")),_docBibliorefRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js")),_docChapterRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js")),_docColophonRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js")),_docConclusionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js")),_docCoverRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js")),_docCreditRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js")),_docCreditsRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js")),_docDedicationRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js")),_docEndnoteRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js")),_docEndnotesRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js")),_docEpigraphRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js")),_docEpilogueRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js")),_docErrataRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js")),_docExampleRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js")),_docFootnoteRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js")),_docForewordRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js")),_docGlossaryRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js")),_docGlossrefRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js")),_docIndexRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js")),_docIntroductionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js")),_docNoterefRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js")),_docNoticeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js")),_docPagebreakRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js")),_docPagelistRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js")),_docPartRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js")),_docPrefaceRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js")),_docPrologueRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js")),_docPullquoteRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js")),_docQnaRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js")),_docSubtitleRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js")),_docTipRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js")),_docTocRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["doc-abstract",_docAbstractRole.default],["doc-acknowledgments",_docAcknowledgmentsRole.default],["doc-afterword",_docAfterwordRole.default],["doc-appendix",_docAppendixRole.default],["doc-backlink",_docBacklinkRole.default],["doc-biblioentry",_docBiblioentryRole.default],["doc-bibliography",_docBibliographyRole.default],["doc-biblioref",_docBibliorefRole.default],["doc-chapter",_docChapterRole.default],["doc-colophon",_docColophonRole.default],["doc-conclusion",_docConclusionRole.default],["doc-cover",_docCoverRole.default],["doc-credit",_docCreditRole.default],["doc-credits",_docCreditsRole.default],["doc-dedication",_docDedicationRole.default],["doc-endnote",_docEndnoteRole.default],["doc-endnotes",_docEndnotesRole.default],["doc-epigraph",_docEpigraphRole.default],["doc-epilogue",_docEpilogueRole.default],["doc-errata",_docErrataRole.default],["doc-example",_docExampleRole.default],["doc-footnote",_docFootnoteRole.default],["doc-foreword",_docForewordRole.default],["doc-glossary",_docGlossaryRole.default],["doc-glossref",_docGlossrefRole.default],["doc-index",_docIndexRole.default],["doc-introduction",_docIntroductionRole.default],["doc-noteref",_docNoterefRole.default],["doc-notice",_docNoticeRole.default],["doc-pagebreak",_docPagebreakRole.default],["doc-pagelist",_docPagelistRole.default],["doc-part",_docPartRole.default],["doc-preface",_docPrefaceRole.default],["doc-prologue",_docPrologueRole.default],["doc-pullquote",_docPullquoteRole.default],["doc-qna",_docQnaRole.default],["doc-subtitle",_docSubtitleRole.default],["doc-tip",_docTipRole.default],["doc-toc",_docTocRole.default]];exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _graphicsDocumentRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js")),_graphicsObjectRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js")),_graphicsSymbolRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["graphics-document",_graphicsDocumentRole.default],["graphics-object",_graphicsObjectRole.default],["graphics-symbol",_graphicsSymbolRole.default]];exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _alertRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/alertRole.js")),_alertdialogRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js")),_applicationRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/applicationRole.js")),_articleRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/articleRole.js")),_bannerRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/bannerRole.js")),_blockquoteRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js")),_buttonRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/buttonRole.js")),_captionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/captionRole.js")),_cellRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/cellRole.js")),_checkboxRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js")),_codeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/codeRole.js")),_columnheaderRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js")),_comboboxRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js")),_complementaryRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js")),_contentinfoRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js")),_definitionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/definitionRole.js")),_deletionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/deletionRole.js")),_dialogRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/dialogRole.js")),_directoryRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/directoryRole.js")),_documentRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/documentRole.js")),_emphasisRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js")),_feedRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/feedRole.js")),_figureRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/figureRole.js")),_formRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/formRole.js")),_genericRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/genericRole.js")),_gridRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/gridRole.js")),_gridcellRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js")),_groupRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/groupRole.js")),_headingRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/headingRole.js")),_imgRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/imgRole.js")),_insertionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/insertionRole.js")),_linkRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/linkRole.js")),_listRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/listRole.js")),_listboxRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/listboxRole.js")),_listitemRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/listitemRole.js")),_logRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/logRole.js")),_mainRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/mainRole.js")),_marqueeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js")),_mathRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/mathRole.js")),_menuRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuRole.js")),_menubarRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menubarRole.js")),_menuitemRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js")),_menuitemcheckboxRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js")),_menuitemradioRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js")),_meterRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/meterRole.js")),_navigationRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/navigationRole.js")),_noneRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/noneRole.js")),_noteRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/noteRole.js")),_optionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/optionRole.js")),_paragraphRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js")),_presentationRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/presentationRole.js")),_progressbarRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js")),_radioRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/radioRole.js")),_radiogroupRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js")),_regionRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/regionRole.js")),_rowRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/rowRole.js")),_rowgroupRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js")),_rowheaderRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js")),_scrollbarRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js")),_searchRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/searchRole.js")),_searchboxRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js")),_separatorRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/separatorRole.js")),_sliderRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/sliderRole.js")),_spinbuttonRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js")),_statusRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/statusRole.js")),_strongRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/strongRole.js")),_subscriptRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js")),_superscriptRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js")),_switchRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/switchRole.js")),_tabRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tabRole.js")),_tableRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tableRole.js")),_tablistRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tablistRole.js")),_tabpanelRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js")),_termRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/termRole.js")),_textboxRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/textboxRole.js")),_timeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/timeRole.js")),_timerRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/timerRole.js")),_toolbarRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js")),_tooltipRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js")),_treeRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/treeRole.js")),_treegridRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/treegridRole.js")),_treeitemRole=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["alert",_alertRole.default],["alertdialog",_alertdialogRole.default],["application",_applicationRole.default],["article",_articleRole.default],["banner",_bannerRole.default],["blockquote",_blockquoteRole.default],["button",_buttonRole.default],["caption",_captionRole.default],["cell",_cellRole.default],["checkbox",_checkboxRole.default],["code",_codeRole.default],["columnheader",_columnheaderRole.default],["combobox",_comboboxRole.default],["complementary",_complementaryRole.default],["contentinfo",_contentinfoRole.default],["definition",_definitionRole.default],["deletion",_deletionRole.default],["dialog",_dialogRole.default],["directory",_directoryRole.default],["document",_documentRole.default],["emphasis",_emphasisRole.default],["feed",_feedRole.default],["figure",_figureRole.default],["form",_formRole.default],["generic",_genericRole.default],["grid",_gridRole.default],["gridcell",_gridcellRole.default],["group",_groupRole.default],["heading",_headingRole.default],["img",_imgRole.default],["insertion",_insertionRole.default],["link",_linkRole.default],["list",_listRole.default],["listbox",_listboxRole.default],["listitem",_listitemRole.default],["log",_logRole.default],["main",_mainRole.default],["marquee",_marqueeRole.default],["math",_mathRole.default],["menu",_menuRole.default],["menubar",_menubarRole.default],["menuitem",_menuitemRole.default],["menuitemcheckbox",_menuitemcheckboxRole.default],["menuitemradio",_menuitemradioRole.default],["meter",_meterRole.default],["navigation",_navigationRole.default],["none",_noneRole.default],["note",_noteRole.default],["option",_optionRole.default],["paragraph",_paragraphRole.default],["presentation",_presentationRole.default],["progressbar",_progressbarRole.default],["radio",_radioRole.default],["radiogroup",_radiogroupRole.default],["region",_regionRole.default],["row",_rowRole.default],["rowgroup",_rowgroupRole.default],["rowheader",_rowheaderRole.default],["scrollbar",_scrollbarRole.default],["search",_searchRole.default],["searchbox",_searchboxRole.default],["separator",_separatorRole.default],["slider",_sliderRole.default],["spinbutton",_spinbuttonRole.default],["status",_statusRole.default],["strong",_strongRole.default],["subscript",_subscriptRole.default],["superscript",_superscriptRole.default],["switch",_switchRole.default],["tab",_tabRole.default],["table",_tableRole.default],["tablist",_tablistRole.default],["tabpanel",_tabpanelRole.default],["term",_termRole.default],["textbox",_textboxRole.default],["time",_timeRole.default],["timer",_timerRole.default],["toolbar",_toolbarRole.default],["tooltip",_tooltipRole.default],["tree",_treeRole.default],["treegrid",_treegridRole.default],["treeitem",_treeitemRole.default]];exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"abstract [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"acknowledgments [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"afterword [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"appendix [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","content"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"referrer [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"EPUB biblioentry [EPUB-SSV]"},module:"EPUB"}],requireContextRole:["doc-bibliography"],requiredContextRole:["doc-bibliography"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","listitem"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"bibliography [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["doc-biblioentry"]],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"biblioref [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"chapter [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"colophon [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"conclusion [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"cover [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","img"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"credit [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"credits [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"dedication [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"rearnote [EPUB-SSV]"},module:"EPUB"}],requireContextRole:["doc-endnotes"],requiredContextRole:["doc-endnotes"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","listitem"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"rearnotes [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["doc-endnote"]],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"epigraph [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"epilogue [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"errata [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"footnote [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"foreword [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"glossary [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["definition"],["term"]],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"glossref [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"index [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark","navigation"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"introduction [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"noteref [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"notice [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","note"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"pagebreak [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","separator"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"page-list [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark","navigation"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"part [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"preface [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"prologue [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"pullquote [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["none"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"qna [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"subtitle [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"help [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","note"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"toc [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark","navigation"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{module:"GRAPHICS",concept:{name:"graphics-object"}},{module:"ARIA",concept:{name:"img"}},{module:"ARIA",concept:{name:"article"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","document"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{module:"GRAPHICS",concept:{name:"graphics-document"}},{module:"ARIA",concept:{name:"group"}},{module:"ARIA",concept:{name:"img"}},{module:"GRAPHICS",concept:{name:"graphics-symbol"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","group"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","img"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/alertRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-atomic":"true","aria-live":"assertive"},relatedConcepts:[{concept:{name:"alert"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"alert"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","alert"],["roletype","window","dialog"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/applicationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"Device Independence Delivery Unit"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/articleRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{name:"article"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","document"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/bannerRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{constraints:["direct descendant of document"],name:"header"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/buttonRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null,"aria-pressed":null},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"aria-pressed"},{name:"type",value:"checkbox"}],name:"input"},module:"HTML"},{concept:{attributes:[{name:"aria-expanded",value:"false"}],name:"summary"},module:"HTML"},{concept:{attributes:[{name:"aria-expanded",value:"true"}],constraints:["direct descendant of details element with the open attribute defined"],name:"summary"},module:"HTML"},{concept:{attributes:[{name:"type",value:"button"}],name:"input"},module:"HTML"},{concept:{attributes:[{name:"type",value:"image"}],name:"input"},module:"HTML"},{concept:{attributes:[{name:"type",value:"reset"}],name:"input"},module:"HTML"},{concept:{attributes:[{name:"type",value:"submit"}],name:"input"},module:"HTML"},{concept:{name:"button"},module:"HTML"},{concept:{name:"trigger"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/captionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:["figure","grid","table"],requiredContextRole:["figure","grid","table"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/cellRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-colindex":null,"aria-colspan":null,"aria-rowindex":null,"aria-rowspan":null},relatedConcepts:[{concept:{constraints:["descendant of table"],name:"td"},module:"HTML"}],requireContextRole:["row"],requiredContextRole:["row"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-checked":null,"aria-errormessage":null,"aria-expanded":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null},relatedConcepts:[{concept:{attributes:[{name:"type",value:"checkbox"}],name:"input"},module:"HTML"},{concept:{name:"option"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/codeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-sort":null},relatedConcepts:[{attributes:[{name:"scope",value:"col"}],concept:{name:"th"},module:"HTML"}],requireContextRole:["row"],requiredContextRole:["row"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","cell"],["roletype","structure","section","cell","gridcell"],["roletype","widget","gridcell"],["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-autocomplete":null,"aria-errormessage":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null,"aria-expanded":"false","aria-haspopup":"listbox"},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"email"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"search"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"tel"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"text"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"url"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"url"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"multiple"},{constraints:["undefined"],name:"size"}],name:"select"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"multiple"},{name:"size",value:1}],name:"select"},module:"HTML"},{concept:{name:"select"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-controls":null,"aria-expanded":"false"},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"aside"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{constraints:["direct descendant of document"],name:"footer"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/definitionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"dd"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/deletionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/dialogRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"dialog"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","window"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/directoryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{module:"DAISY Guide"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","list"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/documentRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"Device Independence Delivery Unit"}},{concept:{name:"body"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/feedRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["article"]],requiredProps:{},superClass:[["roletype","structure","section","list"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/figureRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"figure"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/formRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"aria-label"}],name:"form"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"aria-labelledby"}],name:"form"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"name"}],name:"form"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/genericRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"span"},module:"HTML"},{concept:{name:"div"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/gridRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-multiselectable":null,"aria-readonly":null},relatedConcepts:[{concept:{attributes:[{name:"role",value:"grid"}],name:"table"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["row"],["row","rowgroup"]],requiredProps:{},superClass:[["roletype","widget","composite"],["roletype","structure","section","table"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null,"aria-selected":null},relatedConcepts:[{concept:{attributes:[{name:"role",value:"gridcell"}],name:"td"},module:"HTML"}],requireContextRole:["row"],requiredContextRole:["row"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","cell"],["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/groupRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-disabled":null},relatedConcepts:[{concept:{name:"details"},module:"HTML"},{concept:{name:"fieldset"},module:"HTML"},{concept:{name:"optgroup"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/headingRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-level":"2"},relatedConcepts:[{concept:{name:"h1"},module:"HTML"},{concept:{name:"h2"},module:"HTML"},{concept:{name:"h3"},module:"HTML"},{concept:{name:"h4"},module:"HTML"},{concept:{name:"h5"},module:"HTML"},{concept:{name:"h6"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-level":"2"},superClass:[["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/imgRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"alt"}],name:"img"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"alt"}],name:"img"},module:"HTML"},{concept:{name:"imggroup"},module:"DTB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/insertionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/linkRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null},relatedConcepts:[{concept:{attributes:[{name:"href"}],name:"a"},module:"HTML"},{concept:{attributes:[{name:"href"}],name:"area"},module:"HTML"},{concept:{attributes:[{name:"href"}],name:"link"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/listRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"menu"},module:"HTML"},{concept:{name:"ol"},module:"HTML"},{concept:{name:"ul"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["listitem"]],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/listboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-expanded":null,"aria-invalid":null,"aria-multiselectable":null,"aria-readonly":null,"aria-required":null,"aria-orientation":"vertical"},relatedConcepts:[{concept:{attributes:[{constraints:[">1"],name:"size"},{name:"multiple"}],name:"select"},module:"HTML"},{concept:{attributes:[{constraints:[">1"],name:"size"}],name:"select"},module:"HTML"},{concept:{attributes:[{name:"multiple"}],name:"select"},module:"HTML"},{concept:{name:"datalist"},module:"HTML"},{concept:{name:"list"},module:"ARIA"},{concept:{name:"select"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["option","group"],["option"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/listitemRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-level":null,"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{constraints:["direct descendant of ol, ul or menu"],name:"li"},module:"HTML"},{concept:{name:"item"},module:"XForms"}],requireContextRole:["directory","list"],requiredContextRole:["directory","list"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/logRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-live":"polite"},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/mainRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"main"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/mathRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"math"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":"vertical"},relatedConcepts:[{concept:{name:"MENU"},module:"JAPI"},{concept:{name:"list"},module:"ARIA"},{concept:{name:"select"},module:"XForms"},{concept:{name:"sidebar"},module:"DTB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["menuitem","group"],["menuitemradio","group"],["menuitemcheckbox","group"],["menuitem"],["menuitemcheckbox"],["menuitemradio"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menubarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":"horizontal"},relatedConcepts:[{concept:{name:"toolbar"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["menuitem","group"],["menuitemradio","group"],["menuitemcheckbox","group"],["menuitem"],["menuitemcheckbox"],["menuitemradio"]],requiredProps:{},superClass:[["roletype","widget","composite","select","menu"],["roletype","structure","section","group","select","menu"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null,"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{name:"MENU_ITEM"},module:"JAPI"},{concept:{name:"listitem"},module:"ARIA"},{concept:{name:"menuitem"},module:"HTML"},{concept:{name:"option"},module:"ARIA"}],requireContextRole:["group","menu","menubar"],requiredContextRole:["group","menu","menubar"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"menuitem"},module:"ARIA"}],requireContextRole:["group","menu","menubar"],requiredContextRole:["group","menu","menubar"],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input","checkbox"],["roletype","widget","command","menuitem"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"menuitem"},module:"ARIA"}],requireContextRole:["group","menu","menubar"],requiredContextRole:["group","menu","menubar"],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input","checkbox","menuitemcheckbox"],["roletype","widget","command","menuitem","menuitemcheckbox"],["roletype","widget","input","radio"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/meterRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-valuetext":null,"aria-valuemax":"100","aria-valuemin":"0"},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-valuenow":null},superClass:[["roletype","structure","range"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/navigationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"nav"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/noneRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/noteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/optionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-checked":null,"aria-posinset":null,"aria-setsize":null,"aria-selected":"false"},relatedConcepts:[{concept:{name:"item"},module:"XForms"},{concept:{name:"listitem"},module:"ARIA"},{concept:{name:"option"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-selected":"false"},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/presentationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-valuetext":null},relatedConcepts:[{concept:{name:"progress"},module:"HTML"},{concept:{name:"status"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","range"],["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/radioRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-checked":null,"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{attributes:[{name:"type",value:"radio"}],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null},relatedConcepts:[{concept:{name:"list"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["radio"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/regionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"aria-label"}],name:"section"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"aria-labelledby"}],name:"section"},module:"HTML"},{concept:{name:"Device Independence Glossart perceivable unit"}},{concept:{name:"frame"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/rowRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-colindex":null,"aria-expanded":null,"aria-level":null,"aria-posinset":null,"aria-rowindex":null,"aria-selected":null,"aria-setsize":null},relatedConcepts:[{concept:{name:"tr"},module:"HTML"}],requireContextRole:["grid","rowgroup","table","treegrid"],requiredContextRole:["grid","rowgroup","table","treegrid"],requiredOwnedElements:[["cell"],["columnheader"],["gridcell"],["rowheader"]],requiredProps:{},superClass:[["roletype","structure","section","group"],["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"tbody"},module:"HTML"},{concept:{name:"tfoot"},module:"HTML"},{concept:{name:"thead"},module:"HTML"}],requireContextRole:["grid","table","treegrid"],requiredContextRole:["grid","table","treegrid"],requiredOwnedElements:[["row"]],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-sort":null},relatedConcepts:[{concept:{attributes:[{name:"scope",value:"row"}],name:"th"},module:"HTML"},{concept:{attributes:[{name:"scope",value:"rowgroup"}],name:"th"},module:"HTML"}],requireContextRole:["row","rowgroup"],requiredContextRole:["row","rowgroup"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","cell"],["roletype","structure","section","cell","gridcell"],["roletype","widget","gridcell"],["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-valuetext":null,"aria-orientation":"vertical","aria-valuemax":"100","aria-valuemin":"0"},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-controls":null,"aria-valuenow":null},superClass:[["roletype","structure","range"],["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/searchRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"search"}],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","input","textbox"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/separatorRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-orientation":"horizontal","aria-valuemax":"100","aria-valuemin":"0","aria-valuenow":null,"aria-valuetext":null},relatedConcepts:[{concept:{name:"hr"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/sliderRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-haspopup":null,"aria-invalid":null,"aria-readonly":null,"aria-valuetext":null,"aria-orientation":"horizontal","aria-valuemax":"100","aria-valuemin":"0"},relatedConcepts:[{concept:{attributes:[{name:"type",value:"range"}],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-valuenow":null},superClass:[["roletype","widget","input"],["roletype","structure","range"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null,"aria-valuetext":null,"aria-valuenow":"0"},relatedConcepts:[{concept:{attributes:[{name:"type",value:"number"}],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","composite"],["roletype","widget","input"],["roletype","structure","range"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/statusRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-atomic":"true","aria-live":"polite"},relatedConcepts:[{concept:{name:"output"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/strongRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/switchRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"button"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input","checkbox"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tabRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null,"aria-posinset":null,"aria-setsize":null,"aria-selected":"false"},relatedConcepts:[],requireContextRole:["tablist"],requiredContextRole:["tablist"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","sectionhead"],["roletype","widget"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tableRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-colcount":null,"aria-rowcount":null},relatedConcepts:[{concept:{name:"table"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["row"],["row","rowgroup"]],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tablistRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-level":null,"aria-multiselectable":null,"aria-orientation":"horizontal"},relatedConcepts:[{module:"DAISY",concept:{name:"guide"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["tab"]],requiredProps:{},superClass:[["roletype","widget","composite"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/termRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"dfn"},module:"HTML"},{concept:{name:"dt"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/textboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-autocomplete":null,"aria-errormessage":null,"aria-haspopup":null,"aria-invalid":null,"aria-multiline":null,"aria-placeholder":null,"aria-readonly":null,"aria-required":null},relatedConcepts:[{concept:{attributes:[{constraints:["undefined"],name:"type"},{constraints:["undefined"],name:"list"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"email"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"tel"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"text"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"url"}],name:"input"},module:"HTML"},{concept:{name:"input"},module:"XForms"},{concept:{name:"textarea"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/timeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/timerRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","status"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":"horizontal"},relatedConcepts:[{concept:{name:"menubar"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","group"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/treeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null,"aria-multiselectable":null,"aria-required":null,"aria-orientation":"vertical"},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["treeitem","group"],["treeitem"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/treegridRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["row"],["row","rowgroup"]],requiredProps:{},superClass:[["roletype","widget","composite","grid"],["roletype","structure","section","table","grid"],["roletype","widget","composite","select","tree"],["roletype","structure","section","group","select","tree"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-expanded":null,"aria-haspopup":null},relatedConcepts:[],requireContextRole:["group","tree"],requiredContextRole:["group","tree"],requiredOwnedElements:[],requiredProps:{"aria-selected":null},superClass:[["roletype","structure","section","listitem"],["roletype","widget","input","option"]]};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/index.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";exports.uJ=exports.UN=exports.Qv=void 0;var _ariaPropsMap=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/ariaPropsMap.js")),_domMap=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/domMap.js")),_rolesMap=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/rolesMap.js")),_elementRoleMap=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/elementRoleMap.js")),_roleElementMap=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/roleElementMap.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}_ariaPropsMap.default,_domMap.default;var roles=_rolesMap.default;exports.uJ=roles;var elementRoles=_elementRoleMap.default;exports.Qv=elementRoles;var roleElements=_roleElementMap.default;exports.UN=roleElements},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/roleElementMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _iterationDecorator=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iterationDecorator.js")),_rolesMap=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/rolesMap.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}for(var roleElement=[],keys=_rolesMap.default.keys(),_loop=function _loop(i){var key=keys[i],role=_rolesMap.default.get(key);if(role)for(var concepts=[].concat(role.baseConcepts,role.relatedConcepts),k=0;k<concepts.length;k++){var relation=concepts[k];if("HTML"===relation.module){var concept=relation.concept;if(concept){var roleElementRelation=roleElement.find((function(item){return item[0]===key})),relationConcepts=void 0;(relationConcepts=roleElementRelation?roleElementRelation[1]:[]).push(concept),roleElement.push([key,relationConcepts])}}}},i=0;i<keys.length;i++)_loop(i);var roleElementMap={entries:function entries(){return roleElement},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(roleElement);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,key,roleElement)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=roleElement.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!roleElementMap.get(key)},keys:function keys(){return roleElement.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return roleElement.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(roleElementMap,roleElementMap.entries());exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/rolesMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _ariaAbstractRoles=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js")),_ariaLiteralRoles=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js")),_ariaDpubRoles=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js")),_ariaGraphicsRoles=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js")),_iterationDecorator=_interopRequireDefault(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iterationDecorator.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var roles=[].concat(_ariaAbstractRoles.default,_ariaLiteralRoles.default,_ariaDpubRoles.default,_ariaGraphicsRoles.default);roles.forEach((function(_ref){var _step,roleDefinition=_slicedToArray(_ref,2)[1],_iterator=_createForOfIteratorHelper(roleDefinition.superClass);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step2,_iterator2=_createForOfIteratorHelper(_step.value);try{var _loop=function _loop(){var obj,key,value,superClassName=_step2.value,superClassRoleTuple=roles.find((function(_ref3){return _slicedToArray(_ref3,1)[0]===superClassName}));if(superClassRoleTuple)for(var superClassDefinition=superClassRoleTuple[1],_i2=0,_Object$keys=Object.keys(superClassDefinition.props);_i2<_Object$keys.length;_i2++){var prop=_Object$keys[_i2];Object.prototype.hasOwnProperty.call(roleDefinition.props,prop)||Object.assign(roleDefinition.props,(obj={},key=prop,value=superClassDefinition.props[prop],key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj))}};for(_iterator2.s();!(_step2=_iterator2.n()).done;)_loop()}catch(err){_iterator2.e(err)}finally{_iterator2.f()}}}catch(err){_iterator.e(err)}finally{_iterator.f()}}));var rolesMap={entries:function entries(){return roles},forEach:function forEach(fn){var _step3,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator3=_createForOfIteratorHelper(roles);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _step3$value=_slicedToArray(_step3.value,2),key=_step3$value[0],values=_step3$value[1];fn.call(thisArg,values,key,roles)}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}},get:function get(key){var item=roles.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!rolesMap.get(key)},keys:function keys(){return roles.map((function(_ref5){return _slicedToArray(_ref5,1)[0]}))},values:function values(){return roles.map((function(_ref7){return _slicedToArray(_ref7,2)[1]}))}},_default=(0,_iterationDecorator.default)(rolesMap,rolesMap.entries());exports.default=_default},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iterationDecorator.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function iterationDecorator(collection,entries){"function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)&&Object.defineProperty(collection,Symbol.iterator,{value:_iteratorProxy.default.bind(entries)});return collection};var _iteratorProxy=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iteratorProxy.js"));function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}},"./node_modules/@testing-library/dom/node_modules/aria-query/lib/util/iteratorProxy.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=function iteratorProxy(){var values=this,index=0,iter={"@@iterator":function iterator(){return iter},next:function next(){if(index<values.length){var value=values[index];return index+=1,{done:!1,value:value}}return{done:!0}}};return iter};exports.default=_default},"./node_modules/@testing-library/dom/node_modules/deep-equal/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var assign=__webpack_require__("./node_modules/object.assign/index.js"),callBound=__webpack_require__("./node_modules/call-bind/callBound.js"),flags=__webpack_require__("./node_modules/regexp.prototype.flags/index.js"),GetIntrinsic=__webpack_require__("./node_modules/get-intrinsic/index.js"),getIterator=__webpack_require__("./node_modules/es-get-iterator/index.js"),getSideChannel=__webpack_require__("./node_modules/side-channel/index.js"),is=__webpack_require__("./node_modules/object-is/index.js"),isArguments=__webpack_require__("./node_modules/is-arguments/index.js"),isArray=__webpack_require__("./node_modules/@testing-library/dom/node_modules/isarray/index.js"),isArrayBuffer=__webpack_require__("./node_modules/is-array-buffer/index.js"),isDate=__webpack_require__("./node_modules/is-date-object/index.js"),isRegex=__webpack_require__("./node_modules/is-regex/index.js"),isSharedArrayBuffer=__webpack_require__("./node_modules/is-shared-array-buffer/index.js"),objectKeys=__webpack_require__("./node_modules/object-keys/index.js"),whichBoxedPrimitive=__webpack_require__("./node_modules/which-boxed-primitive/index.js"),whichCollection=__webpack_require__("./node_modules/which-collection/index.js"),whichTypedArray=__webpack_require__("./node_modules/which-typed-array/index.js"),byteLength=__webpack_require__("./node_modules/array-buffer-byte-length/index.js"),sabByteLength=callBound("SharedArrayBuffer.prototype.byteLength",!0),$getTime=callBound("Date.prototype.getTime"),gPO=Object.getPrototypeOf,$objToString=callBound("Object.prototype.toString"),$Set=GetIntrinsic("%Set%",!0),$mapHas=callBound("Map.prototype.has",!0),$mapGet=callBound("Map.prototype.get",!0),$mapSize=callBound("Map.prototype.size",!0),$setAdd=callBound("Set.prototype.add",!0),$setDelete=callBound("Set.prototype.delete",!0),$setHas=callBound("Set.prototype.has",!0),$setSize=callBound("Set.prototype.size",!0);function setHasEqualElement(set,val1,opts,channel){for(var result,i=getIterator(set);(result=i.next())&&!result.done;)if(internalDeepEqual(val1,result.value,opts,channel))return $setDelete(set,result.value),!0;return!1}function findLooseMatchingPrimitives(prim){return void 0===prim?null:"object"!=typeof prim?"symbol"!=typeof prim&&("string"!=typeof prim&&"number"!=typeof prim||+prim==+prim):void 0}function mapMightHaveLoosePrim(a,b,prim,item,opts,channel){var altValue=findLooseMatchingPrimitives(prim);if(null!=altValue)return altValue;var curB=$mapGet(b,altValue),looseOpts=assign({},opts,{strict:!1});return!(void 0===curB&&!$mapHas(b,altValue)||!internalDeepEqual(item,curB,looseOpts,channel))&&(!$mapHas(a,altValue)&&internalDeepEqual(item,curB,looseOpts,channel))}function setMightHaveLoosePrim(a,b,prim){var altValue=findLooseMatchingPrimitives(prim);return null!=altValue?altValue:$setHas(b,altValue)&&!$setHas(a,altValue)}function mapHasEqualEntry(set,map,key1,item1,opts,channel){for(var result,key2,i=getIterator(set);(result=i.next())&&!result.done;)if(internalDeepEqual(key1,key2=result.value,opts,channel)&&internalDeepEqual(item1,$mapGet(map,key2),opts,channel))return $setDelete(set,key2),!0;return!1}function internalDeepEqual(actual,expected,options,channel){var opts=options||{};if(opts.strict?is(actual,expected):actual===expected)return!0;if(whichBoxedPrimitive(actual)!==whichBoxedPrimitive(expected))return!1;if(!actual||!expected||"object"!=typeof actual&&"object"!=typeof expected)return opts.strict?is(actual,expected):actual==expected;var sentinel,hasActual=channel.has(actual),hasExpected=channel.has(expected);if(hasActual&&hasExpected){if(channel.get(actual)===channel.get(expected))return!0}else sentinel={};return hasActual||channel.set(actual,sentinel),hasExpected||channel.set(expected,sentinel),function objEquiv(a,b,opts,channel){var i,key;if(typeof a!=typeof b)return!1;if(null==a||null==b)return!1;if($objToString(a)!==$objToString(b))return!1;if(isArguments(a)!==isArguments(b))return!1;var aIsArray=isArray(a),bIsArray=isArray(b);if(aIsArray!==bIsArray)return!1;var aIsError=a instanceof Error,bIsError=b instanceof Error;if(aIsError!==bIsError)return!1;if((aIsError||bIsError)&&(a.name!==b.name||a.message!==b.message))return!1;var aIsRegex=isRegex(a),bIsRegex=isRegex(b);if(aIsRegex!==bIsRegex)return!1;if((aIsRegex||bIsRegex)&&(a.source!==b.source||flags(a)!==flags(b)))return!1;var aIsDate=isDate(a),bIsDate=isDate(b);if(aIsDate!==bIsDate)return!1;if((aIsDate||bIsDate)&&$getTime(a)!==$getTime(b))return!1;if(opts.strict&&gPO&&gPO(a)!==gPO(b))return!1;var aWhich=whichTypedArray(a),bWhich=whichTypedArray(b);if(aWhich!==bWhich)return!1;if(aWhich||bWhich){if(a.length!==b.length)return!1;for(i=0;i<a.length;i++)if(a[i]!==b[i])return!1;return!0}var aIsBuffer=isBuffer(a),bIsBuffer=isBuffer(b);if(aIsBuffer!==bIsBuffer)return!1;if(aIsBuffer||bIsBuffer){if(a.length!==b.length)return!1;for(i=0;i<a.length;i++)if(a[i]!==b[i])return!1;return!0}var aIsArrayBuffer=isArrayBuffer(a),bIsArrayBuffer=isArrayBuffer(b);if(aIsArrayBuffer!==bIsArrayBuffer)return!1;if(aIsArrayBuffer||bIsArrayBuffer)return byteLength(a)===byteLength(b)&&("function"==typeof Uint8Array&&internalDeepEqual(new Uint8Array(a),new Uint8Array(b),opts,channel));var aIsSAB=isSharedArrayBuffer(a),bIsSAB=isSharedArrayBuffer(b);if(aIsSAB!==bIsSAB)return!1;if(aIsSAB||bIsSAB)return sabByteLength(a)===sabByteLength(b)&&("function"==typeof Uint8Array&&internalDeepEqual(new Uint8Array(a),new Uint8Array(b),opts,channel));if(typeof a!=typeof b)return!1;var ka=objectKeys(a),kb=objectKeys(b);if(ka.length!==kb.length)return!1;for(ka.sort(),kb.sort(),i=ka.length-1;i>=0;i--)if(ka[i]!=kb[i])return!1;for(i=ka.length-1;i>=0;i--)if(!internalDeepEqual(a[key=ka[i]],b[key],opts,channel))return!1;var aCollection=whichCollection(a),bCollection=whichCollection(b);if(aCollection!==bCollection)return!1;if("Set"===aCollection||"Set"===bCollection)return function setEquiv(a,b,opts,channel){if($setSize(a)!==$setSize(b))return!1;var resultA,resultB,set,iA=getIterator(a),iB=getIterator(b);for(;(resultA=iA.next())&&!resultA.done;)if(resultA.value&&"object"==typeof resultA.value)set||(set=new $Set),$setAdd(set,resultA.value);else if(!$setHas(b,resultA.value)){if(opts.strict)return!1;if(!setMightHaveLoosePrim(a,b,resultA.value))return!1;set||(set=new $Set),$setAdd(set,resultA.value)}if(set){for(;(resultB=iB.next())&&!resultB.done;)if(resultB.value&&"object"==typeof resultB.value){if(!setHasEqualElement(set,resultB.value,opts.strict,channel))return!1}else if(!opts.strict&&!$setHas(a,resultB.value)&&!setHasEqualElement(set,resultB.value,opts.strict,channel))return!1;return 0===$setSize(set)}return!0}(a,b,opts,channel);if("Map"===aCollection)return function mapEquiv(a,b,opts,channel){if($mapSize(a)!==$mapSize(b))return!1;var resultA,resultB,set,key,item1,item2,iA=getIterator(a),iB=getIterator(b);for(;(resultA=iA.next())&&!resultA.done;)if(key=resultA.value[0],item1=resultA.value[1],key&&"object"==typeof key)set||(set=new $Set),$setAdd(set,key);else if(void 0===(item2=$mapGet(b,key))&&!$mapHas(b,key)||!internalDeepEqual(item1,item2,opts,channel)){if(opts.strict)return!1;if(!mapMightHaveLoosePrim(a,b,key,item1,opts,channel))return!1;set||(set=new $Set),$setAdd(set,key)}if(set){for(;(resultB=iB.next())&&!resultB.done;)if(key=resultB.value[0],item2=resultB.value[1],key&&"object"==typeof key){if(!mapHasEqualEntry(set,a,key,item2,opts,channel))return!1}else if(!(opts.strict||a.has(key)&&internalDeepEqual($mapGet(a,key),item2,opts,channel)||mapHasEqualEntry(set,a,key,item2,assign({},opts,{strict:!1}),channel)))return!1;return 0===$setSize(set)}return!0}(a,b,opts,channel);return!0}(actual,expected,opts,channel)}function isBuffer(x){return!(!x||"object"!=typeof x||"number"!=typeof x.length)&&("function"==typeof x.copy&&"function"==typeof x.slice&&(!(x.length>0&&"number"!=typeof x[0])&&!!(x.constructor&&x.constructor.isBuffer&&x.constructor.isBuffer(x))))}module.exports=function deepEqual(a,b,opts){return internalDeepEqual(a,b,opts,getSideChannel())}},"./node_modules/@testing-library/dom/node_modules/isarray/index.js":function(module){var toString={}.toString;module.exports=Array.isArray||function(arr){return"[object Array]"==toString.call(arr)}},"./node_modules/@testing-library/jest-dom/node_modules/ansi-styles/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";module=__webpack_require__.nmd(module);const wrapAnsi16=(fn,offset)=>(...args)=>`[${fn(...args)+offset}m`,wrapAnsi256=(fn,offset)=>(...args)=>{const code=fn(...args);return`[${38+offset};5;${code}m`},wrapAnsi16m=(fn,offset)=>(...args)=>{const rgb=fn(...args);return`[${38+offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`},ansi2ansi=n=>n,rgb2rgb=(r,g,b)=>[r,g,b],setLazyProperty=(object,property,get)=>{Object.defineProperty(object,property,{get:()=>{const value=get();return Object.defineProperty(object,property,{value:value,enumerable:!0,configurable:!0}),value},enumerable:!0,configurable:!0})};let colorConvert;const makeDynamicStyles=(wrap,targetSpace,identity,isBackground)=>{void 0===colorConvert&&(colorConvert=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/color-convert/index.js"));const offset=isBackground?10:0,styles={};for(const[sourceSpace,suite]of Object.entries(colorConvert)){const name="ansi16"===sourceSpace?"ansi":sourceSpace;sourceSpace===targetSpace?styles[name]=wrap(identity,offset):"object"==typeof suite&&(styles[name]=wrap(suite[targetSpace],offset))}return styles};Object.defineProperty(module,"exports",{enumerable:!0,get:function assembleStyles(){const codes=new Map,styles={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};styles.color.gray=styles.color.blackBright,styles.bgColor.bgGray=styles.bgColor.bgBlackBright,styles.color.grey=styles.color.blackBright,styles.bgColor.bgGrey=styles.bgColor.bgBlackBright;for(const[groupName,group]of Object.entries(styles)){for(const[styleName,style]of Object.entries(group))styles[styleName]={open:`[${style[0]}m`,close:`[${style[1]}m`},group[styleName]=styles[styleName],codes.set(style[0],style[1]);Object.defineProperty(styles,groupName,{value:group,enumerable:!1})}return Object.defineProperty(styles,"codes",{value:codes,enumerable:!1}),styles.color.close="[39m",styles.bgColor.close="[49m",setLazyProperty(styles.color,"ansi",(()=>makeDynamicStyles(wrapAnsi16,"ansi16",ansi2ansi,!1))),setLazyProperty(styles.color,"ansi256",(()=>makeDynamicStyles(wrapAnsi256,"ansi256",ansi2ansi,!1))),setLazyProperty(styles.color,"ansi16m",(()=>makeDynamicStyles(wrapAnsi16m,"rgb",rgb2rgb,!1))),setLazyProperty(styles.bgColor,"ansi",(()=>makeDynamicStyles(wrapAnsi16,"ansi16",ansi2ansi,!0))),setLazyProperty(styles.bgColor,"ansi256",(()=>makeDynamicStyles(wrapAnsi256,"ansi256",ansi2ansi,!0))),setLazyProperty(styles.bgColor,"ansi16m",(()=>makeDynamicStyles(wrapAnsi16m,"rgb",rgb2rgb,!0))),styles}})},"./node_modules/@testing-library/jest-dom/node_modules/chalk/source/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";const ansiStyles=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/ansi-styles/index.js"),{stdout:stdoutColor,stderr:stderrColor}=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/supports-color/browser.js"),{stringReplaceAll:stringReplaceAll,stringEncaseCRLFWithFirstIndex:stringEncaseCRLFWithFirstIndex}=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/chalk/source/util.js"),levelMapping=["ansi","ansi","ansi256","ansi16m"],styles=Object.create(null);class ChalkClass{constructor(options){return chalkFactory(options)}}const chalkFactory=options=>{const chalk={};return((object,options={})=>{if(options.level>3||options.level<0)throw new Error("The `level` option should be an integer from 0 to 3");const colorLevel=stdoutColor?stdoutColor.level:0;object.level=void 0===options.level?colorLevel:options.level})(chalk,options),chalk.template=(...arguments_)=>chalkTag(chalk.template,...arguments_),Object.setPrototypeOf(chalk,Chalk.prototype),Object.setPrototypeOf(chalk.template,chalk),chalk.template.constructor=()=>{throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.")},chalk.template.Instance=ChalkClass,chalk.template};function Chalk(options){return chalkFactory(options)}for(const[styleName,style]of Object.entries(ansiStyles))styles[styleName]={get(){const builder=createBuilder(this,createStyler(style.open,style.close,this._styler),this._isEmpty);return Object.defineProperty(this,styleName,{value:builder}),builder}};styles.visible={get(){const builder=createBuilder(this,this._styler,!0);return Object.defineProperty(this,"visible",{value:builder}),builder}};const usedModels=["rgb","hex","keyword","hsl","hsv","hwb","ansi","ansi256"];for(const model of usedModels)styles[model]={get(){const{level:level}=this;return function(...arguments_){const styler=createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_),ansiStyles.color.close,this._styler);return createBuilder(this,styler,this._isEmpty)}}};for(const model of usedModels){styles["bg"+model[0].toUpperCase()+model.slice(1)]={get(){const{level:level}=this;return function(...arguments_){const styler=createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_),ansiStyles.bgColor.close,this._styler);return createBuilder(this,styler,this._isEmpty)}}}}const proto=Object.defineProperties((()=>{}),{...styles,level:{enumerable:!0,get(){return this._generator.level},set(level){this._generator.level=level}}}),createStyler=(open,close,parent)=>{let openAll,closeAll;return void 0===parent?(openAll=open,closeAll=close):(openAll=parent.openAll+open,closeAll=close+parent.closeAll),{open:open,close:close,openAll:openAll,closeAll:closeAll,parent:parent}},createBuilder=(self,_styler,_isEmpty)=>{const builder=(...arguments_)=>applyStyle(builder,1===arguments_.length?""+arguments_[0]:arguments_.join(" "));return builder.__proto__=proto,builder._generator=self,builder._styler=_styler,builder._isEmpty=_isEmpty,builder},applyStyle=(self,string)=>{if(self.level<=0||!string)return self._isEmpty?"":string;let styler=self._styler;if(void 0===styler)return string;const{openAll:openAll,closeAll:closeAll}=styler;if(-1!==string.indexOf(""))for(;void 0!==styler;)string=stringReplaceAll(string,styler.close,styler.open),styler=styler.parent;const lfIndex=string.indexOf("\n");return-1!==lfIndex&&(string=stringEncaseCRLFWithFirstIndex(string,closeAll,openAll,lfIndex)),openAll+string+closeAll};let template;const chalkTag=(chalk,...strings)=>{const[firstString]=strings;if(!Array.isArray(firstString))return strings.join(" ");const arguments_=strings.slice(1),parts=[firstString.raw[0]];for(let i=1;i<firstString.length;i++)parts.push(String(arguments_[i-1]).replace(/[{}\\]/g,"\\$&"),String(firstString.raw[i]));return void 0===template&&(template=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/chalk/source/templates.js")),template(chalk,parts.join(""))};Object.defineProperties(Chalk.prototype,styles);const chalk=Chalk();chalk.supportsColor=stdoutColor,chalk.stderr=Chalk({level:stderrColor?stderrColor.level:0}),chalk.stderr.supportsColor=stderrColor,chalk.Level={None:0,Basic:1,Ansi256:2,TrueColor:3,0:"None",1:"Basic",2:"Ansi256",3:"TrueColor"},module.exports=chalk},"./node_modules/@testing-library/jest-dom/node_modules/chalk/source/templates.js":function(module){"use strict";const TEMPLATE_REGEX=/(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,STYLE_REGEX=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,STRING_REGEX=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,ESCAPE_REGEX=/\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.)|([^\\])/gi,ESCAPES=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function unescape(c){const u="u"===c[0],bracket="{"===c[1];return u&&!bracket&&5===c.length||"x"===c[0]&&3===c.length?String.fromCharCode(parseInt(c.slice(1),16)):u&&bracket?String.fromCodePoint(parseInt(c.slice(2,-1),16)):ESCAPES.get(c)||c}function parseArguments(name,arguments_){const results=[],chunks=arguments_.trim().split(/\s*,\s*/g);let matches;for(const chunk of chunks){const number=Number(chunk);if(Number.isNaN(number)){if(!(matches=chunk.match(STRING_REGEX)))throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);results.push(matches[2].replace(ESCAPE_REGEX,((m,escape,character)=>escape?unescape(escape):character)))}else results.push(number)}return results}function parseStyle(style){STYLE_REGEX.lastIndex=0;const results=[];let matches;for(;null!==(matches=STYLE_REGEX.exec(style));){const name=matches[1];if(matches[2]){const args=parseArguments(name,matches[2]);results.push([name].concat(args))}else results.push([name])}return results}function buildStyle(chalk,styles){const enabled={};for(const layer of styles)for(const style of layer.styles)enabled[style[0]]=layer.inverse?null:style.slice(1);let current=chalk;for(const[styleName,styles]of Object.entries(enabled))if(Array.isArray(styles)){if(!(styleName in current))throw new Error(`Unknown Chalk style: ${styleName}`);current=styles.length>0?current[styleName](...styles):current[styleName]}return current}module.exports=(chalk,temporary)=>{const styles=[],chunks=[];let chunk=[];if(temporary.replace(TEMPLATE_REGEX,((m,escapeCharacter,inverse,style,close,character)=>{if(escapeCharacter)chunk.push(unescape(escapeCharacter));else if(style){const string=chunk.join("");chunk=[],chunks.push(0===styles.length?string:buildStyle(chalk,styles)(string)),styles.push({inverse:inverse,styles:parseStyle(style)})}else if(close){if(0===styles.length)throw new Error("Found extraneous } in Chalk template literal");chunks.push(buildStyle(chalk,styles)(chunk.join(""))),chunk=[],styles.pop()}else chunk.push(character)})),chunks.push(chunk.join("")),styles.length>0){const errMsg=`Chalk template literal is missing ${styles.length} closing bracket${1===styles.length?"":"s"} (\`}\`)`;throw new Error(errMsg)}return chunks.join("")}},"./node_modules/@testing-library/jest-dom/node_modules/chalk/source/util.js":function(module){"use strict";module.exports={stringReplaceAll:(string,substring,replacer)=>{let index=string.indexOf(substring);if(-1===index)return string;const substringLength=substring.length;let endIndex=0,returnValue="";do{returnValue+=string.substr(endIndex,index-endIndex)+substring+replacer,endIndex=index+substringLength,index=string.indexOf(substring,endIndex)}while(-1!==index);return returnValue+=string.substr(endIndex),returnValue},stringEncaseCRLFWithFirstIndex:(string,prefix,postfix,index)=>{let endIndex=0,returnValue="";do{const gotCR="\r"===string[index-1];returnValue+=string.substr(endIndex,(gotCR?index-1:index)-endIndex)+prefix+(gotCR?"\r\n":"\n")+postfix,endIndex=index+1,index=string.indexOf("\n",endIndex)}while(-1!==index);return returnValue+=string.substr(endIndex),returnValue}}},"./node_modules/@testing-library/jest-dom/node_modules/color-convert/conversions.js":function(module,__unused_webpack_exports,__webpack_require__){const cssKeywords=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/color-name/index.js"),reverseKeywords={};for(const key of Object.keys(cssKeywords))reverseKeywords[cssKeywords[key]]=key;const convert={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};module.exports=convert;for(const model of Object.keys(convert)){if(!("channels"in convert[model]))throw new Error("missing channels property: "+model);if(!("labels"in convert[model]))throw new Error("missing channel labels property: "+model);if(convert[model].labels.length!==convert[model].channels)throw new Error("channel and label counts mismatch: "+model);const{channels:channels,labels:labels}=convert[model];delete convert[model].channels,delete convert[model].labels,Object.defineProperty(convert[model],"channels",{value:channels}),Object.defineProperty(convert[model],"labels",{value:labels})}convert.rgb.hsl=function(rgb){const r=rgb[0]/255,g=rgb[1]/255,b=rgb[2]/255,min=Math.min(r,g,b),max=Math.max(r,g,b),delta=max-min;let h,s;max===min?h=0:r===max?h=(g-b)/delta:g===max?h=2+(b-r)/delta:b===max&&(h=4+(r-g)/delta),h=Math.min(60*h,360),h<0&&(h+=360);const l=(min+max)/2;return s=max===min?0:l<=.5?delta/(max+min):delta/(2-max-min),[h,100*s,100*l]},convert.rgb.hsv=function(rgb){let rdif,gdif,bdif,h,s;const r=rgb[0]/255,g=rgb[1]/255,b=rgb[2]/255,v=Math.max(r,g,b),diff=v-Math.min(r,g,b),diffc=function(c){return(v-c)/6/diff+.5};return 0===diff?(h=0,s=0):(s=diff/v,rdif=diffc(r),gdif=diffc(g),bdif=diffc(b),r===v?h=bdif-gdif:g===v?h=1/3+rdif-bdif:b===v&&(h=2/3+gdif-rdif),h<0?h+=1:h>1&&(h-=1)),[360*h,100*s,100*v]},convert.rgb.hwb=function(rgb){const r=rgb[0],g=rgb[1];let b=rgb[2];const h=convert.rgb.hsl(rgb)[0],w=1/255*Math.min(r,Math.min(g,b));return b=1-1/255*Math.max(r,Math.max(g,b)),[h,100*w,100*b]},convert.rgb.cmyk=function(rgb){const r=rgb[0]/255,g=rgb[1]/255,b=rgb[2]/255,k=Math.min(1-r,1-g,1-b);return[100*((1-r-k)/(1-k)||0),100*((1-g-k)/(1-k)||0),100*((1-b-k)/(1-k)||0),100*k]},convert.rgb.keyword=function(rgb){const reversed=reverseKeywords[rgb];if(reversed)return reversed;let currentClosestKeyword,currentClosestDistance=1/0;for(const keyword of Object.keys(cssKeywords)){const value=cssKeywords[keyword],distance=(y=value,((x=rgb)[0]-y[0])**2+(x[1]-y[1])**2+(x[2]-y[2])**2);distance<currentClosestDistance&&(currentClosestDistance=distance,currentClosestKeyword=keyword)}var x,y;return currentClosestKeyword},convert.keyword.rgb=function(keyword){return cssKeywords[keyword]},convert.rgb.xyz=function(rgb){let r=rgb[0]/255,g=rgb[1]/255,b=rgb[2]/255;r=r>.04045?((r+.055)/1.055)**2.4:r/12.92,g=g>.04045?((g+.055)/1.055)**2.4:g/12.92,b=b>.04045?((b+.055)/1.055)**2.4:b/12.92;return[100*(.4124*r+.3576*g+.1805*b),100*(.2126*r+.7152*g+.0722*b),100*(.0193*r+.1192*g+.9505*b)]},convert.rgb.lab=function(rgb){const xyz=convert.rgb.xyz(rgb);let x=xyz[0],y=xyz[1],z=xyz[2];x/=95.047,y/=100,z/=108.883,x=x>.008856?x**(1/3):7.787*x+16/116,y=y>.008856?y**(1/3):7.787*y+16/116,z=z>.008856?z**(1/3):7.787*z+16/116;return[116*y-16,500*(x-y),200*(y-z)]},convert.hsl.rgb=function(hsl){const h=hsl[0]/360,s=hsl[1]/100,l=hsl[2]/100;let t2,t3,val;if(0===s)return val=255*l,[val,val,val];t2=l<.5?l*(1+s):l+s-l*s;const t1=2*l-t2,rgb=[0,0,0];for(let i=0;i<3;i++)t3=h+1/3*-(i-1),t3<0&&t3++,t3>1&&t3--,val=6*t3<1?t1+6*(t2-t1)*t3:2*t3<1?t2:3*t3<2?t1+(t2-t1)*(2/3-t3)*6:t1,rgb[i]=255*val;return rgb},convert.hsl.hsv=function(hsl){const h=hsl[0];let s=hsl[1]/100,l=hsl[2]/100,smin=s;const lmin=Math.max(l,.01);l*=2,s*=l<=1?l:2-l,smin*=lmin<=1?lmin:2-lmin;return[h,100*(0===l?2*smin/(lmin+smin):2*s/(l+s)),100*((l+s)/2)]},convert.hsv.rgb=function(hsv){const h=hsv[0]/60,s=hsv[1]/100;let v=hsv[2]/100;const hi=Math.floor(h)%6,f=h-Math.floor(h),p=255*v*(1-s),q=255*v*(1-s*f),t=255*v*(1-s*(1-f));switch(v*=255,hi){case 0:return[v,t,p];case 1:return[q,v,p];case 2:return[p,v,t];case 3:return[p,q,v];case 4:return[t,p,v];case 5:return[v,p,q]}},convert.hsv.hsl=function(hsv){const h=hsv[0],s=hsv[1]/100,v=hsv[2]/100,vmin=Math.max(v,.01);let sl,l;l=(2-s)*v;const lmin=(2-s)*vmin;return sl=s*vmin,sl/=lmin<=1?lmin:2-lmin,sl=sl||0,l/=2,[h,100*sl,100*l]},convert.hwb.rgb=function(hwb){const h=hwb[0]/360;let wh=hwb[1]/100,bl=hwb[2]/100;const ratio=wh+bl;let f;ratio>1&&(wh/=ratio,bl/=ratio);const i=Math.floor(6*h),v=1-bl;f=6*h-i,0!=(1&i)&&(f=1-f);const n=wh+f*(v-wh);let r,g,b;switch(i){default:case 6:case 0:r=v,g=n,b=wh;break;case 1:r=n,g=v,b=wh;break;case 2:r=wh,g=v,b=n;break;case 3:r=wh,g=n,b=v;break;case 4:r=n,g=wh,b=v;break;case 5:r=v,g=wh,b=n}return[255*r,255*g,255*b]},convert.cmyk.rgb=function(cmyk){const c=cmyk[0]/100,m=cmyk[1]/100,y=cmyk[2]/100,k=cmyk[3]/100;return[255*(1-Math.min(1,c*(1-k)+k)),255*(1-Math.min(1,m*(1-k)+k)),255*(1-Math.min(1,y*(1-k)+k))]},convert.xyz.rgb=function(xyz){const x=xyz[0]/100,y=xyz[1]/100,z=xyz[2]/100;let r,g,b;return r=3.2406*x+-1.5372*y+-.4986*z,g=-.9689*x+1.8758*y+.0415*z,b=.0557*x+-.204*y+1.057*z,r=r>.0031308?1.055*r**(1/2.4)-.055:12.92*r,g=g>.0031308?1.055*g**(1/2.4)-.055:12.92*g,b=b>.0031308?1.055*b**(1/2.4)-.055:12.92*b,r=Math.min(Math.max(0,r),1),g=Math.min(Math.max(0,g),1),b=Math.min(Math.max(0,b),1),[255*r,255*g,255*b]},convert.xyz.lab=function(xyz){let x=xyz[0],y=xyz[1],z=xyz[2];x/=95.047,y/=100,z/=108.883,x=x>.008856?x**(1/3):7.787*x+16/116,y=y>.008856?y**(1/3):7.787*y+16/116,z=z>.008856?z**(1/3):7.787*z+16/116;return[116*y-16,500*(x-y),200*(y-z)]},convert.lab.xyz=function(lab){let x,y,z;y=(lab[0]+16)/116,x=lab[1]/500+y,z=y-lab[2]/200;const y2=y**3,x2=x**3,z2=z**3;return y=y2>.008856?y2:(y-16/116)/7.787,x=x2>.008856?x2:(x-16/116)/7.787,z=z2>.008856?z2:(z-16/116)/7.787,x*=95.047,y*=100,z*=108.883,[x,y,z]},convert.lab.lch=function(lab){const l=lab[0],a=lab[1],b=lab[2];let h;h=360*Math.atan2(b,a)/2/Math.PI,h<0&&(h+=360);return[l,Math.sqrt(a*a+b*b),h]},convert.lch.lab=function(lch){const l=lch[0],c=lch[1],hr=lch[2]/360*2*Math.PI;return[l,c*Math.cos(hr),c*Math.sin(hr)]},convert.rgb.ansi16=function(args,saturation=null){const[r,g,b]=args;let value=null===saturation?convert.rgb.hsv(args)[2]:saturation;if(value=Math.round(value/50),0===value)return 30;let ansi=30+(Math.round(b/255)<<2|Math.round(g/255)<<1|Math.round(r/255));return 2===value&&(ansi+=60),ansi},convert.hsv.ansi16=function(args){return convert.rgb.ansi16(convert.hsv.rgb(args),args[2])},convert.rgb.ansi256=function(args){const r=args[0],g=args[1],b=args[2];if(r===g&&g===b)return r<8?16:r>248?231:Math.round((r-8)/247*24)+232;return 16+36*Math.round(r/255*5)+6*Math.round(g/255*5)+Math.round(b/255*5)},convert.ansi16.rgb=function(args){let color=args%10;if(0===color||7===color)return args>50&&(color+=3.5),color=color/10.5*255,[color,color,color];const mult=.5*(1+~~(args>50));return[(1&color)*mult*255,(color>>1&1)*mult*255,(color>>2&1)*mult*255]},convert.ansi256.rgb=function(args){if(args>=232){const c=10*(args-232)+8;return[c,c,c]}let rem;args-=16;return[Math.floor(args/36)/5*255,Math.floor((rem=args%36)/6)/5*255,rem%6/5*255]},convert.rgb.hex=function(args){const string=(((255&Math.round(args[0]))<<16)+((255&Math.round(args[1]))<<8)+(255&Math.round(args[2]))).toString(16).toUpperCase();return"000000".substring(string.length)+string},convert.hex.rgb=function(args){const match=args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!match)return[0,0,0];let colorString=match[0];3===match[0].length&&(colorString=colorString.split("").map((char=>char+char)).join(""));const integer=parseInt(colorString,16);return[integer>>16&255,integer>>8&255,255&integer]},convert.rgb.hcg=function(rgb){const r=rgb[0]/255,g=rgb[1]/255,b=rgb[2]/255,max=Math.max(Math.max(r,g),b),min=Math.min(Math.min(r,g),b),chroma=max-min;let grayscale,hue;return grayscale=chroma<1?min/(1-chroma):0,hue=chroma<=0?0:max===r?(g-b)/chroma%6:max===g?2+(b-r)/chroma:4+(r-g)/chroma,hue/=6,hue%=1,[360*hue,100*chroma,100*grayscale]},convert.hsl.hcg=function(hsl){const s=hsl[1]/100,l=hsl[2]/100,c=l<.5?2*s*l:2*s*(1-l);let f=0;return c<1&&(f=(l-.5*c)/(1-c)),[hsl[0],100*c,100*f]},convert.hsv.hcg=function(hsv){const s=hsv[1]/100,v=hsv[2]/100,c=s*v;let f=0;return c<1&&(f=(v-c)/(1-c)),[hsv[0],100*c,100*f]},convert.hcg.rgb=function(hcg){const h=hcg[0]/360,c=hcg[1]/100,g=hcg[2]/100;if(0===c)return[255*g,255*g,255*g];const pure=[0,0,0],hi=h%1*6,v=hi%1,w=1-v;let mg=0;switch(Math.floor(hi)){case 0:pure[0]=1,pure[1]=v,pure[2]=0;break;case 1:pure[0]=w,pure[1]=1,pure[2]=0;break;case 2:pure[0]=0,pure[1]=1,pure[2]=v;break;case 3:pure[0]=0,pure[1]=w,pure[2]=1;break;case 4:pure[0]=v,pure[1]=0,pure[2]=1;break;default:pure[0]=1,pure[1]=0,pure[2]=w}return mg=(1-c)*g,[255*(c*pure[0]+mg),255*(c*pure[1]+mg),255*(c*pure[2]+mg)]},convert.hcg.hsv=function(hcg){const c=hcg[1]/100,v=c+hcg[2]/100*(1-c);let f=0;return v>0&&(f=c/v),[hcg[0],100*f,100*v]},convert.hcg.hsl=function(hcg){const c=hcg[1]/100,l=hcg[2]/100*(1-c)+.5*c;let s=0;return l>0&&l<.5?s=c/(2*l):l>=.5&&l<1&&(s=c/(2*(1-l))),[hcg[0],100*s,100*l]},convert.hcg.hwb=function(hcg){const c=hcg[1]/100,v=c+hcg[2]/100*(1-c);return[hcg[0],100*(v-c),100*(1-v)]},convert.hwb.hcg=function(hwb){const w=hwb[1]/100,v=1-hwb[2]/100,c=v-w;let g=0;return c<1&&(g=(v-c)/(1-c)),[hwb[0],100*c,100*g]},convert.apple.rgb=function(apple){return[apple[0]/65535*255,apple[1]/65535*255,apple[2]/65535*255]},convert.rgb.apple=function(rgb){return[rgb[0]/255*65535,rgb[1]/255*65535,rgb[2]/255*65535]},convert.gray.rgb=function(args){return[args[0]/100*255,args[0]/100*255,args[0]/100*255]},convert.gray.hsl=function(args){return[0,0,args[0]]},convert.gray.hsv=convert.gray.hsl,convert.gray.hwb=function(gray){return[0,100,gray[0]]},convert.gray.cmyk=function(gray){return[0,0,0,gray[0]]},convert.gray.lab=function(gray){return[gray[0],0,0]},convert.gray.hex=function(gray){const val=255&Math.round(gray[0]/100*255),string=((val<<16)+(val<<8)+val).toString(16).toUpperCase();return"000000".substring(string.length)+string},convert.rgb.gray=function(rgb){return[(rgb[0]+rgb[1]+rgb[2])/3/255*100]}},"./node_modules/@testing-library/jest-dom/node_modules/color-convert/index.js":function(module,__unused_webpack_exports,__webpack_require__){const conversions=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/color-convert/conversions.js"),route=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/color-convert/route.js"),convert={};Object.keys(conversions).forEach((fromModel=>{convert[fromModel]={},Object.defineProperty(convert[fromModel],"channels",{value:conversions[fromModel].channels}),Object.defineProperty(convert[fromModel],"labels",{value:conversions[fromModel].labels});const routes=route(fromModel);Object.keys(routes).forEach((toModel=>{const fn=routes[toModel];convert[fromModel][toModel]=function wrapRounded(fn){const wrappedFn=function(...args){const arg0=args[0];if(null==arg0)return arg0;arg0.length>1&&(args=arg0);const result=fn(args);if("object"==typeof result)for(let len=result.length,i=0;i<len;i++)result[i]=Math.round(result[i]);return result};return"conversion"in fn&&(wrappedFn.conversion=fn.conversion),wrappedFn}(fn),convert[fromModel][toModel].raw=function wrapRaw(fn){const wrappedFn=function(...args){const arg0=args[0];return null==arg0?arg0:(arg0.length>1&&(args=arg0),fn(args))};return"conversion"in fn&&(wrappedFn.conversion=fn.conversion),wrappedFn}(fn)}))})),module.exports=convert},"./node_modules/@testing-library/jest-dom/node_modules/color-convert/route.js":function(module,__unused_webpack_exports,__webpack_require__){const conversions=__webpack_require__("./node_modules/@testing-library/jest-dom/node_modules/color-convert/conversions.js");function deriveBFS(fromModel){const graph=function buildGraph(){const graph={},models=Object.keys(conversions);for(let len=models.length,i=0;i<len;i++)graph[models[i]]={distance:-1,parent:null};return graph}(),queue=[fromModel];for(graph[fromModel].distance=0;queue.length;){const current=queue.pop(),adjacents=Object.keys(conversions[current]);for(let len=adjacents.length,i=0;i<len;i++){const adjacent=adjacents[i],node=graph[adjacent];-1===node.distance&&(node.distance=graph[current].distance+1,node.parent=current,queue.unshift(adjacent))}}return graph}function link(from,to){return function(args){return to(from(args))}}function wrapConversion(toModel,graph){const path=[graph[toModel].parent,toModel];let fn=conversions[graph[toModel].parent][toModel],cur=graph[toModel].parent;for(;graph[cur].parent;)path.unshift(graph[cur].parent),fn=link(conversions[graph[cur].parent][cur],fn),cur=graph[cur].parent;return fn.conversion=path,fn}module.exports=function(fromModel){const graph=deriveBFS(fromModel),conversion={},models=Object.keys(graph);for(let len=models.length,i=0;i<len;i++){const toModel=models[i];null!==graph[toModel].parent&&(conversion[toModel]=wrapConversion(toModel,graph))}return conversion}},"./node_modules/@testing-library/jest-dom/node_modules/color-name/index.js":function(module){"use strict";module.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},"./node_modules/@testing-library/jest-dom/node_modules/supports-color/browser.js":function(module){"use strict";module.exports={stdout:!1,stderr:!1}},"./node_modules/ansi-regex/index.js":function(module){"use strict";module.exports=({onlyFirst:onlyFirst=!1}={})=>{const pattern=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(pattern,onlyFirst?void 0:"g")}},"./node_modules/aria-query/lib/ariaPropsMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _iterationDecorator=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/aria-query/lib/util/iterationDecorator.js"));function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var properties=[["aria-activedescendant",{type:"id"}],["aria-atomic",{type:"boolean"}],["aria-autocomplete",{type:"token",values:["inline","list","both","none"]}],["aria-braillelabel",{type:"string"}],["aria-brailleroledescription",{type:"string"}],["aria-busy",{type:"boolean"}],["aria-checked",{type:"tristate"}],["aria-colcount",{type:"integer"}],["aria-colindex",{type:"integer"}],["aria-colspan",{type:"integer"}],["aria-controls",{type:"idlist"}],["aria-current",{type:"token",values:["page","step","location","date","time",!0,!1]}],["aria-describedby",{type:"idlist"}],["aria-description",{type:"string"}],["aria-details",{type:"id"}],["aria-disabled",{type:"boolean"}],["aria-dropeffect",{type:"tokenlist",values:["copy","execute","link","move","none","popup"]}],["aria-errormessage",{type:"id"}],["aria-expanded",{type:"boolean",allowundefined:!0}],["aria-flowto",{type:"idlist"}],["aria-grabbed",{type:"boolean",allowundefined:!0}],["aria-haspopup",{type:"token",values:[!1,!0,"menu","listbox","tree","grid","dialog"]}],["aria-hidden",{type:"boolean",allowundefined:!0}],["aria-invalid",{type:"token",values:["grammar",!1,"spelling",!0]}],["aria-keyshortcuts",{type:"string"}],["aria-label",{type:"string"}],["aria-labelledby",{type:"idlist"}],["aria-level",{type:"integer"}],["aria-live",{type:"token",values:["assertive","off","polite"]}],["aria-modal",{type:"boolean"}],["aria-multiline",{type:"boolean"}],["aria-multiselectable",{type:"boolean"}],["aria-orientation",{type:"token",values:["vertical","undefined","horizontal"]}],["aria-owns",{type:"idlist"}],["aria-placeholder",{type:"string"}],["aria-posinset",{type:"integer"}],["aria-pressed",{type:"tristate"}],["aria-readonly",{type:"boolean"}],["aria-relevant",{type:"tokenlist",values:["additions","all","removals","text"]}],["aria-required",{type:"boolean"}],["aria-roledescription",{type:"string"}],["aria-rowcount",{type:"integer"}],["aria-rowindex",{type:"integer"}],["aria-rowspan",{type:"integer"}],["aria-selected",{type:"boolean",allowundefined:!0}],["aria-setsize",{type:"integer"}],["aria-sort",{type:"token",values:["ascending","descending","none","other"]}],["aria-valuemax",{type:"number"}],["aria-valuemin",{type:"number"}],["aria-valuenow",{type:"number"}],["aria-valuetext",{type:"string"}]],ariaPropsMap={entries:function entries(){return properties},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(properties);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,key,properties)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=properties.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!ariaPropsMap.get(key)},keys:function keys(){return properties.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return properties.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(ariaPropsMap,ariaPropsMap.entries());exports.default=_default},"./node_modules/aria-query/lib/domMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _iterationDecorator=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/aria-query/lib/util/iterationDecorator.js"));function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var dom=[["a",{reserved:!1}],["abbr",{reserved:!1}],["acronym",{reserved:!1}],["address",{reserved:!1}],["applet",{reserved:!1}],["area",{reserved:!1}],["article",{reserved:!1}],["aside",{reserved:!1}],["audio",{reserved:!1}],["b",{reserved:!1}],["base",{reserved:!0}],["bdi",{reserved:!1}],["bdo",{reserved:!1}],["big",{reserved:!1}],["blink",{reserved:!1}],["blockquote",{reserved:!1}],["body",{reserved:!1}],["br",{reserved:!1}],["button",{reserved:!1}],["canvas",{reserved:!1}],["caption",{reserved:!1}],["center",{reserved:!1}],["cite",{reserved:!1}],["code",{reserved:!1}],["col",{reserved:!0}],["colgroup",{reserved:!0}],["content",{reserved:!1}],["data",{reserved:!1}],["datalist",{reserved:!1}],["dd",{reserved:!1}],["del",{reserved:!1}],["details",{reserved:!1}],["dfn",{reserved:!1}],["dialog",{reserved:!1}],["dir",{reserved:!1}],["div",{reserved:!1}],["dl",{reserved:!1}],["dt",{reserved:!1}],["em",{reserved:!1}],["embed",{reserved:!1}],["fieldset",{reserved:!1}],["figcaption",{reserved:!1}],["figure",{reserved:!1}],["font",{reserved:!1}],["footer",{reserved:!1}],["form",{reserved:!1}],["frame",{reserved:!1}],["frameset",{reserved:!1}],["h1",{reserved:!1}],["h2",{reserved:!1}],["h3",{reserved:!1}],["h4",{reserved:!1}],["h5",{reserved:!1}],["h6",{reserved:!1}],["head",{reserved:!0}],["header",{reserved:!1}],["hgroup",{reserved:!1}],["hr",{reserved:!1}],["html",{reserved:!0}],["i",{reserved:!1}],["iframe",{reserved:!1}],["img",{reserved:!1}],["input",{reserved:!1}],["ins",{reserved:!1}],["kbd",{reserved:!1}],["keygen",{reserved:!1}],["label",{reserved:!1}],["legend",{reserved:!1}],["li",{reserved:!1}],["link",{reserved:!0}],["main",{reserved:!1}],["map",{reserved:!1}],["mark",{reserved:!1}],["marquee",{reserved:!1}],["menu",{reserved:!1}],["menuitem",{reserved:!1}],["meta",{reserved:!0}],["meter",{reserved:!1}],["nav",{reserved:!1}],["noembed",{reserved:!0}],["noscript",{reserved:!0}],["object",{reserved:!1}],["ol",{reserved:!1}],["optgroup",{reserved:!1}],["option",{reserved:!1}],["output",{reserved:!1}],["p",{reserved:!1}],["param",{reserved:!0}],["picture",{reserved:!0}],["pre",{reserved:!1}],["progress",{reserved:!1}],["q",{reserved:!1}],["rp",{reserved:!1}],["rt",{reserved:!1}],["rtc",{reserved:!1}],["ruby",{reserved:!1}],["s",{reserved:!1}],["samp",{reserved:!1}],["script",{reserved:!0}],["section",{reserved:!1}],["select",{reserved:!1}],["small",{reserved:!1}],["source",{reserved:!0}],["spacer",{reserved:!1}],["span",{reserved:!1}],["strike",{reserved:!1}],["strong",{reserved:!1}],["style",{reserved:!0}],["sub",{reserved:!1}],["summary",{reserved:!1}],["sup",{reserved:!1}],["table",{reserved:!1}],["tbody",{reserved:!1}],["td",{reserved:!1}],["textarea",{reserved:!1}],["tfoot",{reserved:!1}],["th",{reserved:!1}],["thead",{reserved:!1}],["time",{reserved:!1}],["title",{reserved:!0}],["tr",{reserved:!1}],["track",{reserved:!0}],["tt",{reserved:!1}],["u",{reserved:!1}],["ul",{reserved:!1}],["var",{reserved:!1}],["video",{reserved:!1}],["wbr",{reserved:!1}],["xmp",{reserved:!1}]],domMap={entries:function entries(){return dom},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(dom);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,key,dom)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=dom.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!domMap.get(key)},keys:function keys(){return dom.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return dom.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(domMap,domMap.entries());exports.default=_default},"./node_modules/aria-query/lib/elementRoleMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _lite=__webpack_require__("./node_modules/dequal/lite/index.js"),_iterationDecorator=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/util/iterationDecorator.js")),_rolesMap=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/rolesMap.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}for(var elementRoles=[],keys=_rolesMap.default.keys(),i=0;i<keys.length;i++){var key=keys[i],role=_rolesMap.default.get(key);if(role)for(var concepts=[].concat(role.baseConcepts,role.relatedConcepts),k=0;k<concepts.length;k++){var relation=concepts[k];"HTML"===relation.module&&function(){var concept=relation.concept;if(concept){var roles,elementRoleRelation=elementRoles.find((function(relation){return(0,_lite.dequal)(relation,concept)}));roles=elementRoleRelation?elementRoleRelation[1]:[];for(var isUnique=!0,_i=0;_i<roles.length;_i++)if(roles[_i]===key){isUnique=!1;break}isUnique&&roles.push(key),elementRoles.push([concept,roles])}}()}}var elementRoleMap={entries:function entries(){return elementRoles},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(elementRoles);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),_key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,_key,elementRoles)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=elementRoles.find((function(tuple){return key.name===tuple[0].name&&(0,_lite.dequal)(key.attributes,tuple[0].attributes)}));return item&&item[1]},has:function has(key){return!!elementRoleMap.get(key)},keys:function keys(){return elementRoles.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return elementRoles.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(elementRoleMap,elementRoleMap.entries());exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/commandRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-disabled":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/inputRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null},relatedConcepts:[{concept:{name:"input"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-valuemax":null,"aria-valuemin":null,"aria-valuenow":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{"aria-atomic":null,"aria-busy":null,"aria-controls":null,"aria-current":null,"aria-describedby":null,"aria-details":null,"aria-dropeffect":null,"aria-flowto":null,"aria-grabbed":null,"aria-hidden":null,"aria-keyshortcuts":null,"aria-label":null,"aria-labelledby":null,"aria-live":null,"aria-owns":null,"aria-relevant":null,"aria-roledescription":null},relatedConcepts:[{concept:{name:"role"},module:"XHTML"},{concept:{name:"type"},module:"Dublin Core"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"frontmatter"},module:"DTB"},{concept:{name:"level"},module:"DTB"},{concept:{name:"level"},module:"SMIL"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/selectRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","composite"],["roletype","structure","section","group"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/structureRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/abstract/windowRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!0,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-modal":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _commandRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/commandRole.js")),_compositeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js")),_inputRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/inputRole.js")),_landmarkRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js")),_rangeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js")),_roletypeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js")),_sectionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js")),_sectionheadRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js")),_selectRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/selectRole.js")),_structureRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/structureRole.js")),_widgetRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js")),_windowRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/abstract/windowRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["command",_commandRole.default],["composite",_compositeRole.default],["input",_inputRole.default],["landmark",_landmarkRole.default],["range",_rangeRole.default],["roletype",_roletypeRole.default],["section",_sectionRole.default],["sectionhead",_sectionheadRole.default],["select",_selectRole.default],["structure",_structureRole.default],["widget",_widgetRole.default],["window",_windowRole.default]];exports.default=_default},"./node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _docAbstractRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js")),_docAcknowledgmentsRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js")),_docAfterwordRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js")),_docAppendixRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js")),_docBacklinkRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js")),_docBiblioentryRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js")),_docBibliographyRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js")),_docBibliorefRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js")),_docChapterRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js")),_docColophonRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js")),_docConclusionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js")),_docCoverRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js")),_docCreditRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js")),_docCreditsRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js")),_docDedicationRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js")),_docEndnoteRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js")),_docEndnotesRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js")),_docEpigraphRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js")),_docEpilogueRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js")),_docErrataRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js")),_docExampleRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js")),_docFootnoteRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js")),_docForewordRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js")),_docGlossaryRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js")),_docGlossrefRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js")),_docIndexRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js")),_docIntroductionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js")),_docNoterefRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js")),_docNoticeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js")),_docPagebreakRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js")),_docPagelistRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js")),_docPartRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js")),_docPrefaceRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js")),_docPrologueRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js")),_docPullquoteRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js")),_docQnaRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js")),_docSubtitleRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js")),_docTipRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js")),_docTocRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["doc-abstract",_docAbstractRole.default],["doc-acknowledgments",_docAcknowledgmentsRole.default],["doc-afterword",_docAfterwordRole.default],["doc-appendix",_docAppendixRole.default],["doc-backlink",_docBacklinkRole.default],["doc-biblioentry",_docBiblioentryRole.default],["doc-bibliography",_docBibliographyRole.default],["doc-biblioref",_docBibliorefRole.default],["doc-chapter",_docChapterRole.default],["doc-colophon",_docColophonRole.default],["doc-conclusion",_docConclusionRole.default],["doc-cover",_docCoverRole.default],["doc-credit",_docCreditRole.default],["doc-credits",_docCreditsRole.default],["doc-dedication",_docDedicationRole.default],["doc-endnote",_docEndnoteRole.default],["doc-endnotes",_docEndnotesRole.default],["doc-epigraph",_docEpigraphRole.default],["doc-epilogue",_docEpilogueRole.default],["doc-errata",_docErrataRole.default],["doc-example",_docExampleRole.default],["doc-footnote",_docFootnoteRole.default],["doc-foreword",_docForewordRole.default],["doc-glossary",_docGlossaryRole.default],["doc-glossref",_docGlossrefRole.default],["doc-index",_docIndexRole.default],["doc-introduction",_docIntroductionRole.default],["doc-noteref",_docNoterefRole.default],["doc-notice",_docNoticeRole.default],["doc-pagebreak",_docPagebreakRole.default],["doc-pagelist",_docPagelistRole.default],["doc-part",_docPartRole.default],["doc-preface",_docPrefaceRole.default],["doc-prologue",_docPrologueRole.default],["doc-pullquote",_docPullquoteRole.default],["doc-qna",_docQnaRole.default],["doc-subtitle",_docSubtitleRole.default],["doc-tip",_docTipRole.default],["doc-toc",_docTocRole.default]];exports.default=_default},"./node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _graphicsDocumentRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js")),_graphicsObjectRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js")),_graphicsSymbolRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["graphics-document",_graphicsDocumentRole.default],["graphics-object",_graphicsObjectRole.default],["graphics-symbol",_graphicsSymbolRole.default]];exports.default=_default},"./node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _alertRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/alertRole.js")),_alertdialogRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js")),_applicationRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/applicationRole.js")),_articleRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/articleRole.js")),_bannerRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/bannerRole.js")),_blockquoteRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js")),_buttonRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/buttonRole.js")),_captionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/captionRole.js")),_cellRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/cellRole.js")),_checkboxRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js")),_codeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/codeRole.js")),_columnheaderRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js")),_comboboxRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js")),_complementaryRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js")),_contentinfoRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js")),_definitionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/definitionRole.js")),_deletionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/deletionRole.js")),_dialogRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/dialogRole.js")),_directoryRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/directoryRole.js")),_documentRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/documentRole.js")),_emphasisRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js")),_feedRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/feedRole.js")),_figureRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/figureRole.js")),_formRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/formRole.js")),_genericRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/genericRole.js")),_gridRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/gridRole.js")),_gridcellRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js")),_groupRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/groupRole.js")),_headingRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/headingRole.js")),_imgRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/imgRole.js")),_insertionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/insertionRole.js")),_linkRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/linkRole.js")),_listRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/listRole.js")),_listboxRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/listboxRole.js")),_listitemRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/listitemRole.js")),_logRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/logRole.js")),_mainRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/mainRole.js")),_markRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/markRole.js")),_marqueeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js")),_mathRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/mathRole.js")),_menuRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/menuRole.js")),_menubarRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/menubarRole.js")),_menuitemRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js")),_menuitemcheckboxRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js")),_menuitemradioRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js")),_meterRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/meterRole.js")),_navigationRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/navigationRole.js")),_noneRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/noneRole.js")),_noteRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/noteRole.js")),_optionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/optionRole.js")),_paragraphRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js")),_presentationRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/presentationRole.js")),_progressbarRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js")),_radioRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/radioRole.js")),_radiogroupRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js")),_regionRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/regionRole.js")),_rowRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/rowRole.js")),_rowgroupRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js")),_rowheaderRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js")),_scrollbarRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js")),_searchRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/searchRole.js")),_searchboxRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js")),_separatorRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/separatorRole.js")),_sliderRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/sliderRole.js")),_spinbuttonRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js")),_statusRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/statusRole.js")),_strongRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/strongRole.js")),_subscriptRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js")),_superscriptRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js")),_switchRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/switchRole.js")),_tabRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/tabRole.js")),_tableRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/tableRole.js")),_tablistRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/tablistRole.js")),_tabpanelRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js")),_termRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/termRole.js")),_textboxRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/textboxRole.js")),_timeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/timeRole.js")),_timerRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/timerRole.js")),_toolbarRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js")),_tooltipRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js")),_treeRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/treeRole.js")),_treegridRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/treegridRole.js")),_treeitemRole=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _default=[["alert",_alertRole.default],["alertdialog",_alertdialogRole.default],["application",_applicationRole.default],["article",_articleRole.default],["banner",_bannerRole.default],["blockquote",_blockquoteRole.default],["button",_buttonRole.default],["caption",_captionRole.default],["cell",_cellRole.default],["checkbox",_checkboxRole.default],["code",_codeRole.default],["columnheader",_columnheaderRole.default],["combobox",_comboboxRole.default],["complementary",_complementaryRole.default],["contentinfo",_contentinfoRole.default],["definition",_definitionRole.default],["deletion",_deletionRole.default],["dialog",_dialogRole.default],["directory",_directoryRole.default],["document",_documentRole.default],["emphasis",_emphasisRole.default],["feed",_feedRole.default],["figure",_figureRole.default],["form",_formRole.default],["generic",_genericRole.default],["grid",_gridRole.default],["gridcell",_gridcellRole.default],["group",_groupRole.default],["heading",_headingRole.default],["img",_imgRole.default],["insertion",_insertionRole.default],["link",_linkRole.default],["list",_listRole.default],["listbox",_listboxRole.default],["listitem",_listitemRole.default],["log",_logRole.default],["main",_mainRole.default],["mark",_markRole.default],["marquee",_marqueeRole.default],["math",_mathRole.default],["menu",_menuRole.default],["menubar",_menubarRole.default],["menuitem",_menuitemRole.default],["menuitemcheckbox",_menuitemcheckboxRole.default],["menuitemradio",_menuitemradioRole.default],["meter",_meterRole.default],["navigation",_navigationRole.default],["none",_noneRole.default],["note",_noteRole.default],["option",_optionRole.default],["paragraph",_paragraphRole.default],["presentation",_presentationRole.default],["progressbar",_progressbarRole.default],["radio",_radioRole.default],["radiogroup",_radiogroupRole.default],["region",_regionRole.default],["row",_rowRole.default],["rowgroup",_rowgroupRole.default],["rowheader",_rowheaderRole.default],["scrollbar",_scrollbarRole.default],["search",_searchRole.default],["searchbox",_searchboxRole.default],["separator",_separatorRole.default],["slider",_sliderRole.default],["spinbutton",_spinbuttonRole.default],["status",_statusRole.default],["strong",_strongRole.default],["subscript",_subscriptRole.default],["superscript",_superscriptRole.default],["switch",_switchRole.default],["tab",_tabRole.default],["table",_tableRole.default],["tablist",_tablistRole.default],["tabpanel",_tabpanelRole.default],["term",_termRole.default],["textbox",_textboxRole.default],["time",_timeRole.default],["timer",_timerRole.default],["toolbar",_toolbarRole.default],["tooltip",_tooltipRole.default],["tree",_treeRole.default],["treegrid",_treegridRole.default],["treeitem",_treeitemRole.default]];exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"abstract [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"acknowledgments [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"afterword [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"appendix [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"referrer [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"EPUB biblioentry [EPUB-SSV]"},module:"EPUB"}],requireContextRole:["doc-bibliography"],requiredContextRole:["doc-bibliography"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","listitem"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"bibliography [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["doc-biblioentry"]],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"biblioref [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"chapter [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"colophon [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"conclusion [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"cover [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","img"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"credit [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"credits [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"dedication [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"rearnote [EPUB-SSV]"},module:"EPUB"}],requireContextRole:["doc-endnotes"],requiredContextRole:["doc-endnotes"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","listitem"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"rearnotes [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["doc-endnote"]],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"epigraph [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"epilogue [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"errata [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"footnote [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"foreword [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"glossary [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["definition"],["term"]],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"glossref [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"index [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark","navigation"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"introduction [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"noteref [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command","link"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"notice [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","note"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"pagebreak [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","separator"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"page-list [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark","navigation"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"part [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"preface [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"prologue [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"pullquote [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["none"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"qna [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"subtitle [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"help [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","note"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"toc [EPUB-SSV]"},module:"EPUB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark","navigation"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{module:"GRAPHICS",concept:{name:"graphics-object"}},{module:"ARIA",concept:{name:"img"}},{module:"ARIA",concept:{name:"article"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","document"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{module:"GRAPHICS",concept:{name:"graphics-document"}},{module:"ARIA",concept:{name:"group"}},{module:"ARIA",concept:{name:"img"}},{module:"GRAPHICS",concept:{name:"graphics-symbol"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","group"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","img"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/alertRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-atomic":"true","aria-live":"assertive"},relatedConcepts:[{concept:{name:"alert"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"alert"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","alert"],["roletype","window","dialog"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/applicationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null},relatedConcepts:[{concept:{name:"Device Independence Delivery Unit"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/articleRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{name:"article"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","document"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/bannerRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{constraints:["scoped to the body element"],name:"header"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"blockquote"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/buttonRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null,"aria-pressed":null},relatedConcepts:[{concept:{attributes:[{name:"type",value:"button"}],name:"input"},module:"HTML"},{concept:{attributes:[{name:"type",value:"image"}],name:"input"},module:"HTML"},{concept:{attributes:[{name:"type",value:"reset"}],name:"input"},module:"HTML"},{concept:{attributes:[{name:"type",value:"submit"}],name:"input"},module:"HTML"},{concept:{name:"button"},module:"HTML"},{concept:{name:"trigger"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/captionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"caption"},module:"HTML"}],requireContextRole:["figure","grid","table"],requiredContextRole:["figure","grid","table"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/cellRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-colindex":null,"aria-colspan":null,"aria-rowindex":null,"aria-rowspan":null},relatedConcepts:[{concept:{constraints:["ancestor table element has table role"],name:"td"},module:"HTML"}],requireContextRole:["row"],requiredContextRole:["row"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-checked":null,"aria-errormessage":null,"aria-expanded":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null},relatedConcepts:[{concept:{attributes:[{name:"type",value:"checkbox"}],name:"input"},module:"HTML"},{concept:{name:"option"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/codeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"code"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-sort":null},relatedConcepts:[{concept:{name:"th"},module:"HTML"},{concept:{attributes:[{name:"scope",value:"col"}],name:"th"},module:"HTML"},{concept:{attributes:[{name:"scope",value:"colgroup"}],name:"th"},module:"HTML"}],requireContextRole:["row"],requiredContextRole:["row"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","cell"],["roletype","structure","section","cell","gridcell"],["roletype","widget","gridcell"],["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-autocomplete":null,"aria-errormessage":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null,"aria-expanded":"false","aria-haspopup":"listbox"},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"email"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"search"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"tel"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"text"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"url"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"list"},{name:"type",value:"url"}],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"multiple"},{constraints:["undefined"],name:"size"}],constraints:["the multiple attribute is not set and the size attribute does not have a value greater than 1"],name:"select"},module:"HTML"},{concept:{name:"select"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-controls":null,"aria-expanded":"false"},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"aside"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"aria-label"}],constraints:["scoped to a sectioning content element","scoped to a sectioning root element other than body"],name:"aside"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"aria-labelledby"}],constraints:["scoped to a sectioning content element","scoped to a sectioning root element other than body"],name:"aside"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{constraints:["scoped to the body element"],name:"footer"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/definitionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"dd"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/deletionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"del"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/dialogRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"dialog"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","window"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/directoryRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{module:"DAISY Guide"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","list"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/documentRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"Device Independence Delivery Unit"}},{concept:{name:"html"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"em"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/feedRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["article"]],requiredProps:{},superClass:[["roletype","structure","section","list"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/figureRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"figure"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/formRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"aria-label"}],name:"form"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"aria-labelledby"}],name:"form"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"name"}],name:"form"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/genericRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"a"},module:"HTML"},{concept:{name:"area"},module:"HTML"},{concept:{name:"aside"},module:"HTML"},{concept:{name:"b"},module:"HTML"},{concept:{name:"bdo"},module:"HTML"},{concept:{name:"body"},module:"HTML"},{concept:{name:"data"},module:"HTML"},{concept:{name:"div"},module:"HTML"},{concept:{constraints:["scoped to the main element","scoped to a sectioning content element","scoped to a sectioning root element other than body"],name:"footer"},module:"HTML"},{concept:{constraints:["scoped to the main element","scoped to a sectioning content element","scoped to a sectioning root element other than body"],name:"header"},module:"HTML"},{concept:{name:"hgroup"},module:"HTML"},{concept:{name:"i"},module:"HTML"},{concept:{name:"pre"},module:"HTML"},{concept:{name:"q"},module:"HTML"},{concept:{name:"samp"},module:"HTML"},{concept:{name:"section"},module:"HTML"},{concept:{name:"small"},module:"HTML"},{concept:{name:"span"},module:"HTML"},{concept:{name:"u"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/gridRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-multiselectable":null,"aria-readonly":null},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["row"],["row","rowgroup"]],requiredProps:{},superClass:[["roletype","widget","composite"],["roletype","structure","section","table"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-errormessage":null,"aria-expanded":null,"aria-haspopup":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null,"aria-selected":null},relatedConcepts:[{concept:{constraints:["ancestor table element has grid role","ancestor table element has treegrid role"],name:"td"},module:"HTML"}],requireContextRole:["row"],requiredContextRole:["row"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","cell"],["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/groupRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-disabled":null},relatedConcepts:[{concept:{name:"details"},module:"HTML"},{concept:{name:"fieldset"},module:"HTML"},{concept:{name:"optgroup"},module:"HTML"},{concept:{name:"address"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/headingRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-level":"2"},relatedConcepts:[{concept:{name:"h1"},module:"HTML"},{concept:{name:"h2"},module:"HTML"},{concept:{name:"h3"},module:"HTML"},{concept:{name:"h4"},module:"HTML"},{concept:{name:"h5"},module:"HTML"},{concept:{name:"h6"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-level":"2"},superClass:[["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/imgRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"alt"}],name:"img"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"alt"}],name:"img"},module:"HTML"},{concept:{name:"imggroup"},module:"DTB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/insertionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"ins"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/linkRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"href"}],name:"a"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"href"}],name:"area"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/listRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"menu"},module:"HTML"},{concept:{name:"ol"},module:"HTML"},{concept:{name:"ul"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["listitem"]],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/listboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-expanded":null,"aria-invalid":null,"aria-multiselectable":null,"aria-readonly":null,"aria-required":null,"aria-orientation":"vertical"},relatedConcepts:[{concept:{attributes:[{constraints:[">1"],name:"size"}],constraints:["the size attribute value is greater than 1"],name:"select"},module:"HTML"},{concept:{attributes:[{name:"multiple"}],name:"select"},module:"HTML"},{concept:{name:"datalist"},module:"HTML"},{concept:{name:"list"},module:"ARIA"},{concept:{name:"select"},module:"XForms"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["option","group"],["option"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/listitemRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-level":null,"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{constraints:["direct descendant of ol","direct descendant of ul","direct descendant of menu"],name:"li"},module:"HTML"},{concept:{name:"item"},module:"XForms"}],requireContextRole:["directory","list"],requiredContextRole:["directory","list"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/logRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-live":"polite"},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/mainRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"main"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/markRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:[],props:{"aria-braillelabel":null,"aria-brailleroledescription":null,"aria-description":null},relatedConcepts:[{concept:{name:"mark"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/mathRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"math"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/menuRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":"vertical"},relatedConcepts:[{concept:{name:"MENU"},module:"JAPI"},{concept:{name:"list"},module:"ARIA"},{concept:{name:"select"},module:"XForms"},{concept:{name:"sidebar"},module:"DTB"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["menuitem","group"],["menuitemradio","group"],["menuitemcheckbox","group"],["menuitem"],["menuitemcheckbox"],["menuitemradio"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/menubarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":"horizontal"},relatedConcepts:[{concept:{name:"toolbar"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["menuitem","group"],["menuitemradio","group"],["menuitemcheckbox","group"],["menuitem"],["menuitemcheckbox"],["menuitemradio"]],requiredProps:{},superClass:[["roletype","widget","composite","select","menu"],["roletype","structure","section","group","select","menu"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null,"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{name:"MENU_ITEM"},module:"JAPI"},{concept:{name:"listitem"},module:"ARIA"},{concept:{name:"option"},module:"ARIA"}],requireContextRole:["group","menu","menubar"],requiredContextRole:["group","menu","menubar"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","command"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"menuitem"},module:"ARIA"}],requireContextRole:["group","menu","menubar"],requiredContextRole:["group","menu","menubar"],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input","checkbox"],["roletype","widget","command","menuitem"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"menuitem"},module:"ARIA"}],requireContextRole:["group","menu","menubar"],requiredContextRole:["group","menu","menubar"],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input","checkbox","menuitemcheckbox"],["roletype","widget","command","menuitem","menuitemcheckbox"],["roletype","widget","input","radio"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/meterRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-valuetext":null,"aria-valuemax":"100","aria-valuemin":"0"},relatedConcepts:[{concept:{name:"meter"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-valuenow":null},superClass:[["roletype","structure","range"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/navigationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"nav"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/noneRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:[],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/noteRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/optionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-checked":null,"aria-posinset":null,"aria-setsize":null,"aria-selected":"false"},relatedConcepts:[{concept:{name:"item"},module:"XForms"},{concept:{name:"listitem"},module:"ARIA"},{concept:{name:"option"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-selected":"false"},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"p"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/presentationRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{attributes:[{name:"alt",value:""}],name:"img"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-valuetext":null},relatedConcepts:[{concept:{name:"progress"},module:"HTML"},{concept:{name:"status"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","range"],["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/radioRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-checked":null,"aria-posinset":null,"aria-setsize":null},relatedConcepts:[{concept:{attributes:[{name:"type",value:"radio"}],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null},relatedConcepts:[{concept:{name:"list"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["radio"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/regionRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["set"],name:"aria-label"}],name:"section"},module:"HTML"},{concept:{attributes:[{constraints:["set"],name:"aria-labelledby"}],name:"section"},module:"HTML"},{concept:{name:"Device Independence Glossart perceivable unit"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/rowRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-colindex":null,"aria-expanded":null,"aria-level":null,"aria-posinset":null,"aria-rowindex":null,"aria-selected":null,"aria-setsize":null},relatedConcepts:[{concept:{name:"tr"},module:"HTML"}],requireContextRole:["grid","rowgroup","table","treegrid"],requiredContextRole:["grid","rowgroup","table","treegrid"],requiredOwnedElements:[["cell"],["columnheader"],["gridcell"],["rowheader"]],requiredProps:{},superClass:[["roletype","structure","section","group"],["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"tbody"},module:"HTML"},{concept:{name:"tfoot"},module:"HTML"},{concept:{name:"thead"},module:"HTML"}],requireContextRole:["grid","table","treegrid"],requiredContextRole:["grid","table","treegrid"],requiredOwnedElements:[["row"]],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-sort":null},relatedConcepts:[{concept:{attributes:[{name:"scope",value:"row"}],name:"th"},module:"HTML"},{concept:{attributes:[{name:"scope",value:"rowgroup"}],name:"th"},module:"HTML"}],requireContextRole:["row","rowgroup"],requiredContextRole:["row","rowgroup"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","cell"],["roletype","structure","section","cell","gridcell"],["roletype","widget","gridcell"],["roletype","structure","sectionhead"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-valuetext":null,"aria-orientation":"vertical","aria-valuemax":"100","aria-valuemin":"0"},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-controls":null,"aria-valuenow":null},superClass:[["roletype","structure","range"],["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/searchRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","landmark"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"search"}],constraints:["the list attribute is not set"],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","input","textbox"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/separatorRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-disabled":null,"aria-orientation":"horizontal","aria-valuemax":"100","aria-valuemin":"0","aria-valuenow":null,"aria-valuetext":null},relatedConcepts:[{concept:{name:"hr"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/sliderRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-haspopup":null,"aria-invalid":null,"aria-readonly":null,"aria-valuetext":null,"aria-orientation":"horizontal","aria-valuemax":"100","aria-valuemin":"0"},relatedConcepts:[{concept:{attributes:[{name:"type",value:"range"}],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-valuenow":null},superClass:[["roletype","widget","input"],["roletype","structure","range"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null,"aria-readonly":null,"aria-required":null,"aria-valuetext":null,"aria-valuenow":"0"},relatedConcepts:[{concept:{attributes:[{name:"type",value:"number"}],name:"input"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","composite"],["roletype","widget","input"],["roletype","structure","range"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/statusRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-atomic":"true","aria-live":"polite"},relatedConcepts:[{concept:{name:"output"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/strongRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"strong"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"sub"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["prohibited"],prohibitedProps:["aria-label","aria-labelledby"],props:{},relatedConcepts:[{concept:{name:"sup"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/switchRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"button"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{"aria-checked":null},superClass:[["roletype","widget","input","checkbox"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/tabRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!0,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-disabled":null,"aria-expanded":null,"aria-haspopup":null,"aria-posinset":null,"aria-setsize":null,"aria-selected":"false"},relatedConcepts:[],requireContextRole:["tablist"],requiredContextRole:["tablist"],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","sectionhead"],["roletype","widget"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/tableRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-colcount":null,"aria-rowcount":null},relatedConcepts:[{concept:{name:"table"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["row"],["row","rowgroup"]],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/tablistRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-level":null,"aria-multiselectable":null,"aria-orientation":"horizontal"},relatedConcepts:[{module:"DAISY",concept:{name:"guide"}}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["tab"]],requiredProps:{},superClass:[["roletype","widget","composite"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/termRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"dfn"},module:"HTML"},{concept:{name:"dt"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/textboxRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-activedescendant":null,"aria-autocomplete":null,"aria-errormessage":null,"aria-haspopup":null,"aria-invalid":null,"aria-multiline":null,"aria-placeholder":null,"aria-readonly":null,"aria-required":null},relatedConcepts:[{concept:{attributes:[{constraints:["undefined"],name:"type"},{constraints:["undefined"],name:"list"}],constraints:["the list attribute is not set"],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"email"}],constraints:["the list attribute is not set"],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"tel"}],constraints:["the list attribute is not set"],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"text"}],constraints:["the list attribute is not set"],name:"input"},module:"HTML"},{concept:{attributes:[{constraints:["undefined"],name:"list"},{name:"type",value:"url"}],constraints:["the list attribute is not set"],name:"input"},module:"HTML"},{concept:{name:"input"},module:"XForms"},{concept:{name:"textarea"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","widget","input"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/timeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[{concept:{name:"time"},module:"HTML"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/timerRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","status"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!1,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-orientation":"horizontal"},relatedConcepts:[{concept:{name:"menubar"},module:"ARIA"}],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section","group"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[],requiredProps:{},superClass:[["roletype","structure","section"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/treeRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{"aria-errormessage":null,"aria-invalid":null,"aria-multiselectable":null,"aria-required":null,"aria-orientation":"vertical"},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["treeitem","group"],["treeitem"]],requiredProps:{},superClass:[["roletype","widget","composite","select"],["roletype","structure","section","group","select"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/treegridRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author"],prohibitedProps:[],props:{},relatedConcepts:[],requireContextRole:[],requiredContextRole:[],requiredOwnedElements:[["row"],["row","rowgroup"]],requiredProps:{},superClass:[["roletype","widget","composite","grid"],["roletype","structure","section","table","grid"],["roletype","widget","composite","select","tree"],["roletype","structure","section","group","select","tree"]]};exports.default=_default},"./node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default={abstract:!1,accessibleNameRequired:!0,baseConcepts:[],childrenPresentational:!1,nameFrom:["author","contents"],prohibitedProps:[],props:{"aria-expanded":null,"aria-haspopup":null},relatedConcepts:[],requireContextRole:["group","tree"],requiredContextRole:["group","tree"],requiredOwnedElements:[],requiredProps:{"aria-selected":null},superClass:[["roletype","structure","section","listitem"],["roletype","widget","input","option"]]};exports.default=_default},"./node_modules/aria-query/lib/index.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";exports.uJ=void 0;var _ariaPropsMap=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/ariaPropsMap.js")),_domMap=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/domMap.js")),_rolesMap=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/rolesMap.js")),_elementRoleMap=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/elementRoleMap.js")),_roleElementMap=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/roleElementMap.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}_ariaPropsMap.default,_domMap.default;var roles=_rolesMap.default;exports.uJ=roles,_elementRoleMap.default,_roleElementMap.default},"./node_modules/aria-query/lib/roleElementMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _iterationDecorator=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/util/iterationDecorator.js")),_rolesMap=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/rolesMap.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}for(var roleElement=[],keys=_rolesMap.default.keys(),i=0;i<keys.length;i++){var key=keys[i],role=_rolesMap.default.get(key),relationConcepts=[];if(role){for(var concepts=[].concat(role.baseConcepts,role.relatedConcepts),k=0;k<concepts.length;k++){var relation=concepts[k];if("HTML"===relation.module){var concept=relation.concept;null!=concept&&relationConcepts.push(concept)}}relationConcepts.length>0&&roleElement.push([key,relationConcepts])}}var roleElementMap={entries:function entries(){return roleElement},forEach:function forEach(fn){var _step,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(roleElement);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),_key=_step$value[0],values=_step$value[1];fn.call(thisArg,values,_key,roleElement)}}catch(err){_iterator.e(err)}finally{_iterator.f()}},get:function get(key){var item=roleElement.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!roleElementMap.get(key)},keys:function keys(){return roleElement.map((function(_ref){return _slicedToArray(_ref,1)[0]}))},values:function values(){return roleElement.map((function(_ref3){return _slicedToArray(_ref3,2)[1]}))}},_default=(0,_iterationDecorator.default)(roleElementMap,roleElementMap.entries());exports.default=_default},"./node_modules/aria-query/lib/rolesMap.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _ariaAbstractRoles=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js")),_ariaLiteralRoles=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js")),_ariaDpubRoles=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js")),_ariaGraphicsRoles=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js")),_iterationDecorator=_interopRequireDefault(__webpack_require__("./node_modules/aria-query/lib/util/iterationDecorator.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var roles=[].concat(_ariaAbstractRoles.default,_ariaLiteralRoles.default,_ariaDpubRoles.default,_ariaGraphicsRoles.default);roles.forEach((function(_ref){var _step,roleDefinition=_slicedToArray(_ref,2)[1],_iterator=_createForOfIteratorHelper(roleDefinition.superClass);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step2,_iterator2=_createForOfIteratorHelper(_step.value);try{var _loop=function _loop(){var obj,key,value,superClassName=_step2.value,superClassRoleTuple=roles.find((function(_ref3){return _slicedToArray(_ref3,1)[0]===superClassName}));if(superClassRoleTuple)for(var superClassDefinition=superClassRoleTuple[1],_i2=0,_Object$keys=Object.keys(superClassDefinition.props);_i2<_Object$keys.length;_i2++){var prop=_Object$keys[_i2];Object.prototype.hasOwnProperty.call(roleDefinition.props,prop)||Object.assign(roleDefinition.props,(obj={},key=prop,value=superClassDefinition.props[prop],key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj))}};for(_iterator2.s();!(_step2=_iterator2.n()).done;)_loop()}catch(err){_iterator2.e(err)}finally{_iterator2.f()}}}catch(err){_iterator.e(err)}finally{_iterator.f()}}));var rolesMap={entries:function entries(){return roles},forEach:function forEach(fn){var _step3,thisArg=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,_iterator3=_createForOfIteratorHelper(roles);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _step3$value=_slicedToArray(_step3.value,2),key=_step3$value[0],values=_step3$value[1];fn.call(thisArg,values,key,roles)}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}},get:function get(key){var item=roles.find((function(tuple){return tuple[0]===key}));return item&&item[1]},has:function has(key){return!!rolesMap.get(key)},keys:function keys(){return roles.map((function(_ref5){return _slicedToArray(_ref5,1)[0]}))},values:function values(){return roles.map((function(_ref7){return _slicedToArray(_ref7,2)[1]}))}},_default=(0,_iterationDecorator.default)(rolesMap,rolesMap.entries());exports.default=_default},"./node_modules/aria-query/lib/util/iterationDecorator.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function iterationDecorator(collection,entries){"function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)&&Object.defineProperty(collection,Symbol.iterator,{value:_iteratorProxy.default.bind(entries)});return collection};var _iteratorProxy=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/aria-query/lib/util/iteratorProxy.js"));function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}},"./node_modules/aria-query/lib/util/iteratorProxy.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=function iteratorProxy(){var values=this,index=0,iter={"@@iterator":function iterator(){return iter},next:function next(){if(index<values.length){var value=values[index];return index+=1,{done:!1,value:value}}return{done:!0}}};return iter};exports.default=_default},"./node_modules/array-buffer-byte-length/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var $byteLength=__webpack_require__("./node_modules/call-bind/callBound.js")("ArrayBuffer.prototype.byteLength",!0),isArrayBuffer=__webpack_require__("./node_modules/is-array-buffer/index.js");module.exports=function byteLength(ab){return isArrayBuffer(ab)?$byteLength?$byteLength(ab):ab.byteLength:NaN}},"./node_modules/css.escape/css.escape.js":function(module,__unused_webpack_exports,__webpack_require__){var root;root=void 0!==__webpack_require__.g?__webpack_require__.g:this,module.exports=function(root){if(root.CSS&&root.CSS.escape)return root.CSS.escape;var cssEscape=function(value){if(0==arguments.length)throw new TypeError("`CSS.escape` requires an argument.");for(var codeUnit,string=String(value),length=string.length,index=-1,result="",firstCodeUnit=string.charCodeAt(0);++index<length;)0!=(codeUnit=string.charCodeAt(index))?result+=codeUnit>=1&&codeUnit<=31||127==codeUnit||0==index&&codeUnit>=48&&codeUnit<=57||1==index&&codeUnit>=48&&codeUnit<=57&&45==firstCodeUnit?"\\"+codeUnit.toString(16)+" ":0==index&&1==length&&45==codeUnit||!(codeUnit>=128||45==codeUnit||95==codeUnit||codeUnit>=48&&codeUnit<=57||codeUnit>=65&&codeUnit<=90||codeUnit>=97&&codeUnit<=122)?"\\"+string.charAt(index):string.charAt(index):result+="�";return result};return root.CSS||(root.CSS={}),root.CSS.escape=cssEscape,cssEscape}(root)},"./node_modules/dequal/lite/index.js":function(__unused_webpack_module,exports){var has=Object.prototype.hasOwnProperty;exports.dequal=function dequal(foo,bar){var ctor,len;if(foo===bar)return!0;if(foo&&bar&&(ctor=foo.constructor)===bar.constructor){if(ctor===Date)return foo.getTime()===bar.getTime();if(ctor===RegExp)return foo.toString()===bar.toString();if(ctor===Array){if((len=foo.length)===bar.length)for(;len--&&dequal(foo[len],bar[len]););return-1===len}if(!ctor||"object"==typeof foo){for(ctor in len=0,foo){if(has.call(foo,ctor)&&++len&&!has.call(bar,ctor))return!1;if(!(ctor in bar)||!dequal(foo[ctor],bar[ctor]))return!1}return Object.keys(bar).length===len}}return foo!=foo&&bar!=bar}},"./node_modules/dom-accessibility-api/dist/index.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{b:function(){return computeAccessibleDescription},AB:function(){return computeAccessibleName}});var toStr=Object.prototype.toString;function isCallable(fn){return"function"==typeof fn||"[object Function]"===toStr.call(fn)}var maxSafeInteger=Math.pow(2,53)-1;function toLength(value){var len=function toInteger(value){var number=Number(value);return isNaN(number)?0:0!==number&&isFinite(number)?(number>0?1:-1)*Math.floor(Math.abs(number)):number}(value);return Math.min(Math.max(len,0),maxSafeInteger)}function arrayFrom(arrayLike,mapFn){var C=Array,items=Object(arrayLike);if(null==arrayLike)throw new TypeError("Array.from requires an array-like object - not null or undefined");if(void 0!==mapFn&&!isCallable(mapFn))throw new TypeError("Array.from: when provided, the second argument must be a function");for(var kValue,len=toLength(items.length),A=isCallable(C)?Object(new C(len)):new Array(len),k=0;k<len;)kValue=items[k],A[k]=mapFn?mapFn(kValue,k):kValue,k+=1;return A.length=len,A}function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,_toPropertyKey(descriptor.key),descriptor)}}function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!==_typeof(input)||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!==_typeof(res))return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"===_typeof(key)?key:String(key)}var SetLike=function(){function SetLike(){var items=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,SetLike),function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(this,"items",void 0),this.items=items}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(SetLike,[{key:"add",value:function add(value){return!1===this.has(value)&&this.items.push(value),this}},{key:"clear",value:function clear(){this.items=[]}},{key:"delete",value:function _delete(value){var previousLength=this.items.length;return this.items=this.items.filter((function(item){return item!==value})),previousLength!==this.items.length}},{key:"forEach",value:function forEach(callbackfn){var _this=this;this.items.forEach((function(item){callbackfn(item,item,_this)}))}},{key:"has",value:function has(value){return-1!==this.items.indexOf(value)}},{key:"size",get:function get(){return this.items.length}}]),SetLike}(),polyfills_SetLike="undefined"==typeof Set?Set:SetLike;function getLocalName(element){var _element$localName;return null!==(_element$localName=element.localName)&&void 0!==_element$localName?_element$localName:element.tagName.toLowerCase()}var localNameToRoleMappings={article:"article",aside:"complementary",button:"button",datalist:"listbox",dd:"definition",details:"group",dialog:"dialog",dt:"term",fieldset:"group",figure:"figure",form:"form",footer:"contentinfo",h1:"heading",h2:"heading",h3:"heading",h4:"heading",h5:"heading",h6:"heading",header:"banner",hr:"separator",html:"document",legend:"legend",li:"listitem",math:"math",main:"main",menu:"list",nav:"navigation",ol:"list",optgroup:"group",option:"option",output:"status",progress:"progressbar",section:"region",summary:"button",table:"table",tbody:"rowgroup",textarea:"textbox",tfoot:"rowgroup",td:"cell",th:"columnheader",thead:"rowgroup",tr:"row",ul:"list"},prohibitedAttributes={caption:new Set(["aria-label","aria-labelledby"]),code:new Set(["aria-label","aria-labelledby"]),deletion:new Set(["aria-label","aria-labelledby"]),emphasis:new Set(["aria-label","aria-labelledby"]),generic:new Set(["aria-label","aria-labelledby","aria-roledescription"]),insertion:new Set(["aria-label","aria-labelledby"]),paragraph:new Set(["aria-label","aria-labelledby"]),presentation:new Set(["aria-label","aria-labelledby"]),strong:new Set(["aria-label","aria-labelledby"]),subscript:new Set(["aria-label","aria-labelledby"]),superscript:new Set(["aria-label","aria-labelledby"])};function ignorePresentationalRole(element,implicitRole){return function hasGlobalAriaAttributes(element,role){return["aria-atomic","aria-busy","aria-controls","aria-current","aria-describedby","aria-details","aria-dropeffect","aria-flowto","aria-grabbed","aria-hidden","aria-keyshortcuts","aria-label","aria-labelledby","aria-live","aria-owns","aria-relevant","aria-roledescription"].some((function(attributeName){var _prohibitedAttributes;return element.hasAttribute(attributeName)&&!(null!==(_prohibitedAttributes=prohibitedAttributes[role])&&void 0!==_prohibitedAttributes&&_prohibitedAttributes.has(attributeName))}))}(element,implicitRole)}function getRole(element){var explicitRole=function getExplicitRole(element){var role=element.getAttribute("role");if(null!==role){var explicitRole=role.trim().split(" ")[0];if(explicitRole.length>0)return explicitRole}return null}(element);if(null===explicitRole||"presentation"===explicitRole){var implicitRole=function getImplicitRole(element){var mappedByTag=localNameToRoleMappings[getLocalName(element)];if(void 0!==mappedByTag)return mappedByTag;switch(getLocalName(element)){case"a":case"area":case"link":if(element.hasAttribute("href"))return"link";break;case"img":return""!==element.getAttribute("alt")||ignorePresentationalRole(element,"img")?"img":"presentation";case"input":var type=element.type;switch(type){case"button":case"image":case"reset":case"submit":return"button";case"checkbox":case"radio":return type;case"range":return"slider";case"email":case"tel":case"text":case"url":return element.hasAttribute("list")?"combobox":"textbox";case"search":return element.hasAttribute("list")?"combobox":"searchbox";case"number":return"spinbutton";default:return null}case"select":return element.hasAttribute("multiple")||element.size>1?"listbox":"combobox"}return null}(element);if("presentation"!==explicitRole||ignorePresentationalRole(element,implicitRole||""))return implicitRole}return explicitRole}function isElement(node){return null!==node&&node.nodeType===node.ELEMENT_NODE}function isHTMLTableCaptionElement(node){return isElement(node)&&"caption"===getLocalName(node)}function isHTMLInputElement(node){return isElement(node)&&"input"===getLocalName(node)}function isHTMLLegendElement(node){return isElement(node)&&"legend"===getLocalName(node)}function isSVGTitleElement(node){return function isSVGElement(node){return isElement(node)&&void 0!==node.ownerSVGElement}(node)&&"title"===getLocalName(node)}function queryIdRefs(node,attributeName){if(isElement(node)&&node.hasAttribute(attributeName)){var ids=node.getAttribute(attributeName).split(" "),root=node.getRootNode?node.getRootNode():node.ownerDocument;return ids.map((function(id){return root.getElementById(id)})).filter((function(element){return null!==element}))}return[]}function hasAnyConcreteRoles(node,roles){return!!isElement(node)&&-1!==roles.indexOf(getRole(node))}function hasAbstractRole(node,role){if(!isElement(node))return!1;if("range"===role)return hasAnyConcreteRoles(node,["meter","progressbar","scrollbar","slider","spinbutton"]);throw new TypeError("No knowledge about abstract role '".concat(role,"'. This is likely a bug :("))}function querySelectorAllSubtree(element,selectors){var elements=arrayFrom(element.querySelectorAll(selectors));return queryIdRefs(element,"aria-owns").forEach((function(root){elements.push.apply(elements,arrayFrom(root.querySelectorAll(selectors)))})),elements}function querySelectedOptions(listbox){return function isHTMLSelectElement(node){return isElement(node)&&"select"===getLocalName(node)}(listbox)?listbox.selectedOptions||querySelectorAllSubtree(listbox,"[selected]"):querySelectorAllSubtree(listbox,'[aria-selected="true"]')}function getValueOfTextbox(element){return isHTMLInputElement(element)||function isHTMLTextAreaElement(node){return isElement(node)&&"textarea"===getLocalName(node)}(element)?element.value:element.textContent||""}function getTextualContent(declaration){var content=declaration.getPropertyValue("content");return/^["'].*["']$/.test(content)?content.slice(1,-1):""}function isLabelableElement(element){var localName=getLocalName(element);return"button"===localName||"input"===localName&&"hidden"!==element.getAttribute("type")||"meter"===localName||"output"===localName||"progress"===localName||"select"===localName||"textarea"===localName}function findLabelableElement(element){if(isLabelableElement(element))return element;var labelableElement=null;return element.childNodes.forEach((function(childNode){if(null===labelableElement&&isElement(childNode)){var descendantLabelableElement=findLabelableElement(childNode);null!==descendantLabelableElement&&(labelableElement=descendantLabelableElement)}})),labelableElement}function getControlOfLabel(label){if(void 0!==label.control)return label.control;var htmlFor=label.getAttribute("for");return null!==htmlFor?label.ownerDocument.getElementById(htmlFor):findLabelableElement(label)}function computeTextAlternative(root){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},consultedNodes=new polyfills_SetLike,window=function safeWindow(node){var defaultView=(null===node.ownerDocument?node:node.ownerDocument).defaultView;if(null===defaultView)throw new TypeError("no window available");return defaultView}(root),_options$compute=options.compute,compute=void 0===_options$compute?"name":_options$compute,_options$computedStyl=options.computedStyleSupportsPseudoElements,computedStyleSupportsPseudoElements=void 0===_options$computedStyl?void 0!==options.getComputedStyle:_options$computedStyl,_options$getComputedS=options.getComputedStyle,getComputedStyle=void 0===_options$getComputedS?window.getComputedStyle.bind(window):_options$getComputedS,_options$hidden=options.hidden,hidden=void 0!==_options$hidden&&_options$hidden;function computeMiscTextAlternative(node,context){var accumulatedText="";if(isElement(node)&&computedStyleSupportsPseudoElements){var beforeContent=getTextualContent(getComputedStyle(node,"::before"));accumulatedText="".concat(beforeContent," ").concat(accumulatedText)}if((function isHTMLSlotElement(node){return isElement(node)&&"slot"===getLocalName(node)}(node)?function getSlotContents(slot){var assignedNodes=slot.assignedNodes();return 0===assignedNodes.length?arrayFrom(slot.childNodes):assignedNodes}(node):arrayFrom(node.childNodes).concat(queryIdRefs(node,"aria-owns"))).forEach((function(child){var result=computeTextAlternative(child,{isEmbeddedInLabel:context.isEmbeddedInLabel,isReferenced:!1,recursion:!0}),separator="inline"!==(isElement(child)?getComputedStyle(child).getPropertyValue("display"):"inline")?" ":"";accumulatedText+="".concat(separator).concat(result).concat(separator)})),isElement(node)&&computedStyleSupportsPseudoElements){var afterContent=getTextualContent(getComputedStyle(node,"::after"));accumulatedText="".concat(accumulatedText," ").concat(afterContent)}return accumulatedText.trim()}function useAttribute(element,attributeName){var attribute=element.getAttributeNode(attributeName);return null===attribute||consultedNodes.has(attribute)||""===attribute.value.trim()?null:(consultedNodes.add(attribute),attribute.value)}function computeElementTextAlternative(node){if(!isElement(node))return null;if(function isHTMLFieldSetElement(node){return isElement(node)&&"fieldset"===getLocalName(node)}(node)){consultedNodes.add(node);for(var children=arrayFrom(node.childNodes),i=0;i<children.length;i+=1){var child=children[i];if(isHTMLLegendElement(child))return computeTextAlternative(child,{isEmbeddedInLabel:!1,isReferenced:!1,recursion:!1})}}else if(function isHTMLTableElement(node){return isElement(node)&&"table"===getLocalName(node)}(node)){consultedNodes.add(node);for(var _children=arrayFrom(node.childNodes),_i=0;_i<_children.length;_i+=1){var _child=_children[_i];if(isHTMLTableCaptionElement(_child))return computeTextAlternative(_child,{isEmbeddedInLabel:!1,isReferenced:!1,recursion:!1})}}else{if(function isSVGSVGElement(node){return isElement(node)&&"svg"===getLocalName(node)}(node)){consultedNodes.add(node);for(var _children2=arrayFrom(node.childNodes),_i2=0;_i2<_children2.length;_i2+=1){var _child2=_children2[_i2];if(isSVGTitleElement(_child2))return _child2.textContent}return null}if("img"===getLocalName(node)||"area"===getLocalName(node)){var nameFromAlt=useAttribute(node,"alt");if(null!==nameFromAlt)return nameFromAlt}else if(function isHTMLOptGroupElement(node){return isElement(node)&&"optgroup"===getLocalName(node)}(node)){var nameFromLabel=useAttribute(node,"label");if(null!==nameFromLabel)return nameFromLabel}}if(isHTMLInputElement(node)&&("button"===node.type||"submit"===node.type||"reset"===node.type)){var nameFromValue=useAttribute(node,"value");if(null!==nameFromValue)return nameFromValue;if("submit"===node.type)return"Submit";if("reset"===node.type)return"Reset"}var labels=function getLabels(element){var labelsProperty=element.labels;return null===labelsProperty?labelsProperty:void 0!==labelsProperty?arrayFrom(labelsProperty):isLabelableElement(element)?arrayFrom(element.ownerDocument.querySelectorAll("label")).filter((function(label){return getControlOfLabel(label)===element})):null}(node);if(null!==labels&&0!==labels.length)return consultedNodes.add(node),arrayFrom(labels).map((function(element){return computeTextAlternative(element,{isEmbeddedInLabel:!0,isReferenced:!1,recursion:!0})})).filter((function(label){return label.length>0})).join(" ");if(isHTMLInputElement(node)&&"image"===node.type){var _nameFromAlt=useAttribute(node,"alt");if(null!==_nameFromAlt)return _nameFromAlt;var nameFromTitle=useAttribute(node,"title");return null!==nameFromTitle?nameFromTitle:"Submit Query"}if(hasAnyConcreteRoles(node,["button"])){var nameFromSubTree=computeMiscTextAlternative(node,{isEmbeddedInLabel:!1,isReferenced:!1});if(""!==nameFromSubTree)return nameFromSubTree}return null}function computeTextAlternative(current,context){if(consultedNodes.has(current))return"";if(!hidden&&function isHidden(node,getComputedStyleImplementation){if(!isElement(node))return!1;if(node.hasAttribute("hidden")||"true"===node.getAttribute("aria-hidden"))return!0;var style=getComputedStyleImplementation(node);return"none"===style.getPropertyValue("display")||"hidden"===style.getPropertyValue("visibility")}(current,getComputedStyle)&&!context.isReferenced)return consultedNodes.add(current),"";var labelAttributeNode=isElement(current)?current.getAttributeNode("aria-labelledby"):null,labelElements=null===labelAttributeNode||consultedNodes.has(labelAttributeNode)?[]:queryIdRefs(current,"aria-labelledby");if("name"===compute&&!context.isReferenced&&labelElements.length>0)return consultedNodes.add(labelAttributeNode),labelElements.map((function(element){return computeTextAlternative(element,{isEmbeddedInLabel:context.isEmbeddedInLabel,isReferenced:!0,recursion:!1})})).join(" ");var skipToStep2E=context.recursion&&function isControl(node){return hasAnyConcreteRoles(node,["button","combobox","listbox","textbox"])||hasAbstractRole(node,"range")}(current)&&"name"===compute;if(!skipToStep2E){var ariaLabel=(isElement(current)&&current.getAttribute("aria-label")||"").trim();if(""!==ariaLabel&&"name"===compute)return consultedNodes.add(current),ariaLabel;if(!function isMarkedPresentational(node){return hasAnyConcreteRoles(node,["none","presentation"])}(current)){var elementTextAlternative=computeElementTextAlternative(current);if(null!==elementTextAlternative)return consultedNodes.add(current),elementTextAlternative}}if(hasAnyConcreteRoles(current,["menu"]))return consultedNodes.add(current),"";if(skipToStep2E||context.isEmbeddedInLabel||context.isReferenced){if(hasAnyConcreteRoles(current,["combobox","listbox"])){consultedNodes.add(current);var selectedOptions=querySelectedOptions(current);return 0===selectedOptions.length?isHTMLInputElement(current)?current.value:"":arrayFrom(selectedOptions).map((function(selectedOption){return computeTextAlternative(selectedOption,{isEmbeddedInLabel:context.isEmbeddedInLabel,isReferenced:!1,recursion:!0})})).join(" ")}if(hasAbstractRole(current,"range"))return consultedNodes.add(current),current.hasAttribute("aria-valuetext")?current.getAttribute("aria-valuetext"):current.hasAttribute("aria-valuenow")?current.getAttribute("aria-valuenow"):current.getAttribute("value")||"";if(hasAnyConcreteRoles(current,["textbox"]))return consultedNodes.add(current),getValueOfTextbox(current)}if(function allowsNameFromContent(node){return hasAnyConcreteRoles(node,["button","cell","checkbox","columnheader","gridcell","heading","label","legend","link","menuitem","menuitemcheckbox","menuitemradio","option","radio","row","rowheader","switch","tab","tooltip","treeitem"])}(current)||isElement(current)&&context.isReferenced||function isNativeHostLanguageTextAlternativeElement(node){return isHTMLTableCaptionElement(node)}(current)){var accumulatedText2F=computeMiscTextAlternative(current,{isEmbeddedInLabel:context.isEmbeddedInLabel,isReferenced:!1});if(""!==accumulatedText2F)return consultedNodes.add(current),accumulatedText2F}if(current.nodeType===current.TEXT_NODE)return consultedNodes.add(current),current.textContent||"";if(context.recursion)return consultedNodes.add(current),computeMiscTextAlternative(current,{isEmbeddedInLabel:context.isEmbeddedInLabel,isReferenced:!1});var tooltipAttributeValue=function computeTooltipAttributeValue(node){return isElement(node)?useAttribute(node,"title"):null}(current);return null!==tooltipAttributeValue?(consultedNodes.add(current),tooltipAttributeValue):(consultedNodes.add(current),"")}return function asFlatString(s){return s.trim().replace(/\s\s+/g," ")}(computeTextAlternative(root,{isEmbeddedInLabel:!1,isReferenced:"description"===compute,recursion:!1}))}function accessible_description_typeof(obj){return accessible_description_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},accessible_description_typeof(obj)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){accessible_description_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function accessible_description_defineProperty(obj,key,value){return(key=function accessible_description_toPropertyKey(arg){var key=function accessible_description_toPrimitive(input,hint){if("object"!==accessible_description_typeof(input)||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!==accessible_description_typeof(res))return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"===accessible_description_typeof(key)?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function computeAccessibleDescription(root){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},description=queryIdRefs(root,"aria-describedby").map((function(element){return computeTextAlternative(element,_objectSpread(_objectSpread({},options),{},{compute:"description"}))})).join(" ");if(""===description){var title=root.getAttribute("title");description=null===title?"":title}return description}function computeAccessibleName(root){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function prohibitsNaming(node){return hasAnyConcreteRoles(node,["caption","code","deletion","emphasis","generic","insertion","paragraph","presentation","strong","subscript","superscript"])}(root)?"":computeTextAlternative(root,options)}},"./node_modules/es-get-iterator/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var process=__webpack_require__("./node_modules/process/browser.js"),isArguments=__webpack_require__("./node_modules/is-arguments/index.js"),getStopIterationIterator=__webpack_require__("./node_modules/stop-iteration-iterator/index.js");if(__webpack_require__("./node_modules/has-symbols/index.js")()||__webpack_require__("./node_modules/has-symbols/shams.js")()){var $iterator=Symbol.iterator;module.exports=function getIterator(iterable){return null!=iterable&&void 0!==iterable[$iterator]?iterable[$iterator]():isArguments(iterable)?Array.prototype[$iterator].call(iterable):void 0}}else{var isArray=__webpack_require__("./node_modules/es-get-iterator/node_modules/isarray/index.js"),isString=__webpack_require__("./node_modules/is-string/index.js"),GetIntrinsic=__webpack_require__("./node_modules/get-intrinsic/index.js"),$Map=GetIntrinsic("%Map%",!0),$Set=GetIntrinsic("%Set%",!0),callBound=__webpack_require__("./node_modules/call-bind/callBound.js"),$arrayPush=callBound("Array.prototype.push"),$charCodeAt=callBound("String.prototype.charCodeAt"),$stringSlice=callBound("String.prototype.slice"),getArrayIterator=function getArrayIterator(arraylike){var i=0;return{next:function next(){var value,done=i>=arraylike.length;return done||(value=arraylike[i],i+=1),{done:done,value:value}}}},getNonCollectionIterator=function getNonCollectionIterator(iterable,noPrimordialCollections){if(isArray(iterable)||isArguments(iterable))return getArrayIterator(iterable);if(isString(iterable)){var i=0;return{next:function next(){var nextIndex=function advanceStringIndex(S,index){if(index+1>=S.length)return index+1;var first=$charCodeAt(S,index);if(first<55296||first>56319)return index+1;var second=$charCodeAt(S,index+1);return second<56320||second>57343?index+1:index+2}(iterable,i),value=$stringSlice(iterable,i,nextIndex);return i=nextIndex,{done:nextIndex>iterable.length,value:value}}}}return noPrimordialCollections&&void 0!==iterable["_es6-shim iterator_"]?iterable["_es6-shim iterator_"]():void 0};if($Map||$Set){var isMap=__webpack_require__("./node_modules/is-map/index.js"),isSet=__webpack_require__("./node_modules/is-set/index.js"),$mapForEach=callBound("Map.prototype.forEach",!0),$setForEach=callBound("Set.prototype.forEach",!0);if(void 0===process||!process.versions||!process.versions.node)var $mapIterator=callBound("Map.prototype.iterator",!0),$setIterator=callBound("Set.prototype.iterator",!0);var $mapAtAtIterator=callBound("Map.prototype.@@iterator",!0)||callBound("Map.prototype._es6-shim iterator_",!0),$setAtAtIterator=callBound("Set.prototype.@@iterator",!0)||callBound("Set.prototype._es6-shim iterator_",!0);module.exports=function getIterator(iterable){return function getCollectionIterator(iterable){if(isMap(iterable)){if($mapIterator)return getStopIterationIterator($mapIterator(iterable));if($mapAtAtIterator)return $mapAtAtIterator(iterable);if($mapForEach){var entries=[];return $mapForEach(iterable,(function(v,k){$arrayPush(entries,[k,v])})),getArrayIterator(entries)}}if(isSet(iterable)){if($setIterator)return getStopIterationIterator($setIterator(iterable));if($setAtAtIterator)return $setAtAtIterator(iterable);if($setForEach){var values=[];return $setForEach(iterable,(function(v){$arrayPush(values,v)})),getArrayIterator(values)}}}(iterable)||getNonCollectionIterator(iterable)}}else module.exports=function getIterator(iterable){if(null!=iterable)return getNonCollectionIterator(iterable,!0)}}},"./node_modules/es-get-iterator/node_modules/isarray/index.js":function(module){var toString={}.toString;module.exports=Array.isArray||function(arr){return"[object Array]"==toString.call(arr)}},"./node_modules/functions-have-names/index.js":function(module){"use strict";var functionsHaveNames=function functionsHaveNames(){return"string"==typeof function f(){}.name},gOPD=Object.getOwnPropertyDescriptor;if(gOPD)try{gOPD([],"length")}catch(e){gOPD=null}functionsHaveNames.functionsHaveConfigurableNames=function functionsHaveConfigurableNames(){if(!functionsHaveNames()||!gOPD)return!1;var desc=gOPD((function(){}),"name");return!!desc&&!!desc.configurable};var $bind=Function.prototype.bind;functionsHaveNames.boundFunctionsHaveNames=function boundFunctionsHaveNames(){return functionsHaveNames()&&"function"==typeof $bind&&""!==function f(){}.bind().name},module.exports=functionsHaveNames},"./node_modules/has-bigints/index.js":function(module){"use strict";var $BigInt="undefined"!=typeof BigInt&&BigInt;module.exports=function hasNativeBigInts(){return"function"==typeof $BigInt&&"function"==typeof BigInt&&"bigint"==typeof $BigInt(42)&&"bigint"==typeof BigInt(42)}},"./node_modules/indent-string/index.js":function(module){"use strict";module.exports=(string,count=1,options)=>{if(options={indent:" ",includeEmptyLines:!1,...options},"string"!=typeof string)throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);if("number"!=typeof count)throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);if("string"!=typeof options.indent)throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``);if(0===count)return string;const regex=options.includeEmptyLines?/^/gm:/^(?!\s*$)/gm;return string.replace(regex,options.indent.repeat(count))}},"./node_modules/internal-slot/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var GetIntrinsic=__webpack_require__("./node_modules/get-intrinsic/index.js"),has=__webpack_require__("./node_modules/has/src/index.js"),channel=__webpack_require__("./node_modules/side-channel/index.js")(),$TypeError=GetIntrinsic("%TypeError%"),SLOT={assert:function(O,slot){if(!O||"object"!=typeof O&&"function"!=typeof O)throw new $TypeError("`O` is not an object");if("string"!=typeof slot)throw new $TypeError("`slot` must be a string");if(channel.assert(O),!SLOT.has(O,slot))throw new $TypeError("`"+slot+"` is not present on `O`")},get:function(O,slot){if(!O||"object"!=typeof O&&"function"!=typeof O)throw new $TypeError("`O` is not an object");if("string"!=typeof slot)throw new $TypeError("`slot` must be a string");var slots=channel.get(O);return slots&&slots["$"+slot]},has:function(O,slot){if(!O||"object"!=typeof O&&"function"!=typeof O)throw new $TypeError("`O` is not an object");if("string"!=typeof slot)throw new $TypeError("`slot` must be a string");var slots=channel.get(O);return!!slots&&has(slots,"$"+slot)},set:function(O,slot,V){if(!O||"object"!=typeof O&&"function"!=typeof O)throw new $TypeError("`O` is not an object");if("string"!=typeof slot)throw new $TypeError("`slot` must be a string");var slots=channel.get(O);slots||(slots={},channel.set(O,slots)),slots["$"+slot]=V}};Object.freeze&&Object.freeze(SLOT),module.exports=SLOT},"./node_modules/is-array-buffer/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var callBind=__webpack_require__("./node_modules/call-bind/index.js"),callBound=__webpack_require__("./node_modules/call-bind/callBound.js"),GetIntrinsic=__webpack_require__("./node_modules/get-intrinsic/index.js"),isTypedArray=__webpack_require__("./node_modules/is-typed-array/index.js"),$ArrayBuffer=GetIntrinsic("ArrayBuffer",!0),$Float32Array=GetIntrinsic("Float32Array",!0),$byteLength=callBound("ArrayBuffer.prototype.byteLength",!0),abSlice=$ArrayBuffer&&!$byteLength&&(new $ArrayBuffer).slice,$abSlice=abSlice&&callBind(abSlice);module.exports=$byteLength||$abSlice?function isArrayBuffer(obj){if(!obj||"object"!=typeof obj)return!1;try{return $byteLength?$byteLength(obj):$abSlice(obj,0),!0}catch(e){return!1}}:$Float32Array?function IsArrayBuffer(obj){try{return new $Float32Array(obj).buffer===obj&&!isTypedArray(obj)}catch(e){return"object"==typeof obj&&"RangeError"===e.name}}:function isArrayBuffer(obj){return!1}},"./node_modules/is-bigint/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";if(__webpack_require__("./node_modules/has-bigints/index.js")()){var bigIntValueOf=BigInt.prototype.valueOf;module.exports=function isBigInt(value){return null!=value&&"boolean"!=typeof value&&"string"!=typeof value&&"number"!=typeof value&&"symbol"!=typeof value&&"function"!=typeof value&&("bigint"==typeof value||function tryBigIntObject(value){try{return bigIntValueOf.call(value),!0}catch(e){}return!1}(value))}}else module.exports=function isBigInt(value){return!1}},"./node_modules/is-boolean-object/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var callBound=__webpack_require__("./node_modules/call-bind/callBound.js"),$boolToStr=callBound("Boolean.prototype.toString"),$toString=callBound("Object.prototype.toString"),hasToStringTag=__webpack_require__("./node_modules/has-tostringtag/shams.js")();module.exports=function isBoolean(value){return"boolean"==typeof value||null!==value&&"object"==typeof value&&(hasToStringTag&&Symbol.toStringTag in value?function booleanBrandCheck(value){try{return $boolToStr(value),!0}catch(e){return!1}}(value):"[object Boolean]"===$toString(value))}},"./node_modules/is-date-object/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var getDay=Date.prototype.getDay,toStr=Object.prototype.toString,hasToStringTag=__webpack_require__("./node_modules/has-tostringtag/shams.js")();module.exports=function isDateObject(value){return"object"==typeof value&&null!==value&&(hasToStringTag?function tryDateGetDayCall(value){try{return getDay.call(value),!0}catch(e){return!1}}(value):"[object Date]"===toStr.call(value))}},"./node_modules/is-map/index.js":function(module){"use strict";var exported,$Map="function"==typeof Map&&Map.prototype?Map:null,$Set="function"==typeof Set&&Set.prototype?Set:null;$Map||(exported=function isMap(x){return!1});var $mapHas=$Map?Map.prototype.has:null,$setHas=$Set?Set.prototype.has:null;exported||$mapHas||(exported=function isMap(x){return!1}),module.exports=exported||function isMap(x){if(!x||"object"!=typeof x)return!1;try{if($mapHas.call(x),$setHas)try{$setHas.call(x)}catch(e){return!0}return x instanceof $Map}catch(e){}return!1}},"./node_modules/is-number-object/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var numToStr=Number.prototype.toString,toStr=Object.prototype.toString,hasToStringTag=__webpack_require__("./node_modules/has-tostringtag/shams.js")();module.exports=function isNumberObject(value){return"number"==typeof value||"object"==typeof value&&(hasToStringTag?function tryNumberObject(value){try{return numToStr.call(value),!0}catch(e){return!1}}(value):"[object Number]"===toStr.call(value))}},"./node_modules/is-regex/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var has,$exec,isRegexMarker,badStringifier,callBound=__webpack_require__("./node_modules/call-bind/callBound.js"),hasToStringTag=__webpack_require__("./node_modules/has-tostringtag/shams.js")();if(hasToStringTag){has=callBound("Object.prototype.hasOwnProperty"),$exec=callBound("RegExp.prototype.exec"),isRegexMarker={};var throwRegexMarker=function(){throw isRegexMarker};badStringifier={toString:throwRegexMarker,valueOf:throwRegexMarker},"symbol"==typeof Symbol.toPrimitive&&(badStringifier[Symbol.toPrimitive]=throwRegexMarker)}var $toString=callBound("Object.prototype.toString"),gOPD=Object.getOwnPropertyDescriptor;module.exports=hasToStringTag?function isRegex(value){if(!value||"object"!=typeof value)return!1;var descriptor=gOPD(value,"lastIndex");if(!(descriptor&&has(descriptor,"value")))return!1;try{$exec(value,badStringifier)}catch(e){return e===isRegexMarker}}:function isRegex(value){return!(!value||"object"!=typeof value&&"function"!=typeof value)&&"[object RegExp]"===$toString(value)}},"./node_modules/is-set/index.js":function(module){"use strict";var exported,$Map="function"==typeof Map&&Map.prototype?Map:null,$Set="function"==typeof Set&&Set.prototype?Set:null;$Set||(exported=function isSet(x){return!1});var $mapHas=$Map?Map.prototype.has:null,$setHas=$Set?Set.prototype.has:null;exported||$setHas||(exported=function isSet(x){return!1}),module.exports=exported||function isSet(x){if(!x||"object"!=typeof x)return!1;try{if($setHas.call(x),$mapHas)try{$mapHas.call(x)}catch(e){return!0}return x instanceof $Set}catch(e){}return!1}},"./node_modules/is-shared-array-buffer/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var $byteLength=__webpack_require__("./node_modules/call-bind/callBound.js")("SharedArrayBuffer.prototype.byteLength",!0);module.exports=$byteLength?function isSharedArrayBuffer(obj){if(!obj||"object"!=typeof obj)return!1;try{return $byteLength(obj),!0}catch(e){return!1}}:function isSharedArrayBuffer(obj){return!1}},"./node_modules/is-string/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var strValue=String.prototype.valueOf,toStr=Object.prototype.toString,hasToStringTag=__webpack_require__("./node_modules/has-tostringtag/shams.js")();module.exports=function isString(value){return"string"==typeof value||"object"==typeof value&&(hasToStringTag?function tryStringObject(value){try{return strValue.call(value),!0}catch(e){return!1}}(value):"[object String]"===toStr.call(value))}},"./node_modules/is-symbol/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var toStr=Object.prototype.toString;if(__webpack_require__("./node_modules/has-symbols/index.js")()){var symToStr=Symbol.prototype.toString,symStringRegex=/^Symbol\(.*\)$/;module.exports=function isSymbol(value){if("symbol"==typeof value)return!0;if("[object Symbol]"!==toStr.call(value))return!1;try{return function isRealSymbolObject(value){return"symbol"==typeof value.valueOf()&&symStringRegex.test(symToStr.call(value))}(value)}catch(e){return!1}}}else module.exports=function isSymbol(value){return!1}},"./node_modules/is-weakmap/index.js":function(module){"use strict";var exported,$WeakMap="function"==typeof WeakMap&&WeakMap.prototype?WeakMap:null,$WeakSet="function"==typeof WeakSet&&WeakSet.prototype?WeakSet:null;$WeakMap||(exported=function isWeakMap(x){return!1});var $mapHas=$WeakMap?$WeakMap.prototype.has:null,$setHas=$WeakSet?$WeakSet.prototype.has:null;exported||$mapHas||(exported=function isWeakMap(x){return!1}),module.exports=exported||function isWeakMap(x){if(!x||"object"!=typeof x)return!1;try{if($mapHas.call(x,$mapHas),$setHas)try{$setHas.call(x,$setHas)}catch(e){return!0}return x instanceof $WeakMap}catch(e){}return!1}},"./node_modules/is-weakset/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var GetIntrinsic=__webpack_require__("./node_modules/get-intrinsic/index.js"),callBound=__webpack_require__("./node_modules/call-bind/callBound.js"),$WeakSet=GetIntrinsic("%WeakSet%",!0),$setHas=callBound("WeakSet.prototype.has",!0);if($setHas){var $mapHas=callBound("WeakMap.prototype.has",!0);module.exports=function isWeakSet(x){if(!x||"object"!=typeof x)return!1;try{if($setHas(x,$setHas),$mapHas)try{$mapHas(x,$mapHas)}catch(e){return!0}return x instanceof $WeakSet}catch(e){}return!1}}else module.exports=function isWeakSet(x){return!1}},"./node_modules/lodash/_arrayIncludes.js":function(module,__unused_webpack_exports,__webpack_require__){var baseIndexOf=__webpack_require__("./node_modules/lodash/_baseIndexOf.js");module.exports=function arrayIncludes(array,value){return!!(null==array?0:array.length)&&baseIndexOf(array,value,0)>-1}},"./node_modules/lodash/_arrayIncludesWith.js":function(module){module.exports=function arrayIncludesWith(array,value,comparator){for(var index=-1,length=null==array?0:array.length;++index<length;)if(comparator(value,array[index]))return!0;return!1}},"./node_modules/lodash/_baseFindIndex.js":function(module){module.exports=function baseFindIndex(array,predicate,fromIndex,fromRight){for(var length=array.length,index=fromIndex+(fromRight?1:-1);fromRight?index--:++index<length;)if(predicate(array[index],index,array))return index;return-1}},"./node_modules/lodash/_baseIndexOf.js":function(module,__unused_webpack_exports,__webpack_require__){var baseFindIndex=__webpack_require__("./node_modules/lodash/_baseFindIndex.js"),baseIsNaN=__webpack_require__("./node_modules/lodash/_baseIsNaN.js"),strictIndexOf=__webpack_require__("./node_modules/lodash/_strictIndexOf.js");module.exports=function baseIndexOf(array,value,fromIndex){return value==value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex)}},"./node_modules/lodash/_baseIsNaN.js":function(module){module.exports=function baseIsNaN(value){return value!=value}},"./node_modules/lodash/_baseUniq.js":function(module,__unused_webpack_exports,__webpack_require__){var SetCache=__webpack_require__("./node_modules/lodash/_SetCache.js"),arrayIncludes=__webpack_require__("./node_modules/lodash/_arrayIncludes.js"),arrayIncludesWith=__webpack_require__("./node_modules/lodash/_arrayIncludesWith.js"),cacheHas=__webpack_require__("./node_modules/lodash/_cacheHas.js"),createSet=__webpack_require__("./node_modules/lodash/_createSet.js"),setToArray=__webpack_require__("./node_modules/lodash/_setToArray.js");module.exports=function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=!0,result=[],seen=result;if(comparator)isCommon=!1,includes=arrayIncludesWith;else if(length>=200){var set=iteratee?null:createSet(array);if(set)return setToArray(set);isCommon=!1,includes=cacheHas,seen=new SetCache}else seen=iteratee?[]:result;outer:for(;++index<length;){var value=array[index],computed=iteratee?iteratee(value):value;if(value=comparator||0!==value?value:0,isCommon&&computed==computed){for(var seenIndex=seen.length;seenIndex--;)if(seen[seenIndex]===computed)continue outer;iteratee&&seen.push(computed),result.push(value)}else includes(seen,computed,comparator)||(seen!==result&&seen.push(computed),result.push(value))}return result}},"./node_modules/lodash/_createSet.js":function(module,__unused_webpack_exports,__webpack_require__){var Set=__webpack_require__("./node_modules/lodash/_Set.js"),noop=__webpack_require__("./node_modules/lodash/noop.js"),setToArray=__webpack_require__("./node_modules/lodash/_setToArray.js"),createSet=Set&&1/setToArray(new Set([,-0]))[1]==1/0?function(values){return new Set(values)}:noop;module.exports=createSet},"./node_modules/lodash/_strictIndexOf.js":function(module){module.exports=function strictIndexOf(array,value,fromIndex){for(var index=fromIndex-1,length=array.length;++index<length;)if(array[index]===value)return index;return-1}},"./node_modules/lodash/isEqual.js":function(module,__unused_webpack_exports,__webpack_require__){var baseIsEqual=__webpack_require__("./node_modules/lodash/_baseIsEqual.js");module.exports=function isEqual(value,other){return baseIsEqual(value,other)}},"./node_modules/lodash/isEqualWith.js":function(module,__unused_webpack_exports,__webpack_require__){var baseIsEqual=__webpack_require__("./node_modules/lodash/_baseIsEqual.js");module.exports=function isEqualWith(value,other,customizer){var result=(customizer="function"==typeof customizer?customizer:void 0)?customizer(value,other):void 0;return void 0===result?baseIsEqual(value,other,void 0,customizer):!!result}},"./node_modules/lodash/noop.js":function(module){module.exports=function noop(){}},"./node_modules/lodash/uniq.js":function(module,__unused_webpack_exports,__webpack_require__){var baseUniq=__webpack_require__("./node_modules/lodash/_baseUniq.js");module.exports=function uniq(array){return array&&array.length?baseUniq(array):[]}},"./node_modules/lz-string/libs/lz-string.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__,LZString=function(){var f=String.fromCharCode,keyStrBase64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",keyStrUriSafe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",baseReverseDic={};function getBaseValue(alphabet,character){if(!baseReverseDic[alphabet]){baseReverseDic[alphabet]={};for(var i=0;i<alphabet.length;i++)baseReverseDic[alphabet][alphabet.charAt(i)]=i}return baseReverseDic[alphabet][character]}var LZString={compressToBase64:function(input){if(null==input)return"";var res=LZString._compress(input,6,(function(a){return keyStrBase64.charAt(a)}));switch(res.length%4){default:case 0:return res;case 1:return res+"===";case 2:return res+"==";case 3:return res+"="}},decompressFromBase64:function(input){return null==input?"":""==input?null:LZString._decompress(input.length,32,(function(index){return getBaseValue(keyStrBase64,input.charAt(index))}))},compressToUTF16:function(input){return null==input?"":LZString._compress(input,15,(function(a){return f(a+32)}))+" "},decompressFromUTF16:function(compressed){return null==compressed?"":""==compressed?null:LZString._decompress(compressed.length,16384,(function(index){return compressed.charCodeAt(index)-32}))},compressToUint8Array:function(uncompressed){for(var compressed=LZString.compress(uncompressed),buf=new Uint8Array(2*compressed.length),i=0,TotalLen=compressed.length;i<TotalLen;i++){var current_value=compressed.charCodeAt(i);buf[2*i]=current_value>>>8,buf[2*i+1]=current_value%256}return buf},decompressFromUint8Array:function(compressed){if(null==compressed)return LZString.decompress(compressed);for(var buf=new Array(compressed.length/2),i=0,TotalLen=buf.length;i<TotalLen;i++)buf[i]=256*compressed[2*i]+compressed[2*i+1];var result=[];return buf.forEach((function(c){result.push(f(c))})),LZString.decompress(result.join(""))},compressToEncodedURIComponent:function(input){return null==input?"":LZString._compress(input,6,(function(a){return keyStrUriSafe.charAt(a)}))},decompressFromEncodedURIComponent:function(input){return null==input?"":""==input?null:(input=input.replace(/ /g,"+"),LZString._decompress(input.length,32,(function(index){return getBaseValue(keyStrUriSafe,input.charAt(index))})))},compress:function(uncompressed){return LZString._compress(uncompressed,16,(function(a){return f(a)}))},_compress:function(uncompressed,bitsPerChar,getCharFromInt){if(null==uncompressed)return"";var i,value,ii,context_dictionary={},context_dictionaryToCreate={},context_c="",context_wc="",context_w="",context_enlargeIn=2,context_dictSize=3,context_numBits=2,context_data=[],context_data_val=0,context_data_position=0;for(ii=0;ii<uncompressed.length;ii+=1)if(context_c=uncompressed.charAt(ii),Object.prototype.hasOwnProperty.call(context_dictionary,context_c)||(context_dictionary[context_c]=context_dictSize++,context_dictionaryToCreate[context_c]=!0),context_wc=context_w+context_c,Object.prototype.hasOwnProperty.call(context_dictionary,context_wc))context_w=context_wc;else{if(Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)){if(context_w.charCodeAt(0)<256){for(i=0;i<context_numBits;i++)context_data_val<<=1,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++;for(value=context_w.charCodeAt(0),i=0;i<8;i++)context_data_val=context_data_val<<1|1&value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value>>=1}else{for(value=1,i=0;i<context_numBits;i++)context_data_val=context_data_val<<1|value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value=0;for(value=context_w.charCodeAt(0),i=0;i<16;i++)context_data_val=context_data_val<<1|1&value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value>>=1}0==--context_enlargeIn&&(context_enlargeIn=Math.pow(2,context_numBits),context_numBits++),delete context_dictionaryToCreate[context_w]}else for(value=context_dictionary[context_w],i=0;i<context_numBits;i++)context_data_val=context_data_val<<1|1&value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value>>=1;0==--context_enlargeIn&&(context_enlargeIn=Math.pow(2,context_numBits),context_numBits++),context_dictionary[context_wc]=context_dictSize++,context_w=String(context_c)}if(""!==context_w){if(Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)){if(context_w.charCodeAt(0)<256){for(i=0;i<context_numBits;i++)context_data_val<<=1,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++;for(value=context_w.charCodeAt(0),i=0;i<8;i++)context_data_val=context_data_val<<1|1&value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value>>=1}else{for(value=1,i=0;i<context_numBits;i++)context_data_val=context_data_val<<1|value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value=0;for(value=context_w.charCodeAt(0),i=0;i<16;i++)context_data_val=context_data_val<<1|1&value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value>>=1}0==--context_enlargeIn&&(context_enlargeIn=Math.pow(2,context_numBits),context_numBits++),delete context_dictionaryToCreate[context_w]}else for(value=context_dictionary[context_w],i=0;i<context_numBits;i++)context_data_val=context_data_val<<1|1&value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value>>=1;0==--context_enlargeIn&&(context_enlargeIn=Math.pow(2,context_numBits),context_numBits++)}for(value=2,i=0;i<context_numBits;i++)context_data_val=context_data_val<<1|1&value,context_data_position==bitsPerChar-1?(context_data_position=0,context_data.push(getCharFromInt(context_data_val)),context_data_val=0):context_data_position++,value>>=1;for(;;){if(context_data_val<<=1,context_data_position==bitsPerChar-1){context_data.push(getCharFromInt(context_data_val));break}context_data_position++}return context_data.join("")},decompress:function(compressed){return null==compressed?"":""==compressed?null:LZString._decompress(compressed.length,32768,(function(index){return compressed.charCodeAt(index)}))},_decompress:function(length,resetValue,getNextValue){var i,w,bits,resb,maxpower,power,c,dictionary=[],enlargeIn=4,dictSize=4,numBits=3,entry="",result=[],data={val:getNextValue(0),position:resetValue,index:1};for(i=0;i<3;i+=1)dictionary[i]=i;for(bits=0,maxpower=Math.pow(2,2),power=1;power!=maxpower;)resb=data.val&data.position,data.position>>=1,0==data.position&&(data.position=resetValue,data.val=getNextValue(data.index++)),bits|=(resb>0?1:0)*power,power<<=1;switch(bits){case 0:for(bits=0,maxpower=Math.pow(2,8),power=1;power!=maxpower;)resb=data.val&data.position,data.position>>=1,0==data.position&&(data.position=resetValue,data.val=getNextValue(data.index++)),bits|=(resb>0?1:0)*power,power<<=1;c=f(bits);break;case 1:for(bits=0,maxpower=Math.pow(2,16),power=1;power!=maxpower;)resb=data.val&data.position,data.position>>=1,0==data.position&&(data.position=resetValue,data.val=getNextValue(data.index++)),bits|=(resb>0?1:0)*power,power<<=1;c=f(bits);break;case 2:return""}for(dictionary[3]=c,w=c,result.push(c);;){if(data.index>length)return"";for(bits=0,maxpower=Math.pow(2,numBits),power=1;power!=maxpower;)resb=data.val&data.position,data.position>>=1,0==data.position&&(data.position=resetValue,data.val=getNextValue(data.index++)),bits|=(resb>0?1:0)*power,power<<=1;switch(c=bits){case 0:for(bits=0,maxpower=Math.pow(2,8),power=1;power!=maxpower;)resb=data.val&data.position,data.position>>=1,0==data.position&&(data.position=resetValue,data.val=getNextValue(data.index++)),bits|=(resb>0?1:0)*power,power<<=1;dictionary[dictSize++]=f(bits),c=dictSize-1,enlargeIn--;break;case 1:for(bits=0,maxpower=Math.pow(2,16),power=1;power!=maxpower;)resb=data.val&data.position,data.position>>=1,0==data.position&&(data.position=resetValue,data.val=getNextValue(data.index++)),bits|=(resb>0?1:0)*power,power<<=1;dictionary[dictSize++]=f(bits),c=dictSize-1,enlargeIn--;break;case 2:return result.join("")}if(0==enlargeIn&&(enlargeIn=Math.pow(2,numBits),numBits++),dictionary[c])entry=dictionary[c];else{if(c!==dictSize)return null;entry=w+w.charAt(0)}result.push(entry),dictionary[dictSize++]=w+entry.charAt(0),w=entry,0==--enlargeIn&&(enlargeIn=Math.pow(2,numBits),numBits++)}}};return LZString}();void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return LZString}.call(exports,__webpack_require__,exports,module))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},"./node_modules/min-indent/index.js":function(module){"use strict";module.exports=string=>{const match=string.match(/^[ \t]*(?=\S)/gm);return match?match.reduce(((r,a)=>Math.min(r,a.length)),1/0):0}},"./node_modules/object-inspect/index.js":function(module,__unused_webpack_exports,__webpack_require__){var hasMap="function"==typeof Map&&Map.prototype,mapSizeDescriptor=Object.getOwnPropertyDescriptor&&hasMap?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,mapSize=hasMap&&mapSizeDescriptor&&"function"==typeof mapSizeDescriptor.get?mapSizeDescriptor.get:null,mapForEach=hasMap&&Map.prototype.forEach,hasSet="function"==typeof Set&&Set.prototype,setSizeDescriptor=Object.getOwnPropertyDescriptor&&hasSet?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,setSize=hasSet&&setSizeDescriptor&&"function"==typeof setSizeDescriptor.get?setSizeDescriptor.get:null,setForEach=hasSet&&Set.prototype.forEach,weakMapHas="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,weakSetHas="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,weakRefDeref="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,booleanValueOf=Boolean.prototype.valueOf,objectToString=Object.prototype.toString,functionToString=Function.prototype.toString,$match=String.prototype.match,$slice=String.prototype.slice,$replace=String.prototype.replace,$toUpperCase=String.prototype.toUpperCase,$toLowerCase=String.prototype.toLowerCase,$test=RegExp.prototype.test,$concat=Array.prototype.concat,$join=Array.prototype.join,$arrSlice=Array.prototype.slice,$floor=Math.floor,bigIntValueOf="function"==typeof BigInt?BigInt.prototype.valueOf:null,gOPS=Object.getOwnPropertySymbols,symToString="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,hasShammedSymbols="function"==typeof Symbol&&"object"==typeof Symbol.iterator,toStringTag="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===hasShammedSymbols||"symbol")?Symbol.toStringTag:null,isEnumerable=Object.prototype.propertyIsEnumerable,gPO=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(O){return O.__proto__}:null);function addNumericSeparator(num,str){if(num===1/0||num===-1/0||num!=num||num&&num>-1e3&&num<1e3||$test.call(/e/,str))return str;var sepRegex=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof num){var int=num<0?-$floor(-num):$floor(num);if(int!==num){var intStr=String(int),dec=$slice.call(str,intStr.length+1);return $replace.call(intStr,sepRegex,"$&_")+"."+$replace.call($replace.call(dec,/([0-9]{3})/g,"$&_"),/_$/,"")}}return $replace.call(str,sepRegex,"$&_")}var utilInspect=__webpack_require__("?4f7e"),inspectCustom=utilInspect.custom,inspectSymbol=isSymbol(inspectCustom)?inspectCustom:null;function wrapQuotes(s,defaultStyle,opts){var quoteChar="double"===(opts.quoteStyle||defaultStyle)?'"':"'";return quoteChar+s+quoteChar}function quote(s){return $replace.call(String(s),/"/g,"&quot;")}function isArray(obj){return!("[object Array]"!==toStr(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}function isRegExp(obj){return!("[object RegExp]"!==toStr(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}function isSymbol(obj){if(hasShammedSymbols)return obj&&"object"==typeof obj&&obj instanceof Symbol;if("symbol"==typeof obj)return!0;if(!obj||"object"!=typeof obj||!symToString)return!1;try{return symToString.call(obj),!0}catch(e){}return!1}module.exports=function inspect_(obj,options,depth,seen){var opts=options||{};if(has(opts,"quoteStyle")&&"single"!==opts.quoteStyle&&"double"!==opts.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(has(opts,"maxStringLength")&&("number"==typeof opts.maxStringLength?opts.maxStringLength<0&&opts.maxStringLength!==1/0:null!==opts.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var customInspect=!has(opts,"customInspect")||opts.customInspect;if("boolean"!=typeof customInspect&&"symbol"!==customInspect)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(has(opts,"indent")&&null!==opts.indent&&"\t"!==opts.indent&&!(parseInt(opts.indent,10)===opts.indent&&opts.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(has(opts,"numericSeparator")&&"boolean"!=typeof opts.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var numericSeparator=opts.numericSeparator;if(void 0===obj)return"undefined";if(null===obj)return"null";if("boolean"==typeof obj)return obj?"true":"false";if("string"==typeof obj)return inspectString(obj,opts);if("number"==typeof obj){if(0===obj)return 1/0/obj>0?"0":"-0";var str=String(obj);return numericSeparator?addNumericSeparator(obj,str):str}if("bigint"==typeof obj){var bigIntStr=String(obj)+"n";return numericSeparator?addNumericSeparator(obj,bigIntStr):bigIntStr}var maxDepth=void 0===opts.depth?5:opts.depth;if(void 0===depth&&(depth=0),depth>=maxDepth&&maxDepth>0&&"object"==typeof obj)return isArray(obj)?"[Array]":"[Object]";var indent=function getIndent(opts,depth){var baseIndent;if("\t"===opts.indent)baseIndent="\t";else{if(!("number"==typeof opts.indent&&opts.indent>0))return null;baseIndent=$join.call(Array(opts.indent+1)," ")}return{base:baseIndent,prev:$join.call(Array(depth+1),baseIndent)}}(opts,depth);if(void 0===seen)seen=[];else if(indexOf(seen,obj)>=0)return"[Circular]";function inspect(value,from,noIndent){if(from&&(seen=$arrSlice.call(seen)).push(from),noIndent){var newOpts={depth:opts.depth};return has(opts,"quoteStyle")&&(newOpts.quoteStyle=opts.quoteStyle),inspect_(value,newOpts,depth+1,seen)}return inspect_(value,opts,depth+1,seen)}if("function"==typeof obj&&!isRegExp(obj)){var name=function nameOf(f){if(f.name)return f.name;var m=$match.call(functionToString.call(f),/^function\s*([\w$]+)/);if(m)return m[1];return null}(obj),keys=arrObjKeys(obj,inspect);return"[Function"+(name?": "+name:" (anonymous)")+"]"+(keys.length>0?" { "+$join.call(keys,", ")+" }":"")}if(isSymbol(obj)){var symString=hasShammedSymbols?$replace.call(String(obj),/^(Symbol\(.*\))_[^)]*$/,"$1"):symToString.call(obj);return"object"!=typeof obj||hasShammedSymbols?symString:markBoxed(symString)}if(function isElement(x){if(!x||"object"!=typeof x)return!1;if("undefined"!=typeof HTMLElement&&x instanceof HTMLElement)return!0;return"string"==typeof x.nodeName&&"function"==typeof x.getAttribute}(obj)){for(var s="<"+$toLowerCase.call(String(obj.nodeName)),attrs=obj.attributes||[],i=0;i<attrs.length;i++)s+=" "+attrs[i].name+"="+wrapQuotes(quote(attrs[i].value),"double",opts);return s+=">",obj.childNodes&&obj.childNodes.length&&(s+="..."),s+="</"+$toLowerCase.call(String(obj.nodeName))+">"}if(isArray(obj)){if(0===obj.length)return"[]";var xs=arrObjKeys(obj,inspect);return indent&&!function singleLineValues(xs){for(var i=0;i<xs.length;i++)if(indexOf(xs[i],"\n")>=0)return!1;return!0}(xs)?"["+indentedJoin(xs,indent)+"]":"[ "+$join.call(xs,", ")+" ]"}if(function isError(obj){return!("[object Error]"!==toStr(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj)){var parts=arrObjKeys(obj,inspect);return"cause"in Error.prototype||!("cause"in obj)||isEnumerable.call(obj,"cause")?0===parts.length?"["+String(obj)+"]":"{ ["+String(obj)+"] "+$join.call(parts,", ")+" }":"{ ["+String(obj)+"] "+$join.call($concat.call("[cause]: "+inspect(obj.cause),parts),", ")+" }"}if("object"==typeof obj&&customInspect){if(inspectSymbol&&"function"==typeof obj[inspectSymbol]&&utilInspect)return utilInspect(obj,{depth:maxDepth-depth});if("symbol"!==customInspect&&"function"==typeof obj.inspect)return obj.inspect()}if(function isMap(x){if(!mapSize||!x||"object"!=typeof x)return!1;try{mapSize.call(x);try{setSize.call(x)}catch(s){return!0}return x instanceof Map}catch(e){}return!1}(obj)){var mapParts=[];return mapForEach&&mapForEach.call(obj,(function(value,key){mapParts.push(inspect(key,obj,!0)+" => "+inspect(value,obj))})),collectionOf("Map",mapSize.call(obj),mapParts,indent)}if(function isSet(x){if(!setSize||!x||"object"!=typeof x)return!1;try{setSize.call(x);try{mapSize.call(x)}catch(m){return!0}return x instanceof Set}catch(e){}return!1}(obj)){var setParts=[];return setForEach&&setForEach.call(obj,(function(value){setParts.push(inspect(value,obj))})),collectionOf("Set",setSize.call(obj),setParts,indent)}if(function isWeakMap(x){if(!weakMapHas||!x||"object"!=typeof x)return!1;try{weakMapHas.call(x,weakMapHas);try{weakSetHas.call(x,weakSetHas)}catch(s){return!0}return x instanceof WeakMap}catch(e){}return!1}(obj))return weakCollectionOf("WeakMap");if(function isWeakSet(x){if(!weakSetHas||!x||"object"!=typeof x)return!1;try{weakSetHas.call(x,weakSetHas);try{weakMapHas.call(x,weakMapHas)}catch(s){return!0}return x instanceof WeakSet}catch(e){}return!1}(obj))return weakCollectionOf("WeakSet");if(function isWeakRef(x){if(!weakRefDeref||!x||"object"!=typeof x)return!1;try{return weakRefDeref.call(x),!0}catch(e){}return!1}(obj))return weakCollectionOf("WeakRef");if(function isNumber(obj){return!("[object Number]"!==toStr(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj))return markBoxed(inspect(Number(obj)));if(function isBigInt(obj){if(!obj||"object"!=typeof obj||!bigIntValueOf)return!1;try{return bigIntValueOf.call(obj),!0}catch(e){}return!1}(obj))return markBoxed(inspect(bigIntValueOf.call(obj)));if(function isBoolean(obj){return!("[object Boolean]"!==toStr(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj))return markBoxed(booleanValueOf.call(obj));if(function isString(obj){return!("[object String]"!==toStr(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj))return markBoxed(inspect(String(obj)));if(!function isDate(obj){return!("[object Date]"!==toStr(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj)&&!isRegExp(obj)){var ys=arrObjKeys(obj,inspect),isPlainObject=gPO?gPO(obj)===Object.prototype:obj instanceof Object||obj.constructor===Object,protoTag=obj instanceof Object?"":"null prototype",stringTag=!isPlainObject&&toStringTag&&Object(obj)===obj&&toStringTag in obj?$slice.call(toStr(obj),8,-1):protoTag?"Object":"",tag=(isPlainObject||"function"!=typeof obj.constructor?"":obj.constructor.name?obj.constructor.name+" ":"")+(stringTag||protoTag?"["+$join.call($concat.call([],stringTag||[],protoTag||[]),": ")+"] ":"");return 0===ys.length?tag+"{}":indent?tag+"{"+indentedJoin(ys,indent)+"}":tag+"{ "+$join.call(ys,", ")+" }"}return String(obj)};var hasOwn=Object.prototype.hasOwnProperty||function(key){return key in this};function has(obj,key){return hasOwn.call(obj,key)}function toStr(obj){return objectToString.call(obj)}function indexOf(xs,x){if(xs.indexOf)return xs.indexOf(x);for(var i=0,l=xs.length;i<l;i++)if(xs[i]===x)return i;return-1}function inspectString(str,opts){if(str.length>opts.maxStringLength){var remaining=str.length-opts.maxStringLength,trailer="... "+remaining+" more character"+(remaining>1?"s":"");return inspectString($slice.call(str,0,opts.maxStringLength),opts)+trailer}return wrapQuotes($replace.call($replace.call(str,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,lowbyte),"single",opts)}function lowbyte(c){var n=c.charCodeAt(0),x={8:"b",9:"t",10:"n",12:"f",13:"r"}[n];return x?"\\"+x:"\\x"+(n<16?"0":"")+$toUpperCase.call(n.toString(16))}function markBoxed(str){return"Object("+str+")"}function weakCollectionOf(type){return type+" { ? }"}function collectionOf(type,size,entries,indent){return type+" ("+size+") {"+(indent?indentedJoin(entries,indent):$join.call(entries,", "))+"}"}function indentedJoin(xs,indent){if(0===xs.length)return"";var lineJoiner="\n"+indent.prev+indent.base;return lineJoiner+$join.call(xs,","+lineJoiner)+"\n"+indent.prev}function arrObjKeys(obj,inspect){var isArr=isArray(obj),xs=[];if(isArr){xs.length=obj.length;for(var i=0;i<obj.length;i++)xs[i]=has(obj,i)?inspect(obj[i],obj):""}var symMap,syms="function"==typeof gOPS?gOPS(obj):[];if(hasShammedSymbols){symMap={};for(var k=0;k<syms.length;k++)symMap["$"+syms[k]]=syms[k]}for(var key in obj)has(obj,key)&&(isArr&&String(Number(key))===key&&key<obj.length||hasShammedSymbols&&symMap["$"+key]instanceof Symbol||($test.call(/[^\w$]/,key)?xs.push(inspect(key,obj)+": "+inspect(obj[key],obj)):xs.push(key+": "+inspect(obj[key],obj))));if("function"==typeof gOPS)for(var j=0;j<syms.length;j++)isEnumerable.call(obj,syms[j])&&xs.push("["+inspect(syms[j])+"]: "+inspect(obj[syms[j]],obj));return xs}},"./node_modules/object.assign/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var defineProperties=__webpack_require__("./node_modules/define-properties/index.js"),callBind=__webpack_require__("./node_modules/call-bind/index.js"),implementation=__webpack_require__("./node_modules/object.assign/implementation.js"),getPolyfill=__webpack_require__("./node_modules/object.assign/polyfill.js"),shim=__webpack_require__("./node_modules/object.assign/shim.js"),polyfill=callBind.apply(getPolyfill()),bound=function assign(target,source1){return polyfill(Object,arguments)};defineProperties(bound,{getPolyfill:getPolyfill,implementation:implementation,shim:shim}),module.exports=bound},"./node_modules/object.assign/shim.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var define=__webpack_require__("./node_modules/define-properties/index.js"),getPolyfill=__webpack_require__("./node_modules/object.assign/polyfill.js");module.exports=function shimAssign(){var polyfill=getPolyfill();return define(Object,{assign:polyfill},{assign:function(){return Object.assign!==polyfill}}),polyfill}},"./node_modules/pretty-format/build/collections.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.printIteratorEntries=function printIteratorEntries(iterator,config,indentation,depth,refs,printer,separator=": "){let result="",current=iterator.next();if(!current.done){result+=config.spacingOuter;const indentationNext=indentation+config.indent;for(;!current.done;){result+=indentationNext+printer(current.value[0],config,indentationNext,depth,refs)+separator+printer(current.value[1],config,indentationNext,depth,refs),current=iterator.next(),current.done?config.min||(result+=","):result+=","+config.spacingInner}result+=config.spacingOuter+indentation}return result},exports.printIteratorValues=function printIteratorValues(iterator,config,indentation,depth,refs,printer){let result="",current=iterator.next();if(!current.done){result+=config.spacingOuter;const indentationNext=indentation+config.indent;for(;!current.done;)result+=indentationNext+printer(current.value,config,indentationNext,depth,refs),current=iterator.next(),current.done?config.min||(result+=","):result+=","+config.spacingInner;result+=config.spacingOuter+indentation}return result},exports.printListItems=function printListItems(list,config,indentation,depth,refs,printer){let result="";if(list.length){result+=config.spacingOuter;const indentationNext=indentation+config.indent;for(let i=0;i<list.length;i++)result+=indentationNext,i in list&&(result+=printer(list[i],config,indentationNext,depth,refs)),i<list.length-1?result+=","+config.spacingInner:config.min||(result+=",");result+=config.spacingOuter+indentation}return result},exports.printObjectProperties=function printObjectProperties(val,config,indentation,depth,refs,printer){let result="";const keys=getKeysOfEnumerableProperties(val,config.compareKeys);if(keys.length){result+=config.spacingOuter;const indentationNext=indentation+config.indent;for(let i=0;i<keys.length;i++){const key=keys[i];result+=indentationNext+printer(key,config,indentationNext,depth,refs)+": "+printer(val[key],config,indentationNext,depth,refs),i<keys.length-1?result+=","+config.spacingInner:config.min||(result+=",")}result+=config.spacingOuter+indentation}return result};const getKeysOfEnumerableProperties=(object,compareKeys)=>{const keys=Object.keys(object).sort(compareKeys);return Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(object).forEach((symbol=>{Object.getOwnPropertyDescriptor(object,symbol).enumerable&&keys.push(symbol)})),keys}},"./node_modules/pretty-format/build/index.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.DEFAULT_OPTIONS=void 0,exports.format=format,exports.plugins=void 0;var _ansiStyles=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/node_modules/ansi-styles/index.js")),_collections=__webpack_require__("./node_modules/pretty-format/build/collections.js"),_AsymmetricMatcher=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/build/plugins/AsymmetricMatcher.js")),_ConvertAnsi=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/build/plugins/ConvertAnsi.js")),_DOMCollection=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/build/plugins/DOMCollection.js")),_DOMElement=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/build/plugins/DOMElement.js")),_Immutable=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/build/plugins/Immutable.js")),_ReactElement=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/build/plugins/ReactElement.js")),_ReactTestComponent=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/build/plugins/ReactTestComponent.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const toString=Object.prototype.toString,toISOString=Date.prototype.toISOString,errorToString=Error.prototype.toString,regExpToString=RegExp.prototype.toString,getConstructorName=val=>"function"==typeof val.constructor&&val.constructor.name||"Object",isWindow=val=>"undefined"!=typeof window&&val===window,SYMBOL_REGEXP=/^Symbol\((.*)\)(.*)$/,NEWLINE_REGEXP=/\n/gi;class PrettyFormatPluginError extends Error{constructor(message,stack){super(message),this.stack=stack,this.name=this.constructor.name}}function printFunction(val,printFunctionName){return printFunctionName?"[Function "+(val.name||"anonymous")+"]":"[Function]"}function printSymbol(val){return String(val).replace(SYMBOL_REGEXP,"Symbol($1)")}function printError(val){return"["+errorToString.call(val)+"]"}function printBasicValue(val,printFunctionName,escapeRegex,escapeString){if(!0===val||!1===val)return""+val;if(void 0===val)return"undefined";if(null===val)return"null";const typeOf=typeof val;if("number"===typeOf)return function printNumber(val){return Object.is(val,-0)?"-0":String(val)}(val);if("bigint"===typeOf)return function printBigInt(val){return String(`${val}n`)}(val);if("string"===typeOf)return escapeString?'"'+val.replace(/"|\\/g,"\\$&")+'"':'"'+val+'"';if("function"===typeOf)return printFunction(val,printFunctionName);if("symbol"===typeOf)return printSymbol(val);const toStringed=toString.call(val);return"[object WeakMap]"===toStringed?"WeakMap {}":"[object WeakSet]"===toStringed?"WeakSet {}":"[object Function]"===toStringed||"[object GeneratorFunction]"===toStringed?printFunction(val,printFunctionName):"[object Symbol]"===toStringed?printSymbol(val):"[object Date]"===toStringed?isNaN(+val)?"Date { NaN }":toISOString.call(val):"[object Error]"===toStringed?printError(val):"[object RegExp]"===toStringed?escapeRegex?regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g,"\\$&"):regExpToString.call(val):val instanceof Error?printError(val):null}function printComplexValue(val,config,indentation,depth,refs,hasCalledToJSON){if(-1!==refs.indexOf(val))return"[Circular]";(refs=refs.slice()).push(val);const hitMaxDepth=++depth>config.maxDepth,min=config.min;if(config.callToJSON&&!hitMaxDepth&&val.toJSON&&"function"==typeof val.toJSON&&!hasCalledToJSON)return printer(val.toJSON(),config,indentation,depth,refs,!0);const toStringed=toString.call(val);return"[object Arguments]"===toStringed?hitMaxDepth?"[Arguments]":(min?"":"Arguments ")+"["+(0,_collections.printListItems)(val,config,indentation,depth,refs,printer)+"]":function isToStringedArrayType(toStringed){return"[object Array]"===toStringed||"[object ArrayBuffer]"===toStringed||"[object DataView]"===toStringed||"[object Float32Array]"===toStringed||"[object Float64Array]"===toStringed||"[object Int8Array]"===toStringed||"[object Int16Array]"===toStringed||"[object Int32Array]"===toStringed||"[object Uint8Array]"===toStringed||"[object Uint8ClampedArray]"===toStringed||"[object Uint16Array]"===toStringed||"[object Uint32Array]"===toStringed}(toStringed)?hitMaxDepth?"["+val.constructor.name+"]":(min?"":config.printBasicPrototype||"Array"!==val.constructor.name?val.constructor.name+" ":"")+"["+(0,_collections.printListItems)(val,config,indentation,depth,refs,printer)+"]":"[object Map]"===toStringed?hitMaxDepth?"[Map]":"Map {"+(0,_collections.printIteratorEntries)(val.entries(),config,indentation,depth,refs,printer," => ")+"}":"[object Set]"===toStringed?hitMaxDepth?"[Set]":"Set {"+(0,_collections.printIteratorValues)(val.values(),config,indentation,depth,refs,printer)+"}":hitMaxDepth||isWindow(val)?"["+getConstructorName(val)+"]":(min?"":config.printBasicPrototype||"Object"!==getConstructorName(val)?getConstructorName(val)+" ":"")+"{"+(0,_collections.printObjectProperties)(val,config,indentation,depth,refs,printer)+"}"}function printPlugin(plugin,val,config,indentation,depth,refs){let printed;try{printed=function isNewPlugin(plugin){return null!=plugin.serialize}(plugin)?plugin.serialize(val,config,indentation,depth,refs,printer):plugin.print(val,(valChild=>printer(valChild,config,indentation,depth,refs)),(str=>{const indentationNext=indentation+config.indent;return indentationNext+str.replace(NEWLINE_REGEXP,"\n"+indentationNext)}),{edgeSpacing:config.spacingOuter,min:config.min,spacing:config.spacingInner},config.colors)}catch(error){throw new PrettyFormatPluginError(error.message,error.stack)}if("string"!=typeof printed)throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`);return printed}function findPlugin(plugins,val){for(let p=0;p<plugins.length;p++)try{if(plugins[p].test(val))return plugins[p]}catch(error){throw new PrettyFormatPluginError(error.message,error.stack)}return null}function printer(val,config,indentation,depth,refs,hasCalledToJSON){const plugin=findPlugin(config.plugins,val);if(null!==plugin)return printPlugin(plugin,val,config,indentation,depth,refs);const basicResult=printBasicValue(val,config.printFunctionName,config.escapeRegex,config.escapeString);return null!==basicResult?basicResult:printComplexValue(val,config,indentation,depth,refs,hasCalledToJSON)}const DEFAULT_THEME={comment:"gray",content:"reset",prop:"yellow",tag:"cyan",value:"green"},DEFAULT_THEME_KEYS=Object.keys(DEFAULT_THEME),DEFAULT_OPTIONS={callToJSON:!0,compareKeys:void 0,escapeRegex:!1,escapeString:!0,highlight:!1,indent:2,maxDepth:1/0,min:!1,plugins:[],printBasicPrototype:!0,printFunctionName:!0,theme:DEFAULT_THEME};exports.DEFAULT_OPTIONS=DEFAULT_OPTIONS;const getColorsHighlight=options=>DEFAULT_THEME_KEYS.reduce(((colors,key)=>{const value=options.theme&&void 0!==options.theme[key]?options.theme[key]:DEFAULT_THEME[key],color=value&&_ansiStyles.default[value];if(!color||"string"!=typeof color.close||"string"!=typeof color.open)throw new Error(`pretty-format: Option "theme" has a key "${key}" whose value "${value}" is undefined in ansi-styles.`);return colors[key]=color,colors}),Object.create(null)),getPrintFunctionName=options=>options&&void 0!==options.printFunctionName?options.printFunctionName:DEFAULT_OPTIONS.printFunctionName,getEscapeRegex=options=>options&&void 0!==options.escapeRegex?options.escapeRegex:DEFAULT_OPTIONS.escapeRegex,getEscapeString=options=>options&&void 0!==options.escapeString?options.escapeString:DEFAULT_OPTIONS.escapeString,getConfig=options=>{var _options$printBasicPr,indent;return{callToJSON:options&&void 0!==options.callToJSON?options.callToJSON:DEFAULT_OPTIONS.callToJSON,colors:options&&options.highlight?getColorsHighlight(options):DEFAULT_THEME_KEYS.reduce(((colors,key)=>(colors[key]={close:"",open:""},colors)),Object.create(null)),compareKeys:options&&"function"==typeof options.compareKeys?options.compareKeys:DEFAULT_OPTIONS.compareKeys,escapeRegex:getEscapeRegex(options),escapeString:getEscapeString(options),indent:options&&options.min?"":(indent=options&&void 0!==options.indent?options.indent:DEFAULT_OPTIONS.indent,new Array(indent+1).join(" ")),maxDepth:options&&void 0!==options.maxDepth?options.maxDepth:DEFAULT_OPTIONS.maxDepth,min:options&&void 0!==options.min?options.min:DEFAULT_OPTIONS.min,plugins:options&&void 0!==options.plugins?options.plugins:DEFAULT_OPTIONS.plugins,printBasicPrototype:null===(_options$printBasicPr=null==options?void 0:options.printBasicPrototype)||void 0===_options$printBasicPr||_options$printBasicPr,printFunctionName:getPrintFunctionName(options),spacingInner:options&&options.min?" ":"\n",spacingOuter:options&&options.min?"":"\n"}};function format(val,options){if(options&&(function validateOptions(options){if(Object.keys(options).forEach((key=>{if(!DEFAULT_OPTIONS.hasOwnProperty(key))throw new Error(`pretty-format: Unknown option "${key}".`)})),options.min&&void 0!==options.indent&&0!==options.indent)throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');if(void 0!==options.theme){if(null===options.theme)throw new Error('pretty-format: Option "theme" must not be null.');if("object"!=typeof options.theme)throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof options.theme}".`)}}(options),options.plugins)){const plugin=findPlugin(options.plugins,val);if(null!==plugin)return printPlugin(plugin,val,getConfig(options),"",0,[])}const basicResult=printBasicValue(val,getPrintFunctionName(options),getEscapeRegex(options),getEscapeString(options));return null!==basicResult?basicResult:printComplexValue(val,getConfig(options),"",0,[])}const plugins={AsymmetricMatcher:_AsymmetricMatcher.default,ConvertAnsi:_ConvertAnsi.default,DOMCollection:_DOMCollection.default,DOMElement:_DOMElement.default,Immutable:_Immutable.default,ReactElement:_ReactElement.default,ReactTestComponent:_ReactTestComponent.default};exports.plugins=plugins;var _default=format;exports.default=_default},"./node_modules/pretty-format/build/plugins/AsymmetricMatcher.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.test=exports.serialize=exports.default=void 0;var _collections=__webpack_require__("./node_modules/pretty-format/build/collections.js"),global="undefined"!=typeof globalThis?globalThis:void 0!==global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),Symbol=global["jest-symbol-do-not-touch"]||global.Symbol;const asymmetricMatcher="function"==typeof Symbol&&Symbol.for?Symbol.for("jest.asymmetricMatcher"):1267621,serialize=(val,config,indentation,depth,refs,printer)=>{const stringedValue=val.toString();return"ArrayContaining"===stringedValue||"ArrayNotContaining"===stringedValue?++depth>config.maxDepth?"["+stringedValue+"]":stringedValue+" ["+(0,_collections.printListItems)(val.sample,config,indentation,depth,refs,printer)+"]":"ObjectContaining"===stringedValue||"ObjectNotContaining"===stringedValue?++depth>config.maxDepth?"["+stringedValue+"]":stringedValue+" {"+(0,_collections.printObjectProperties)(val.sample,config,indentation,depth,refs,printer)+"}":"StringMatching"===stringedValue||"StringNotMatching"===stringedValue||"StringContaining"===stringedValue||"StringNotContaining"===stringedValue?stringedValue+" "+printer(val.sample,config,indentation,depth,refs):val.toAsymmetricMatcher()};exports.serialize=serialize;const test=val=>val&&val.$$typeof===asymmetricMatcher;exports.test=test;var _default={serialize:serialize,test:test};exports.default=_default},"./node_modules/pretty-format/build/plugins/ConvertAnsi.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.test=exports.serialize=exports.default=void 0;var _ansiRegex=_interopRequireDefault(__webpack_require__("./node_modules/ansi-regex/index.js")),_ansiStyles=_interopRequireDefault(__webpack_require__("./node_modules/pretty-format/node_modules/ansi-styles/index.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const test=val=>"string"==typeof val&&!!val.match((0,_ansiRegex.default)());exports.test=test;const serialize=(val,config,indentation,depth,refs,printer)=>printer(val.replace((0,_ansiRegex.default)(),(match=>{switch(match){case _ansiStyles.default.red.close:case _ansiStyles.default.green.close:case _ansiStyles.default.cyan.close:case _ansiStyles.default.gray.close:case _ansiStyles.default.white.close:case _ansiStyles.default.yellow.close:case _ansiStyles.default.bgRed.close:case _ansiStyles.default.bgGreen.close:case _ansiStyles.default.bgYellow.close:case _ansiStyles.default.inverse.close:case _ansiStyles.default.dim.close:case _ansiStyles.default.bold.close:case _ansiStyles.default.reset.open:case _ansiStyles.default.reset.close:return"</>";case _ansiStyles.default.red.open:return"<red>";case _ansiStyles.default.green.open:return"<green>";case _ansiStyles.default.cyan.open:return"<cyan>";case _ansiStyles.default.gray.open:return"<gray>";case _ansiStyles.default.white.open:return"<white>";case _ansiStyles.default.yellow.open:return"<yellow>";case _ansiStyles.default.bgRed.open:return"<bgRed>";case _ansiStyles.default.bgGreen.open:return"<bgGreen>";case _ansiStyles.default.bgYellow.open:return"<bgYellow>";case _ansiStyles.default.inverse.open:return"<inverse>";case _ansiStyles.default.dim.open:return"<dim>";case _ansiStyles.default.bold.open:return"<bold>";default:return""}})),config,indentation,depth,refs);exports.serialize=serialize;var _default={serialize:serialize,test:test};exports.default=_default},"./node_modules/pretty-format/build/plugins/DOMCollection.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.test=exports.serialize=exports.default=void 0;var _collections=__webpack_require__("./node_modules/pretty-format/build/collections.js");const OBJECT_NAMES=["DOMStringMap","NamedNodeMap"],ARRAY_REGEXP=/^(HTML\w*Collection|NodeList)$/,test=val=>{return val&&val.constructor&&!!val.constructor.name&&(name=val.constructor.name,-1!==OBJECT_NAMES.indexOf(name)||ARRAY_REGEXP.test(name));var name};exports.test=test;const serialize=(collection,config,indentation,depth,refs,printer)=>{const name=collection.constructor.name;return++depth>config.maxDepth?"["+name+"]":(config.min?"":name+" ")+(-1!==OBJECT_NAMES.indexOf(name)?"{"+(0,_collections.printObjectProperties)((collection=>"NamedNodeMap"===collection.constructor.name)(collection)?Array.from(collection).reduce(((props,attribute)=>(props[attribute.name]=attribute.value,props)),{}):{...collection},config,indentation,depth,refs,printer)+"}":"["+(0,_collections.printListItems)(Array.from(collection),config,indentation,depth,refs,printer)+"]")};exports.serialize=serialize;var _default={serialize:serialize,test:test};exports.default=_default},"./node_modules/pretty-format/build/plugins/DOMElement.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.test=exports.serialize=exports.default=void 0;var _markup=__webpack_require__("./node_modules/pretty-format/build/plugins/lib/markup.js");const ELEMENT_REGEXP=/^((HTML|SVG)\w*)?Element$/,test=val=>{var _val$constructor;return(null==val||null===(_val$constructor=val.constructor)||void 0===_val$constructor?void 0:_val$constructor.name)&&(val=>{const constructorName=val.constructor.name,{nodeType:nodeType,tagName:tagName}=val,isCustomElement="string"==typeof tagName&&tagName.includes("-")||(val=>{try{return"function"==typeof val.hasAttribute&&val.hasAttribute("is")}catch{return!1}})(val);return 1===nodeType&&(ELEMENT_REGEXP.test(constructorName)||isCustomElement)||3===nodeType&&"Text"===constructorName||8===nodeType&&"Comment"===constructorName||11===nodeType&&"DocumentFragment"===constructorName})(val)};function nodeIsFragment(node){return 11===node.nodeType}exports.test=test;const serialize=(node,config,indentation,depth,refs,printer)=>{if(function nodeIsText(node){return 3===node.nodeType}(node))return(0,_markup.printText)(node.data,config);if(function nodeIsComment(node){return 8===node.nodeType}(node))return(0,_markup.printComment)(node.data,config);const type=nodeIsFragment(node)?"DocumentFragment":node.tagName.toLowerCase();return++depth>config.maxDepth?(0,_markup.printElementAsLeaf)(type,config):(0,_markup.printElement)(type,(0,_markup.printProps)(nodeIsFragment(node)?[]:Array.from(node.attributes).map((attr=>attr.name)).sort(),nodeIsFragment(node)?{}:Array.from(node.attributes).reduce(((props,attribute)=>(props[attribute.name]=attribute.value,props)),{}),config,indentation+config.indent,depth,refs,printer),(0,_markup.printChildren)(Array.prototype.slice.call(node.childNodes||node.children),config,indentation+config.indent,depth,refs,printer),config,indentation)};exports.serialize=serialize;var _default={serialize:serialize,test:test};exports.default=_default},"./node_modules/pretty-format/build/plugins/Immutable.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.test=exports.serialize=exports.default=void 0;var _collections=__webpack_require__("./node_modules/pretty-format/build/collections.js");const getImmutableName=name=>"Immutable."+name,printAsLeaf=name=>"["+name+"]";const printImmutableValues=(val,config,indentation,depth,refs,printer,type)=>++depth>config.maxDepth?printAsLeaf(getImmutableName(type)):getImmutableName(type)+" ["+(0,_collections.printIteratorValues)(val.values(),config,indentation,depth,refs,printer)+"]",serialize=(val,config,indentation,depth,refs,printer)=>val["@@__IMMUTABLE_MAP__@@"]?((val,config,indentation,depth,refs,printer,type)=>++depth>config.maxDepth?printAsLeaf(getImmutableName(type)):getImmutableName(type)+" {"+(0,_collections.printIteratorEntries)(val.entries(),config,indentation,depth,refs,printer)+"}")(val,config,indentation,depth,refs,printer,val["@@__IMMUTABLE_ORDERED__@@"]?"OrderedMap":"Map"):val["@@__IMMUTABLE_LIST__@@"]?printImmutableValues(val,config,indentation,depth,refs,printer,"List"):val["@@__IMMUTABLE_SET__@@"]?printImmutableValues(val,config,indentation,depth,refs,printer,val["@@__IMMUTABLE_ORDERED__@@"]?"OrderedSet":"Set"):val["@@__IMMUTABLE_STACK__@@"]?printImmutableValues(val,config,indentation,depth,refs,printer,"Stack"):val["@@__IMMUTABLE_SEQ__@@"]?((val,config,indentation,depth,refs,printer)=>{const name=getImmutableName("Seq");return++depth>config.maxDepth?printAsLeaf(name):val["@@__IMMUTABLE_KEYED__@@"]?name+" {"+(val._iter||val._object?(0,_collections.printIteratorEntries)(val.entries(),config,indentation,depth,refs,printer):"…")+"}":name+" ["+(val._iter||val._array||val._collection||val._iterable?(0,_collections.printIteratorValues)(val.values(),config,indentation,depth,refs,printer):"…")+"]"})(val,config,indentation,depth,refs,printer):((val,config,indentation,depth,refs,printer)=>{const name=getImmutableName(val._name||"Record");return++depth>config.maxDepth?printAsLeaf(name):name+" {"+(0,_collections.printIteratorEntries)(function getRecordEntries(val){let i=0;return{next(){if(i<val._keys.length){const key=val._keys[i++];return{done:!1,value:[key,val.get(key)]}}return{done:!0,value:void 0}}}}(val),config,indentation,depth,refs,printer)+"}"})(val,config,indentation,depth,refs,printer);exports.serialize=serialize;const test=val=>val&&(!0===val["@@__IMMUTABLE_ITERABLE__@@"]||!0===val["@@__IMMUTABLE_RECORD__@@"]);exports.test=test;var _default={serialize:serialize,test:test};exports.default=_default},"./node_modules/pretty-format/build/plugins/ReactElement.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.test=exports.serialize=exports.default=void 0;var ReactIs=function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("./node_modules/react-is/index.js")),_markup=__webpack_require__("./node_modules/pretty-format/build/plugins/lib/markup.js");function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}const getChildren=(arg,children=[])=>(Array.isArray(arg)?arg.forEach((item=>{getChildren(item,children)})):null!=arg&&!1!==arg&&children.push(arg),children),getType=element=>{const type=element.type;if("string"==typeof type)return type;if("function"==typeof type)return type.displayName||type.name||"Unknown";if(ReactIs.isFragment(element))return"React.Fragment";if(ReactIs.isSuspense(element))return"React.Suspense";if("object"==typeof type&&null!==type){if(ReactIs.isContextProvider(element))return"Context.Provider";if(ReactIs.isContextConsumer(element))return"Context.Consumer";if(ReactIs.isForwardRef(element)){if(type.displayName)return type.displayName;const functionName=type.render.displayName||type.render.name||"";return""!==functionName?"ForwardRef("+functionName+")":"ForwardRef"}if(ReactIs.isMemo(element)){const functionName=type.displayName||type.type.displayName||type.type.name||"";return""!==functionName?"Memo("+functionName+")":"Memo"}}return"UNDEFINED"},serialize=(element,config,indentation,depth,refs,printer)=>++depth>config.maxDepth?(0,_markup.printElementAsLeaf)(getType(element),config):(0,_markup.printElement)(getType(element),(0,_markup.printProps)((element=>{const{props:props}=element;return Object.keys(props).filter((key=>"children"!==key&&void 0!==props[key])).sort()})(element),element.props,config,indentation+config.indent,depth,refs,printer),(0,_markup.printChildren)(getChildren(element.props.children),config,indentation+config.indent,depth,refs,printer),config,indentation);exports.serialize=serialize;const test=val=>null!=val&&ReactIs.isElement(val);exports.test=test;var _default={serialize:serialize,test:test};exports.default=_default},"./node_modules/pretty-format/build/plugins/ReactTestComponent.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.test=exports.serialize=exports.default=void 0;var _markup=__webpack_require__("./node_modules/pretty-format/build/plugins/lib/markup.js"),global="undefined"!=typeof globalThis?globalThis:void 0!==global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),Symbol=global["jest-symbol-do-not-touch"]||global.Symbol;const testSymbol="function"==typeof Symbol&&Symbol.for?Symbol.for("react.test.json"):245830487,serialize=(object,config,indentation,depth,refs,printer)=>++depth>config.maxDepth?(0,_markup.printElementAsLeaf)(object.type,config):(0,_markup.printElement)(object.type,object.props?(0,_markup.printProps)((object=>{const{props:props}=object;return props?Object.keys(props).filter((key=>void 0!==props[key])).sort():[]})(object),object.props,config,indentation+config.indent,depth,refs,printer):"",object.children?(0,_markup.printChildren)(object.children,config,indentation+config.indent,depth,refs,printer):"",config,indentation);exports.serialize=serialize;const test=val=>val&&val.$$typeof===testSymbol;exports.test=test;var _default={serialize:serialize,test:test};exports.default=_default},"./node_modules/pretty-format/build/plugins/lib/escapeHTML.js":function(__unused_webpack_module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function escapeHTML(str){return str.replace(/</g,"&lt;").replace(/>/g,"&gt;")}},"./node_modules/pretty-format/build/plugins/lib/markup.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.printText=exports.printProps=exports.printElementAsLeaf=exports.printElement=exports.printComment=exports.printChildren=void 0;var _escapeHTML=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/pretty-format/build/plugins/lib/escapeHTML.js"));exports.printProps=(keys,props,config,indentation,depth,refs,printer)=>{const indentationNext=indentation+config.indent,colors=config.colors;return keys.map((key=>{const value=props[key];let printed=printer(value,config,indentationNext,depth,refs);return"string"!=typeof value&&(-1!==printed.indexOf("\n")&&(printed=config.spacingOuter+indentationNext+printed+config.spacingOuter+indentation),printed="{"+printed+"}"),config.spacingInner+indentation+colors.prop.open+key+colors.prop.close+"="+colors.value.open+printed+colors.value.close})).join("")};exports.printChildren=(children,config,indentation,depth,refs,printer)=>children.map((child=>config.spacingOuter+indentation+("string"==typeof child?printText(child,config):printer(child,config,indentation,depth,refs)))).join("");const printText=(text,config)=>{const contentColor=config.colors.content;return contentColor.open+(0,_escapeHTML.default)(text)+contentColor.close};exports.printText=printText;exports.printComment=(comment,config)=>{const commentColor=config.colors.comment;return commentColor.open+"\x3c!--"+(0,_escapeHTML.default)(comment)+"--\x3e"+commentColor.close};exports.printElement=(type,printedProps,printedChildren,config,indentation)=>{const tagColor=config.colors.tag;return tagColor.open+"<"+type+(printedProps&&tagColor.close+printedProps+config.spacingOuter+indentation+tagColor.open)+(printedChildren?">"+tagColor.close+printedChildren+config.spacingOuter+indentation+tagColor.open+"</"+type:(printedProps&&!config.min?"":" ")+"/")+">"+tagColor.close};exports.printElementAsLeaf=(type,config)=>{const tagColor=config.colors.tag;return tagColor.open+"<"+type+tagColor.close+" …"+tagColor.open+" />"+tagColor.close}},"./node_modules/pretty-format/node_modules/ansi-styles/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";module=__webpack_require__.nmd(module);const wrapAnsi256=(offset=0)=>code=>`[${38+offset};5;${code}m`,wrapAnsi16m=(offset=0)=>(red,green,blue)=>`[${38+offset};2;${red};${green};${blue}m`;Object.defineProperty(module,"exports",{enumerable:!0,get:function assembleStyles(){const codes=new Map,styles={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};styles.color.gray=styles.color.blackBright,styles.bgColor.bgGray=styles.bgColor.bgBlackBright,styles.color.grey=styles.color.blackBright,styles.bgColor.bgGrey=styles.bgColor.bgBlackBright;for(const[groupName,group]of Object.entries(styles)){for(const[styleName,style]of Object.entries(group))styles[styleName]={open:`[${style[0]}m`,close:`[${style[1]}m`},group[styleName]=styles[styleName],codes.set(style[0],style[1]);Object.defineProperty(styles,groupName,{value:group,enumerable:!1})}return Object.defineProperty(styles,"codes",{value:codes,enumerable:!1}),styles.color.close="[39m",styles.bgColor.close="[49m",styles.color.ansi256=wrapAnsi256(),styles.color.ansi16m=wrapAnsi16m(),styles.bgColor.ansi256=wrapAnsi256(10),styles.bgColor.ansi16m=wrapAnsi16m(10),Object.defineProperties(styles,{rgbToAnsi256:{value:(red,green,blue)=>red===green&&green===blue?red<8?16:red>248?231:Math.round((red-8)/247*24)+232:16+36*Math.round(red/255*5)+6*Math.round(green/255*5)+Math.round(blue/255*5),enumerable:!1},hexToRgb:{value:hex=>{const matches=/(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));if(!matches)return[0,0,0];let{colorString:colorString}=matches.groups;3===colorString.length&&(colorString=colorString.split("").map((character=>character+character)).join(""));const integer=Number.parseInt(colorString,16);return[integer>>16&255,integer>>8&255,255&integer]},enumerable:!1},hexToAnsi256:{value:hex=>styles.rgbToAnsi256(...styles.hexToRgb(hex)),enumerable:!1}}),styles}})},"./node_modules/react-is/cjs/react-is.production.min.js":function(__unused_webpack_module,exports){"use strict";var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;if("function"==typeof Symbol&&Symbol.for){var x=Symbol.for;b=x("react.element"),c=x("react.portal"),d=x("react.fragment"),e=x("react.strict_mode"),f=x("react.profiler"),g=x("react.provider"),h=x("react.context"),k=x("react.forward_ref"),l=x("react.suspense"),m=x("react.suspense_list"),n=x("react.memo"),p=x("react.lazy"),q=x("react.block"),r=x("react.server.block"),u=x("react.fundamental"),v=x("react.debug_trace_mode"),w=x("react.legacy_hidden")}function y(a){if("object"==typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h,exports.ContextProvider=z,exports.Element=A,exports.ForwardRef=B,exports.Fragment=C,exports.Lazy=D,exports.Memo=E,exports.Portal=F,exports.Profiler=G,exports.StrictMode=H,exports.Suspense=I,exports.isAsyncMode=function(){return!1},exports.isConcurrentMode=function(){return!1},exports.isContextConsumer=function(a){return y(a)===h},exports.isContextProvider=function(a){return y(a)===g},exports.isElement=function(a){return"object"==typeof a&&null!==a&&a.$$typeof===b},exports.isForwardRef=function(a){return y(a)===k},exports.isFragment=function(a){return y(a)===d},exports.isLazy=function(a){return y(a)===p},exports.isMemo=function(a){return y(a)===n},exports.isPortal=function(a){return y(a)===c},exports.isProfiler=function(a){return y(a)===f},exports.isStrictMode=function(a){return y(a)===e},exports.isSuspense=function(a){return y(a)===l},exports.isValidElementType=function(a){return"string"==typeof a||"function"==typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||"object"==typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)},exports.typeOf=y},"./node_modules/react-is/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";module.exports=__webpack_require__("./node_modules/react-is/cjs/react-is.production.min.js")},"./node_modules/redent/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";const stripIndent=__webpack_require__("./node_modules/strip-indent/index.js"),indentString=__webpack_require__("./node_modules/indent-string/index.js");module.exports=(string,count=0,options)=>indentString(stripIndent(string),count,options)},"./node_modules/regexp.prototype.flags/implementation.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var functionsHaveConfigurableNames=__webpack_require__("./node_modules/functions-have-names/index.js").functionsHaveConfigurableNames(),$Object=Object,$TypeError=TypeError;module.exports=function flags(){if(null!=this&&this!==$Object(this))throw new $TypeError("RegExp.prototype.flags getter called on non-object");var result="";return this.hasIndices&&(result+="d"),this.global&&(result+="g"),this.ignoreCase&&(result+="i"),this.multiline&&(result+="m"),this.dotAll&&(result+="s"),this.unicode&&(result+="u"),this.unicodeSets&&(result+="v"),this.sticky&&(result+="y"),result},functionsHaveConfigurableNames&&Object.defineProperty&&Object.defineProperty(module.exports,"name",{value:"get flags"})},"./node_modules/regexp.prototype.flags/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var define=__webpack_require__("./node_modules/define-properties/index.js"),callBind=__webpack_require__("./node_modules/call-bind/index.js"),implementation=__webpack_require__("./node_modules/regexp.prototype.flags/implementation.js"),getPolyfill=__webpack_require__("./node_modules/regexp.prototype.flags/polyfill.js"),shim=__webpack_require__("./node_modules/regexp.prototype.flags/shim.js"),flagsBound=callBind(getPolyfill());define(flagsBound,{getPolyfill:getPolyfill,implementation:implementation,shim:shim}),module.exports=flagsBound},"./node_modules/regexp.prototype.flags/polyfill.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var implementation=__webpack_require__("./node_modules/regexp.prototype.flags/implementation.js"),supportsDescriptors=__webpack_require__("./node_modules/define-properties/index.js").supportsDescriptors,$gOPD=Object.getOwnPropertyDescriptor;module.exports=function getPolyfill(){if(supportsDescriptors&&"gim"===/a/gim.flags){var descriptor=$gOPD(RegExp.prototype,"flags");if(descriptor&&"function"==typeof descriptor.get&&"boolean"==typeof RegExp.prototype.dotAll&&"boolean"==typeof RegExp.prototype.hasIndices){var calls="",o={};if(Object.defineProperty(o,"hasIndices",{get:function(){calls+="d"}}),Object.defineProperty(o,"sticky",{get:function(){calls+="y"}}),"dy"===calls)return descriptor.get}}return implementation}},"./node_modules/regexp.prototype.flags/shim.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var supportsDescriptors=__webpack_require__("./node_modules/define-properties/index.js").supportsDescriptors,getPolyfill=__webpack_require__("./node_modules/regexp.prototype.flags/polyfill.js"),gOPD=Object.getOwnPropertyDescriptor,defineProperty=Object.defineProperty,TypeErr=TypeError,getProto=Object.getPrototypeOf,regex=/a/;module.exports=function shimFlags(){if(!supportsDescriptors||!getProto)throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var polyfill=getPolyfill(),proto=getProto(regex),descriptor=gOPD(proto,"flags");return descriptor&&descriptor.get===polyfill||defineProperty(proto,"flags",{configurable:!0,enumerable:!1,get:polyfill}),polyfill}},"./node_modules/side-channel/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var GetIntrinsic=__webpack_require__("./node_modules/get-intrinsic/index.js"),callBound=__webpack_require__("./node_modules/call-bind/callBound.js"),inspect=__webpack_require__("./node_modules/object-inspect/index.js"),$TypeError=GetIntrinsic("%TypeError%"),$WeakMap=GetIntrinsic("%WeakMap%",!0),$Map=GetIntrinsic("%Map%",!0),$weakMapGet=callBound("WeakMap.prototype.get",!0),$weakMapSet=callBound("WeakMap.prototype.set",!0),$weakMapHas=callBound("WeakMap.prototype.has",!0),$mapGet=callBound("Map.prototype.get",!0),$mapSet=callBound("Map.prototype.set",!0),$mapHas=callBound("Map.prototype.has",!0),listGetNode=function(list,key){for(var curr,prev=list;null!==(curr=prev.next);prev=curr)if(curr.key===key)return prev.next=curr.next,curr.next=list.next,list.next=curr,curr};module.exports=function getSideChannel(){var $wm,$m,$o,channel={assert:function(key){if(!channel.has(key))throw new $TypeError("Side channel does not contain "+inspect(key))},get:function(key){if($WeakMap&&key&&("object"==typeof key||"function"==typeof key)){if($wm)return $weakMapGet($wm,key)}else if($Map){if($m)return $mapGet($m,key)}else if($o)return function(objects,key){var node=listGetNode(objects,key);return node&&node.value}($o,key)},has:function(key){if($WeakMap&&key&&("object"==typeof key||"function"==typeof key)){if($wm)return $weakMapHas($wm,key)}else if($Map){if($m)return $mapHas($m,key)}else if($o)return function(objects,key){return!!listGetNode(objects,key)}($o,key);return!1},set:function(key,value){$WeakMap&&key&&("object"==typeof key||"function"==typeof key)?($wm||($wm=new $WeakMap),$weakMapSet($wm,key,value)):$Map?($m||($m=new $Map),$mapSet($m,key,value)):($o||($o={key:{},next:null}),function(objects,key,value){var node=listGetNode(objects,key);node?node.value=value:objects.next={key:key,next:objects.next,value:value}}($o,key,value))}};return channel}},"./node_modules/stop-iteration-iterator/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var SLOT=__webpack_require__("./node_modules/internal-slot/index.js"),$SyntaxError=SyntaxError,$StopIteration="object"==typeof StopIteration?StopIteration:null;module.exports=function getStopIterationIterator(origIterator){if(!$StopIteration)throw new $SyntaxError("this environment lacks StopIteration");SLOT.set(origIterator,"[[Done]]",!1);var siIterator={next:function next(){var iterator=SLOT.get(this,"[[Iterator]]"),done=SLOT.get(iterator,"[[Done]]");try{return{done:done,value:done?void 0:iterator.next()}}catch(e){if(SLOT.set(iterator,"[[Done]]",!0),e!==$StopIteration)throw e;return{done:!0,value:void 0}}}};return SLOT.set(siIterator,"[[Iterator]]",origIterator),siIterator}},"./node_modules/strip-indent/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";const minIndent=__webpack_require__("./node_modules/min-indent/index.js");module.exports=string=>{const indent=minIndent(string);if(0===indent)return string;const regex=new RegExp(`^[ \\t]{${indent}}`,"gm");return string.replace(regex,"")}},"./node_modules/which-boxed-primitive/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var isString=__webpack_require__("./node_modules/is-string/index.js"),isNumber=__webpack_require__("./node_modules/is-number-object/index.js"),isBoolean=__webpack_require__("./node_modules/is-boolean-object/index.js"),isSymbol=__webpack_require__("./node_modules/is-symbol/index.js"),isBigInt=__webpack_require__("./node_modules/is-bigint/index.js");module.exports=function whichBoxedPrimitive(value){return null==value||"object"!=typeof value&&"function"!=typeof value?null:isString(value)?"String":isNumber(value)?"Number":isBoolean(value)?"Boolean":isSymbol(value)?"Symbol":isBigInt(value)?"BigInt":void 0}},"./node_modules/which-collection/index.js":function(module,__unused_webpack_exports,__webpack_require__){"use strict";var isMap=__webpack_require__("./node_modules/is-map/index.js"),isSet=__webpack_require__("./node_modules/is-set/index.js"),isWeakMap=__webpack_require__("./node_modules/is-weakmap/index.js"),isWeakSet=__webpack_require__("./node_modules/is-weakset/index.js");module.exports=function whichCollection(value){if(value&&"object"==typeof value){if(isMap(value))return"Map";if(isSet(value))return"Set";if(isWeakMap(value))return"WeakMap";if(isWeakSet(value))return"WeakSet"}return!1}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,